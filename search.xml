<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>11.文件和异常</title>
    <url>/2020/02/12/11-%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h2 id="11-文件和异常"><a href="#11-文件和异常" class="headerlink" title="11.文件和异常"></a><strong>11.文件和异常</strong></h2><p>在Python中实现文件的读写操作通过内置的open函数，我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，接下来就可以对文件进行读写操作了。</p><a id="more"></a><p>读写函数：</p><div class="table-container"><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td>‘r’</td><td>读取（默认）</td></tr><tr><td>‘w’</td><td>写入（会先截断之前的内容）</td></tr><tr><td>‘x’</td><td>写入，如果文件已经存在会发生异常</td></tr><tr><td>‘a’</td><td>追加，讲内容写入到已有文件的末尾</td></tr><tr><td>‘b’</td><td>二进制模式</td></tr><tr><td>‘t’</td><td>文本模式（默认）</td></tr><tr><td>‘+’</td><td>更新（既可以读又可以写）</td></tr></tbody></table></div><h2 id="读写文本文件"><a href="#读写文本文件" class="headerlink" title="读写文本文件"></a>读写文本文件</h2><p>读取文本文件时，需要在使用open函数时指定好带路径的文件名（可以使用相对路径或绝对路径）并将文件模式设置为‘r’（如果不指定，默认值也是’r’），然后通过encoding参数指定编码（如果不指定，默认值为None，那么在读取文件时使用的是操作系统默认的编码），如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败。<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    f = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(<span class="string">'致橡树.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        print(f.read())</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">'无法打开指定的文件！'</span>)</span><br><span class="line">    <span class="keyword">except</span> LookupError:</span><br><span class="line">        print(<span class="string">'指定了未知的编码！'</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        print(<span class="string">'读取文件时解码错误！'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line">可以用<span class="keyword">with</span>代替<span class="keyword">finally</span></span><br><span class="line"><span class="comment"># def main():</span></span><br><span class="line"><span class="comment">#     try:</span></span><br><span class="line"><span class="comment">#         with open('致橡树.txt','r',encoding='utf-8') as f:</span></span><br><span class="line"><span class="comment">#             print(f.read())</span></span><br><span class="line"><span class="comment">#     except FileNotFoundError:</span></span><br><span class="line"><span class="comment">#         print('无法打开指定的文件！')</span></span><br><span class="line"><span class="comment">#     except LookupError:</span></span><br><span class="line"><span class="comment">#         print('指定了未知的编码！')</span></span><br><span class="line"><span class="comment">#     except UnicodeDecodeError:</span></span><br><span class="line"><span class="comment">#         print('读取文件时解码错误！')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><br>通过for-in循环逐行读取或者用readline方法将文件按行读取到一个列表容器：<br><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    <span class="comment"># 一次性读取整个文件内容</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'致橡树.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(f.<span class="built_in">read</span>())</span><br><span class="line">    <span class="comment"># 通过for-in循环逐行读取</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'致橡树.txt'</span>,mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> f:</span><br><span class="line">            print(<span class="built_in">line</span>,<span class="keyword">end</span>=<span class="string">''</span>)</span><br><span class="line">            <span class="built_in">time</span>.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print()</span><br><span class="line">    <span class="comment"># 读取文件按行读取到列表中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'致橡树.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">lines</span> = f.readlines()</span><br><span class="line">    print(<span class="keyword">lines</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   main()</span><br></pre></td></tr></table></figure><br>文本信息写入文件文件使用open函数,指定好文件名并将文件模式设置’w’即可。如果需要对文件内容进行追加式写入，应该将模式设置为’a’。如果要写入的文件不存在会自动创建文件而不是引发异常。下面的例子演示了如何将1-9999之间的素数分别写入三个文件中（1-99之间的素数保存在a.txt中，100-999之间的素数保存在b.txt中，1000-9999之间的素数保存在c.txt中）。<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">from math import <span class="built_in">sqrt</span></span><br><span class="line"></span><br><span class="line">def is_prime(n):</span><br><span class="line">    <span class="string">""</span><span class="string">"判断素数"</span><span class="string">""</span></span><br><span class="line">    assert n &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> factor in <span class="built_in">range</span>(<span class="number">2</span>,<span class="keyword">int</span>(<span class="built_in">sqrt</span>(n)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> False</span><br><span class="line">    <span class="keyword">return</span> True <span class="keyword">if</span> n != <span class="number">1</span> <span class="keyword">else</span> False</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    filenames = (<span class="string">'a.txt'</span>,<span class="string">'b.txt'</span>,<span class="string">'c.txt'</span>)</span><br><span class="line">    fs_list = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> filename in filename<span class="variable">s:</span></span><br><span class="line">            fs_list.<span class="keyword">append</span>(<span class="keyword">open</span>(filename,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">number</span> in <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">            <span class="keyword">if</span> is_prime(<span class="keyword">number</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">number</span> &lt; <span class="number">100</span>:</span><br><span class="line">                    fs_list[<span class="number">0</span>].<span class="keyword">write</span>(str(<span class="keyword">number</span>)+<span class="string">'\n'</span>)</span><br><span class="line">                elif <span class="keyword">number</span> &lt; <span class="number">1000</span>:</span><br><span class="line">                    fs_list[<span class="number">1</span>].<span class="keyword">write</span>(str(<span class="keyword">number</span>) + <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fs_list[<span class="number">2</span>].<span class="keyword">write</span>(str(<span class="keyword">number</span>) + <span class="string">'\n'</span>)</span><br><span class="line">    except IOError <span class="keyword">as</span> <span class="keyword">ex</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="keyword">ex</span>)</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'写文件时发生错误！'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">for</span> fs in fs_lis<span class="variable">t:</span></span><br><span class="line">            fs.<span class="keyword">close</span>()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'操作完成！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><h2 id="读写二进制文件"><a href="#读写二进制文件" class="headerlink" title="读写二进制文件"></a>读写二进制文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">复制图片文件功能</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'guido.jpg'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> fs1:</span><br><span class="line">            data = fs1.read()</span><br><span class="line">            print(type(data)) <span class="comment">#&lt;class 'bytes'&gt;</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'优秀.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> fs2:</span><br><span class="line">            fs2.write(data)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'指定的文件无法打开.'</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'读写文件时出现错误.'</span>)</span><br><span class="line">    print(<span class="string">'程序执行结束.'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="读写JSON-JavaScript-Object-Notation-文件"><a href="#读写JSON-JavaScript-Object-Notation-文件" class="headerlink" title="读写JSON(JavaScript Object Notation)文件"></a>读写JSON(JavaScript Object Notation)文件</h2><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: ’张三‘，</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">35</span>,</span><br><span class="line">    <span class="string">"qq"</span>: <span class="number">957658</span>,</span><br><span class="line">    <span class="string">"friends"</span>: [<span class="string">'王大锤'</span>,<span class="string">'白元芳'</span>],</span><br><span class="line">    <span class="string">"cars"</span>: [</span><br><span class="line">        &#123;<span class="string">"brand"</span>: <span class="string">'BYD'</span>, <span class="string">'max_speed'</span>:<span class="number">180</span>&#125;</span><br><span class="line">        &#123;<span class="string">"brand"</span>: <span class="string">'Audi'</span>,<span class="string">'max_speed'</span>:<span class="number">280</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"brand"</span>: <span class="string">'Benz'</span>,<span class="string">'max_speed'</span>:<span class="number">320</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON跟Python中字典其实是一样一样的，事实上JSON的数据类型和Python的数据类型是很容易找到对用关系的</p><div class="table-container"><table><thead><tr><th>JSON</th><th>Python</th></tr></thead><tbody><tr><td>object</td><td>dict</td></tr><tr><td>array</td><td>list</td></tr><tr><td>string</td><td>str</td></tr><tr><td>number(int/real)</td><td>int/float</td></tr><tr><td>true/false</td><td>True/False</td></tr><tr><td>null</td><td>None</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list,tuple</td><td>array</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int,float,int-&amp;float-derived Enums</td><td>number</td></tr><tr><td>True/Flase</td><td>true/false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table></div><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>Python-100days</tag>
      </tags>
  </entry>
  <entry>
    <title>AES算法</title>
    <url>/2020/03/22/AES%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="本文为AES算法的原理详解。"><a href="#本文为AES算法的原理详解。" class="headerlink" title="本文为AES算法的原理详解。"></a>本文为AES算法的原理详解。</h3><a id="more"></a><h2 id="AES算法"><a href="#AES算法" class="headerlink" title="AES算法"></a>AES算法</h2><p>AES算法是迭代型分组密码算法</p><h4 id="基本参数："><a href="#基本参数：" class="headerlink" title="基本参数："></a>基本参数：</h4><ul><li>分组长度：128比特</li><li>密钥长度：128、192或256比特</li><li>圈数：10、12或14圈，与密钥长度相对应。<br><img src="/2020/03/22/AES%E7%AE%97%E6%B3%95/01.png" alt="0e3a70192e194b783ac4ce688cae36bb.png"></li></ul><p>前9次加密过程除了密钥都一样，最后一次加密过程没有列混淆。</p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><h4 id="字节代替变换-S盒"><a href="#字节代替变换-S盒" class="headerlink" title="字节代替变换(S盒)"></a>字节代替变换(S盒)</h4><p>字节代替变换时关于字节的非线性变换，它将字节矩阵中每一个字节利用同一个S盒变换为另一个字节。变换后位置不变。</p><p>由两个可逆变换复合而成。</p><ul><li>将每一个字节变换为它在有限域GF(2^8)中的乘法逆。并规定0变换到其自身。</li><li>对上一步骤的变换结果用二元域上的一个仿射变换作用。<br>S盒</li></ul><p>也可以直接按照s盒的表进行替换<br><img src="/2020/03/22/AES%E7%AE%97%E6%B3%95/02.png" alt="daedb9641b23bd557f9c88801265bba9.png"><br><img src="/2020/03/22/AES%E7%AE%97%E6%B3%95/03.png" alt="86fe95a3443cf677cd411272a670467b.png"></p><p>S和S-1分别为16x16的矩阵，完成一个8比特输入到8比特输出的映射，输入的高4-bit对应的值作为行标，低4-bit对应的值作为列标。假设输入字节的值为a=a7a6a5a4a3a2a1a0，则输出值为S[a7a6a5a4][a3a2a1a0]，S-1的变换也同理。</p><h4 id="行移位变换"><a href="#行移位变换" class="headerlink" title="行移位变换"></a>行移位变换</h4><p>如果将一个字节矩阵的行从上到下分别称为第0，1，2，3行，则行移位变换的作用就是将这个字节矩阵的第i行循环移位左移i个字节。<br><img src="/2020/03/22/AES%E7%AE%97%E6%B3%95/04.png" alt="cd416635aa2f10677a8033eea21cb1a9.png"></p><h4 id="列混合变换"><a href="#列混合变换" class="headerlink" title="列混合变换"></a>列混合变换</h4><p>列混合变换对一个字节矩阵逐列进行变换<img src="/2020/03/22/AES%E7%AE%97%E6%B3%95/05.png" alt="affc4a23e5dc09d1200a8036cc65c23e.png"></p><p><img src="/2020/03/22/AES%E7%AE%97%E6%B3%95/06.png" alt="303b72e95c24fbe9dfaa32d71bb6f51f.png"></p><h4 id="圈密钥加"><a href="#圈密钥加" class="headerlink" title="圈密钥加"></a>圈密钥加</h4><p>圈密钥是通过密钥生成算法从初始密钥中产生，其长度等于分组长度。</p><p><img src="/2020/03/22/AES%E7%AE%97%E6%B3%95/07.png" alt="b2ed713bb65a9a284d605200ae187a11.png"></p><h4 id="密钥扩展算法"><a href="#密钥扩展算法" class="headerlink" title="密钥扩展算法"></a>密钥扩展算法</h4><p>AES算法的圈密钥长度等于分组长度128比特，即4个32位字，若迭代圈数为Nr，则连同入口密钥，共需4(Nr+1)个32位字的密钥。</p><p><img src="/2020/03/22/AES%E7%AE%97%E6%B3%95/08.png" alt="a7275851176f61b27426a798a083a0ed.png"><br>密钥扩展说明：</p><ul><li><p>将种子密钥按图(a)的格式排列，其中k0、k1、……、k15依次表示种子密钥的一个字<br>节；排列后用4个32比特的字表示，分别记为w[0]、w[1]、w[2]、w[3]；</p></li><li><p>按照如下方式，依次求解w[j]，其中j是整数并且属于[4,43]；</p></li><li>若j%4=0,则w[j]=w[j-4]⊕g(w[j-1]),否则w[j]=w[j-4]⊕w[j-1]；　　函数g的流程说明：<ul><li>将w循环左移8比特；</li><li>分别对每个字节做S盒置换；</li><li>32比特的常量（RC[j/4],0,0,0）进行异或，RC是一个一维数组，其值如下。（RC的值只需要有10个，而此处用了11个，实际上RC[0]在运算中没有用到，增加RC[0]是为了便于程序中用数组表示。由于j的最小取值是4，j/4的最小取值则是1，因此不会产生错误。）</li></ul></li></ul><p>RC = {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36}</p><p>参考：<br><a href="https://www.cnblogs.com/luop/p/4334160.html" target="_blank" rel="noopener">https://www.cnblogs.com/luop/p/4334160.html</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>14.网络编程入门</title>
    <url>/2020/02/18/14-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h1 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h1><h3 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h3><p>实现网络通信的基础是网络通信协议，这些协议通常是由互联网工程任务组（IETF）制定的。所谓“协议”就是通信计算机双方必须共同遵从的一组约定，例如怎样建立连接，怎样相互识别等，网络协议的三要素是：语法、语义和时序。构成我们今天使用的Inter的基础的是TCP/IP协议族，协议族就是一系列的协议及其构成的通信模型，也把这套东西称为TCP/IP模型。与国际标准化组织发布的OSI/RM这个七层模型不同，TCP/IP是一个四层模型，自顶向上依次是：网络接口层、网络层、传输层和应用层。如下图所示。<br><a id="more"></a><br><img src="/2020/02/18/14-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/TCP-IP-model.png" alt></p><p>IP通常被翻译为网际协议，它服务于网络层，主要实现了寻址和路由的功能。接入网络的每一台主机都需要有自己的IP地址，IP地址就是主机在计算机网络上的身份标识。当然由于IPv4地址的匮乏，我们平常在家里、办公室以及其他可以接入网络的公共区域上网时获得的IP地址并不是全球唯一的IP地址，而是一个区域网中的内部IP地址，通过网络地址转换服务我们也可以实现对网络的访问。计算机网络上有大量的我们称为“路由器”的网络中继设备，它们会存储转发我们发送到网络上的数据分组，让从源头发出的数据最终能够找到传送目的的地通路，这项功能就是所谓的路由。</p><p>TCP全称传输控制协议，它是基于IP提供的寻址和路由器服务而建立起来的负责实现端到端可靠传输的协议，之所以将TCP称为可靠的传输协议是因为TCP想调用者承诺了三件事情：</p><ul><li>数据不传丢不传错（利用握手、校验和重传机制可以实现）。</li><li>流量控制（通过滑动窗口匹配数据发送者和接收着之间的传输速度）。</li><li>拥塞控制（通过RTT时间以及对滑动窗口的控制缓解网络拥堵）。</li></ul><h3 id="网络应用模式"><a href="#网络应用模式" class="headerlink" title="网络应用模式"></a>网络应用模式</h3><ol><li>C/S模式和B/S模式。C指Client（客户端），通常是一个需要安装到某个宿主操作系统上的应用程序；B指Brower（浏览器），它几乎是所有图形化操作系统都默认安装了的一个应用软件；通过C或B都可以实现对S（服务器）的访问。</li><li>去中心化的网络应用模式。不管是B/S还是C/S都需要服务器的存在，服务器就是整个应用模式的中心，而去中心化的网络应用通常没有固定的服务器或者固定的客户端，所有应用的使用者既可以作为资源的提供者也可以作为资源的访问者。</li></ol><h2 id="基于HTTP协议的网络资源的访问"><a href="#基于HTTP协议的网络资源的访问" class="headerlink" title="基于HTTP协议的网络资源的访问"></a>基于HTTP协议的网络资源的访问</h2><h3 id="HTTP（超文本传输协议）"><a href="#HTTP（超文本传输协议）" class="headerlink" title="HTTP（超文本传输协议）"></a>HTTP（超文本传输协议）</h3><p>HTTP是超文本传输协议（Hyper-Text Transfer Proctol）的简称。维基百科解释为：超文本协议是一种用于分布式、协作式和超媒体信息系统的应用层协议，它是万维网数据通信的基础，设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法，通过HTTP或者HTTPS（超文本传输安全协议）请求的资源由URI（统一资源标识符）来标识。阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">《HTTP协议入门》</a></p><h3 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h3><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换语言，该语言以易于阅读的文字（纯文本）为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是最初只是JavaScript中一种创建对象的字面量语法，但它在当下更是一种独立于语言的数据格式，很多编程语言都支持JSON格式数据的生成和解析，Python内置的json模块也提供了这方面功能。由于JSON是纯文本，它和XML一样都适用于异构系统之间的数据交换，而相较于XML，JSON显得更加的轻便和优雅。下面是表达同样信息的XML和JSON，而JSON的优势是相当直观的。</p><p>XML的例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">from</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">to</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">content</span>&gt;</span>Will you marry me?<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSON的例子：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"from"</span>: <span class="string">"Alice"</span>,</span><br><span class="line">    <span class="attr">"to"</span>: <span class="string">"Bob"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"Will you marry me?"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h3><p>requests是一个基于HTTP协议来使用网络的第三库，其官方网站有这样的一句介绍它的话：“Requests是唯一的一个非转基因的Python HTTP库，人类可以安全享用。”简单的说，使用requests库可以非常方便的使用HTTP，避免安全缺陷、冗余代码以及“重复发明轮子”（行业黑话，通常用在软件工程领域表示重新创造一个已有的或是早已被优化過的基本方法）。前面的文章中我们已经使用过这个库，下面我们还是通过requests来实现一个访问网络数据接口并从中获取美女图片下载链接然后下载美女图片到本地的例子程序，程序中使用了天行数据提供的网络API。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span>  Thread</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承Thread类创建自定义的线程类：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadHanlder</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.url = url</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename = self.url[self.url.rfind(<span class="string">'/'</span>)+<span class="number">1</span>:]</span><br><span class="line">        resp = requests.get(self.url)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'/Users/Hao'</span> + filename,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 通过requests模块的get函数获取网络资源</span></span><br><span class="line">    <span class="comment"># 下面的代码中使用了天行数据借口提供的网络API</span></span><br><span class="line">    <span class="comment"># 要使用该数据借口需要在天行数据的网站上注册</span></span><br><span class="line">    <span class="comment"># 然后用自己的Key替换掉下面代码中APIKey即可</span></span><br><span class="line">    resp = requests.get(<span class="string">'http://api.tinanapi.com/meinv/?key=APIKey&amp;num=10'</span>)</span><br><span class="line">    <span class="comment"># 将服务器返回的JSON格式的数据解析为字典</span></span><br><span class="line">    data_model = resp.json()</span><br><span class="line">    <span class="keyword">for</span> mm_dict <span class="keyword">in</span> data_model[<span class="string">'newslist'</span>]:</span><br><span class="line">        url = mm_dict(<span class="string">'picUrl'</span>)</span><br><span class="line">        <span class="comment"># 通过多线程的方式实现图片下载</span></span><br><span class="line">        DownloadHanlder(url).start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="基于传输层协议的套接字编程"><a href="#基于传输层协议的套接字编程" class="headerlink" title="基于传输层协议的套接字编程"></a>基于传输层协议的套接字编程</h2><p>套接字是一套c语言写成的应用程序开发库，主要用于实现进程间通信和网路编程。实际开发使用套接字分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。</p><h3 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h3><p>TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。<br>下面代码实现一个提供日期的服务器<br></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket import socket,SOCK_STREAM,AF_INET</span><br><span class="line"><span class="keyword">from</span> datetime import datetime</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 1.创建套接字对象并指定使用哪种传输服务</span><br><span class="line">    # family = AF_INET - IPv4地址</span><br><span class="line">    # family = AF_INET5 - IPv6地址</span><br><span class="line">    #<span class="built_in"> type </span>= SOCK_STREAM - TCP套接字</span><br><span class="line">    #<span class="built_in"> type </span>= SOCK_DGRAM - UDP套接字</span><br><span class="line">    #<span class="built_in"> type </span>= SOCK_RAW - 原始套接字</span><br><span class="line">   <span class="built_in"> server </span>= socket(<span class="attribute">family</span>=AF_INET,type=SOCK_STREAM)</span><br><span class="line">    # 2.绑定IP地址和端口（端口用于区分不同的服务器）</span><br><span class="line">    # 同一时间在同一个端口上只能绑定一个服务否则报错</span><br><span class="line">    server.bind(<span class="string">'192.168.1.2'</span>,6789)</span><br><span class="line">    # 3.开启监听 - 监听客户端连接到服务器</span><br><span class="line">    # 参数512可以理解为连接队列的大小</span><br><span class="line">    server.listen(512)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        # 4.通过循环接收客户端的连接并作出相应的处理（提供服务）</span><br><span class="line">        # accept方法是一个阻塞方法如果没有客户端连接到服务器代码不会向下执行</span><br><span class="line">        # accept方法返回一个元组其中的第一个元素是客户端对象</span><br><span class="line">        # 第二个元素是连接到服务器的客户端的地址(由IP和端口两部分构成)</span><br><span class="line">        client,addr = server.accept()</span><br><span class="line">        <span class="builtin-name">print</span>(str(addr) + <span class="string">'连接到了服务器.'</span>)</span><br><span class="line">        # 5.发送数据</span><br><span class="line">        client.send(str(datetime.now()).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        # 6.断开连接</span><br><span class="line">        client.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>Python-100days</tag>
      </tags>
  </entry>
  <entry>
    <title>12.字符串和正则表达式</title>
    <url>/2020/02/13/12-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门</a><br><a id="more"></a><br>|符号|解释|事例|说明|<br>|—-|——|—-|——|<br>|.|匹配任意字符|b.t|可以匹配bat/but/b#t/b1t等|<br>|\w|匹配字母/数字/下划线|b\wt|可以匹配bat/b1t/b_t等，但不能匹配b#t|<br>|\s|匹配空白字符（包括\r、\n、\t等）|love\syou|可以匹配love you|<br>|\d|匹配数字|\d\d|可以匹配01/23/99等|<br>|^|匹配字符串的开始|^The|可以匹配The开头的字符串|<br>|$|匹配字符串的结束|.exe$|可以匹配.exe结尾的字符串|<br>|\W|匹配非字母/数字/下划线|b\Wt|可以匹配b#t/b@t等 但不能匹配but/b1t/b_t等|<br>|\S|匹配非空白字符|love\Syou|可以匹配Love#you等 但不能匹配love you等|<br>|\D|匹配非数字|\d\D|可以匹配9a/3#/0Fd等|<br>|\B|匹配非单词边界|\Bio\B||<br>|[]| 匹配来自字符集的任意单一字符 | [aeoou]|可以匹配任一原因字母字符|<br>|<sup><a href="#fn_" id="reffn_"></a></sup>|匹配不在字符集中的任意单一字符|<sup><a href="#fn_aeiou" id="reffn_aeiou">aeiou</a></sup>|可以匹配任一非元音字母字符|<br>|<em> | 匹配0次或多次|\W</em>||<br>|+|匹配1次或多次|\W+||<br>|?|匹配0次或1次|\W?||<br>|{N}|匹配N次|\w{3}|<br>|{M,}|匹配至少M次|\w{3,}||<br>|{M,N}|匹配至少M次至多N次|\w{3,6}||<br>| | |分支|foo | bar|可以匹配foo或者bar|<br>|(?#)|注释|||<br>|(exp)|匹配exp并捕获到自动命名的组中|||<br>|(?\<name \>exp)|匹配exp并捕获到名为name的组中|||<br>|(?:exp)|匹配exp但是不捕获匹配的文本|||<br>|(?=exp)|匹配exp前面的位置|\b\w(?=ing)|可以匹配I’m dancing中的danc|<br>|(?&lt;=exp)|匹配exp后面的位置|(?&lt;=\bdanc)\w+\b|可以匹配I love dancing and reading中的第一个ing|<br>|(?!exp)|匹配后面不是exp的位置|||<br>|(?&lt;!exp)|匹配前面不是exp的位置|||<br>|<em>?|重复任意次，但尽可能少重复|a.</em>b a.*?b|将正则表达式应用与aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串|<br>|+?|重复1次或多次，但尽可能少重复|||<br>|??|重复0次或1次，但尽可能少重复|||<br>|{M,N}?|重复M到N次，但尽可能少重复|||<br>|{M,}?|重复M次以上，但尽可能少重复|||</name></p><blockquote><p>说明：如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成(和)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h2 id="Python对正则表达式的支持"><a href="#Python对正则表达式的支持" class="headerlink" title="Python对正则表达式的支持"></a>Python对正则表达式的支持</h2><p>Python提供了re模块来支持正则表达式相关操作，下面时re模块中的核心函数</p><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>conpile(pattern,flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern,string,flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern,string,flags=0)</td><td>搜索字符串中第一次出现正则表达式的模块 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern,string,maxsplit=0,flags=0)</td><td>用正则表达式指定的模块分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern,repl,string,count=0,flags=0)</td><td>用指定的字符串替换元字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern,string,flags=0)</td><td>match函数的完全匹配（从字符串开始到结尾）版本</td></tr><tr><td>findall(pattern,string,flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern,string,flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.l/re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M/re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table></div><blockquote><p>说明： 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote><h3 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h3><p>验证输入用户名和qq号是否有效并给出对应的提示信息<br>要求：用户名必须由字母、数字或下划线构成且长度在6-20个字符之间，qq号是5-12的数字且首位不能为0<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    username = input(<span class="string">'请输入用户名：'</span>)</span><br><span class="line">    qq = input(<span class="string">'请输入qq号：'</span>)</span><br><span class="line">    <span class="comment"># match函数的第一个参数是正则表达式字符串或正则表达式对象</span></span><br><span class="line">    <span class="comment"># 第二个参数是要跟正则表达式做匹配的字符串对象</span></span><br><span class="line">    m1 = re.match(<span class="string">r'^[0-9a-z-A-Z_]&#123;6,20&#125;$'</span>,username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> m1:</span><br><span class="line">        print(<span class="string">'请输入有效的用户名.'</span>)</span><br><span class="line">    m2 = re.match(<span class="string">r'^[1-9]\d&#123;4,11&#125;$'</span>,qq)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> m2:</span><br><span class="line">        print(<span class="string">'请输入有效的QQ号.'</span>)</span><br><span class="line">    <span class="keyword">if</span> m1 <span class="keyword">and</span> m2:</span><br><span class="line">        print(<span class="string">'你输入的信息是有效的！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><blockquote><p>提示： 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），<br>所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。<br>因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\，<br>例如表示数字的\d得书写成\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h3 id="例2：从一段文字中提取出国内手机号码"><a href="#例2：从一段文字中提取出国内手机号码" class="headerlink" title="例2：从一段文字中提取出国内手机号码"></a>例2：从一段文字中提取出国内手机号码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span></span><br><span class="line">    pattern = re.compile(<span class="string">r'(?&lt;=\D)1[34578]\d&#123;9&#125;(?=\D)'</span>)</span><br><span class="line">    sentence = <span class="string">'重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，不是15600998765，也是110或119，王大锤的手机号才是15600998765。'</span></span><br><span class="line">    <span class="comment"># 查找所有匹配并保存到一个列表中</span></span><br><span class="line">    mylist = re.findall(pattern,sentence)</span><br><span class="line">    print(mylist)</span><br><span class="line">    print(<span class="string">'--------华丽的分割线--------'</span>)</span><br><span class="line">    <span class="comment"># 通过迭代器取出匹配对象并获得匹配的内容</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> pattern.finditer(sentence):</span><br><span class="line">        print(temp.group())</span><br><span class="line">    print(<span class="string">'--------华丽的分割线--------'</span>)</span><br><span class="line">    <span class="comment"># 通过search函数指定搜索位置找出所有的匹配</span></span><br><span class="line">    m = pattern.search(sentence)</span><br><span class="line">    <span class="keyword">while</span> m:</span><br><span class="line">        print(m.group())</span><br><span class="line">        m = pattern.search(sentence,m.end())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="例3-替换字符串中的不良内容"><a href="#例3-替换字符串中的不良内容" class="headerlink" title="例3 替换字符串中的不良内容"></a>例3 替换字符串中的不良内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    sentence = <span class="string">'你丫是傻叉吗？我操你大爷的.Fuck you.'</span></span><br><span class="line">    purified = re.sub(<span class="string">'[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔'</span>,<span class="string">'*'</span>,sentence,flags=re.IGNORECASE)</span><br><span class="line">    print(purified)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="例4：拆分长字符串"><a href="#例4：拆分长字符串" class="headerlink" title="例4：拆分长字符串"></a>例4：拆分长字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    poem = <span class="string">'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'</span></span><br><span class="line">    sentence_list = re.split(<span class="string">r'[,。，.]'</span>,poem)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">''</span> <span class="keyword">in</span> sentence_list:</span><br><span class="line">        sentence_list.remove(<span class="string">''</span>)</span><br><span class="line">    print(sentence_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>Python-100days</tag>
      </tags>
  </entry>
  <entry>
    <title>13.进程和线程</title>
    <url>/2020/02/18/13.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。<br>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此对于进程而言，线程间的信息共享和通信更加容易。当然在单核DDPU系统中，真正的并发是不可能的，因为<strong>在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间</strong>。使用多线程实现并发编程为程序带来的好处是不言而喻的，最主要的体现是提升程序的性能和改善用户体验。<br><a id="more"></a></p><h2 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h2><p>Unix和Linux操作系统上提供了fork()系统调用来创建进程，调用fork()函数的是父进程，创建出的是子进程，子进程是父进程的一个拷贝，但是子进程拥有自己的PID。fork()函数非常特殊，它会返回两次，父进程中可以通过fork()函数的返回值得到子进程的PID，而子进程中的返回值永远都是0.Python的OS模块提供了fork()函数。由于Windows系统没有fork()调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的Process类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（Pool）、用于进程间通信的队列（Queue）和管道（Pipe）等。<br></p><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">from</span> random import randint</span><br><span class="line"><span class="meta">from</span> time import time,sleep</span><br><span class="line"></span><br><span class="line">def download_task(<span class="meta">filename</span>):</span><br><span class="line">    p<span class="meta">rint(</span><span class="string">'开始下载%s...'</span> % <span class="meta">filename</span>)</span><br><span class="line">    time_to_download = ran<span class="meta">dint(</span>5,10)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    p<span class="meta">rint(</span><span class="string">'%s下载完成！耗费了%d秒'</span> % (<span class="meta">filename</span>,time_to_download))</span><br><span class="line"></span><br><span class="line">def ma<span class="meta">in(</span>):</span><br><span class="line">    start =<span class="meta"> time(</span>)</span><br><span class="line">    download_task(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    download_task(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    <span class="meta">end</span> =<span class="meta"> time(</span>)</span><br><span class="line">    p<span class="meta">rint(</span><span class="string">'总共耗费了%.2f秒.'</span> % (<span class="meta">end</span>-start))</span><br><span class="line"></span><br><span class="line"><span class="meta">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ma<span class="meta">in(</span>)</span><br></pre></td></tr></table></figure><br>这个例子可以得出，如果程序中的代码只能按顺序一点点的往下执行，那么即使执行两个互不相关的下载任务，也需要先等待一个文件下载完成后才能开始下一个下载任务。<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getpgid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> <span class="type">time</span> <span class="keyword">import</span> <span class="type">time</span>,sleep</span><br><span class="line"></span><br><span class="line">def download_task(filename):</span><br><span class="line">    print(<span class="string">'启动下载进程，进程号[%d].'</span> % getpid())</span><br><span class="line">    print(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    print(<span class="string">'%s下载完成！耗费了%d秒'</span> % (filename,time_to_download))</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    start = <span class="type">time</span>()</span><br><span class="line">    p1 = Process(target=download_task,args=(<span class="string">'Python从入门到住院.pdf'</span>))</span><br><span class="line">    p1.<span class="keyword">start</span>()</span><br><span class="line">    p2 = Process(target=download_task,args=(<span class="string">'Peking Hot.avi'</span>))</span><br><span class="line">    p2.<span class="keyword">start</span>()</span><br><span class="line">    p1.<span class="keyword">join</span>()</span><br><span class="line">    p2.<span class="keyword">join</span>()</span><br><span class="line">    end = <span class="type">time</span>()</span><br><span class="line">    print(<span class="string">'总共耗费了%.2f秒.'</span> % (<span class="keyword">end</span>-<span class="keyword">start</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><br>上面通过Process类创建了进程对象，通过target参数传入一个函数表示进程启动后要执行的代码，后面args是一个元祖，代表传递给函数的参数。Process和start方法用来启动进程，而join方法表示等待进程执行结束。两个任务同时启动了。<p></p><p>也可以使用subprocess模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通讯</p><h2 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h2><p>Python通过thread模块（现在名为_thread）来实现多线程编程，该模块过于底层，而且很多功能都没有提供，推荐threading模块，该模块对多线程编程提供了更好的面对对象的封装。<br></p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> <span class="type">time</span> <span class="keyword">import</span> <span class="type">time</span>,sleep</span><br><span class="line"></span><br><span class="line">def download(filename):</span><br><span class="line">    print(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    print(<span class="string">'%s下载完成！耗费%d秒'</span> % (filename,time_to_download))</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    start = <span class="type">time</span>()</span><br><span class="line">    t1 = Thread(target=download,args=(<span class="string">'Python从入门到住院.pdf'</span>))</span><br><span class="line">    t1.<span class="keyword">start</span>()</span><br><span class="line">    t2 = Thread(target=download,args=(<span class="string">'Peking Hot.avi'</span>,))</span><br><span class="line">    t2.<span class="keyword">start</span>()</span><br><span class="line">    t1.<span class="keyword">join</span>()</span><br><span class="line">    t2.<span class="keyword">join</span>()</span><br><span class="line">    end = <span class="type">time</span>()</span><br><span class="line">    print(<span class="string">'总共耗费了%.3f秒'</span> % (<span class="keyword">end</span>-<span class="keyword">start</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><br>直接使用threading模块的Thread类来创建进程，但是我们之前讲过一个非常重要的概念叫“继承”，我们可以从已有的类创建类，因此可以通过继承Thread类的方式来创建自定义的线程类，然后再创建线程对象并启动线程。<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="title">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="title">from</span> time <span class="keyword">import</span> time,sleep</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">DownloadTask</span>(<span class="type">Thread</span>):</span></span><br><span class="line"><span class="class">    def __init__(<span class="title">self</span>, <span class="title">filename</span>):</span></span><br><span class="line"><span class="class">        super().__init__()</span></span><br><span class="line"><span class="class">        self._filename = filename</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">    def run(<span class="title">self</span>):</span></span><br><span class="line"><span class="class">        print('开始下载%<span class="title">s</span>...' % <span class="title">self</span>.<span class="title">_filename</span>)</span></span><br><span class="line"><span class="class">        time_to_download = randint(5,10)</span></span><br><span class="line"><span class="class">        sleep(<span class="title">time_to_download</span>)</span></span><br><span class="line"><span class="class">        print('%<span class="title">s</span>下载完成！耗费%<span class="title">d</span>秒' % (<span class="title">self</span>.<span class="title">_filename</span>,<span class="title">time_to_download</span>))</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">def main():</span></span><br><span class="line"><span class="class">    start = time()</span></span><br><span class="line"><span class="class">    t1 = <span class="type">DownloadTask</span>('<span class="type">Python</span>从入门到住院.<span class="title">pdf'</span>)</span></span><br><span class="line"><span class="class">    t1.start()</span></span><br><span class="line"><span class="class">    t2 = <span class="type">DownloadTask</span>('<span class="type">Peking</span> <span class="type">Hot</span>.<span class="title">avi'</span>)</span></span><br><span class="line"><span class="class">    t2.start()</span></span><br><span class="line"><span class="class">    t1.join()</span></span><br><span class="line"><span class="class">    t2.join()</span></span><br><span class="line"><span class="class">    end = time()</span></span><br><span class="line"><span class="class">    print('总共耗费了%.2<span class="title">f</span>秒' % (<span class="title">end</span>-<span class="title">start</span>))</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">if __name__ == '__main__':</span></span><br><span class="line"><span class="class">    main()</span></span><br></pre></td></tr></table></figure><br>多个线程可以共享进程的内存空间，要实现多个线程间的通信相对简单，设置一个全局变量，多个线程共享这个全局变量即可。但是当多个线程共享同一个变量（称之为资源）的时候，很有可能产生不可控的结果导致程序失效甚至崩溃。如果一个资源被多个线程竞争使用，通常称之为“临界资源”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”状态。<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">from time import sleep</span><br><span class="line">from threading import Thread,Lock</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._balance = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>._lock = Lock() <span class="comment">#加锁保护对银行账户的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span><span class="params">(<span class="keyword">self</span>,money)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._lock.acquire()</span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            <span class="comment"># 计算存款后的余额</span></span><br><span class="line">            new_balance = <span class="keyword">self</span>._balance + money</span><br><span class="line">            <span class="comment"># 模拟受理存款业务需要0.01秒的时间</span></span><br><span class="line">            sleep(<span class="number">0</span>.<span class="number">01</span>)</span><br><span class="line">            <span class="comment"># 修改账户余额</span></span><br><span class="line">            <span class="keyword">self</span>._balance = new_balance</span><br><span class="line">        <span class="symbol">finally:</span></span><br><span class="line">            <span class="comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span></span><br><span class="line">            <span class="keyword">self</span>._lock.release()</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._balance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span>(<span class="title">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,account,money)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">super</span>().__init_<span class="number">_</span>()</span><br><span class="line">        <span class="keyword">self</span>._account = account</span><br><span class="line">        <span class="keyword">self</span>._money = money</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>._account.deposit(<span class="keyword">self</span>._money)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建100个存款的线程向同一个账户存钱</span></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> range(<span class="number">100</span>)<span class="symbol">:</span></span><br><span class="line">        t = AddMoneyThread(account,<span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="comment"># 等所有存款的线程都执行完毕</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="symbol">threads:</span></span><br><span class="line">        t.join()</span><br><span class="line">    print(<span class="string">'账户余额为：￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><h2 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h2><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，最终导致所有任务都做不好。</p><p>是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I/O密集型。计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到了Python中有嵌入C/C++代码的机制。</p><p>除了计算密集型任务，其他的涉及到网络、存储介质I/O的任务都可以视为I/O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I/O操作完成（因为I/O的速度远远低于CPU和内存的速度）。对于I/O密集型任务，如果启动多任务，就可以减少I/O等待时间从而让CPU高效率的运转。</p><h2 id="单线程-异步I-O"><a href="#单线程-异步I-O" class="headerlink" title="单线程+异步I/O"></a>单线程+异步I/O</h2><p>现代操作系统对I/O操作的改进中最为重要的就是支持异步I/O。如果充分利用操作系统提供的异步I/O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I/O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。</p><p>在Python语言中，单线程+异步I/O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p><h3 id="例1：将耗时间的任务放到线程中以获得更好的用户体验"><a href="#例1：将耗时间的任务放到线程中以获得更好的用户体验" class="headerlink" title="例1：将耗时间的任务放到线程中以获得更好的用户体验"></a>例1：将耗时间的任务放到线程中以获得更好的用户体验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadTaskHandler</span><span class="params">(Thread)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            tkinter.messagebox.showinfo(<span class="string">'提示'</span>,<span class="string">'下载完成！'</span>)</span><br><span class="line">            <span class="comment"># 启用下载按钮</span></span><br><span class="line">            button1.config(state = tkinter.NORMAL)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 禁用下载按钮</span></span><br><span class="line">        button1.config(state = tkinter.DISABLED)</span><br><span class="line">        <span class="comment"># 通过daemon参数将参数设置为守护线程（主程序退出就不再保留执行）</span></span><br><span class="line">        <span class="comment"># 在线程中处理耗时间的下载任务</span></span><br><span class="line">        DownLoadTaskHandler(daemon=<span class="literal">True</span>.start())</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_about</span><span class="params">()</span>:</span></span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">'关于'</span>,<span class="string">'作者：张三'</span>)</span><br><span class="line">    top = tkinter.TK()</span><br><span class="line">    top.title(<span class="string">'单线程'</span>)</span><br><span class="line">    top.geometry(<span class="string">'200×150'</span>)</span><br><span class="line">    top.wm_attributes(<span class="string">'-topmost'</span>,<span class="literal">True</span>)</span><br><span class="line">    panel = tkinter.Frame(top)</span><br><span class="line">    button1 = tkinter.Button(panel,text=<span class="string">'下载'</span>,command=download)</span><br><span class="line">    button1.pack(side=<span class="string">'left'</span>)</span><br><span class="line">    button2 = tkinter.Button(panel,text=<span class="string">'关于'</span>,command=show_about)</span><br><span class="line">    button2.pack(side=<span class="string">'right'</span>)</span><br><span class="line">    panel.pack(side=<span class="string">'bottom'</span>)</span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="例2：使用多进程对复杂任务进行“分而治之”"><a href="#例2：使用多进程对复杂任务进行“分而治之”" class="headerlink" title="例2：使用多进程对复杂任务进行“分而治之”"></a>例2：使用多进程对复杂任务进行“分而治之”</h3><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">from</span> multiprocessing import Process,Queue</span><br><span class="line"><span class="meta">from</span> random import randint</span><br><span class="line"><span class="meta">from</span> time import time</span><br><span class="line"></span><br><span class="line">def task_handler(curr_list,result_queue):</span><br><span class="line">    total = 0</span><br><span class="line">    for number <span class="meta">in</span> curr_list:</span><br><span class="line">        total += number</span><br><span class="line">    result_queue<span class="meta">.put(</span>total)</span><br><span class="line">def ma<span class="meta">in(</span>):</span><br><span class="line">    processes = []</span><br><span class="line">    number_lisst = [<span class="meta">x</span> for <span class="meta">x</span> <span class="meta">in</span><span class="meta"> range(</span>1,100000001)]</span><br><span class="line">    result_queue = Queue()</span><br><span class="line">    <span class="meta">index</span> = 0</span><br><span class="line">    # 启动8个进程将数据切片后进行运算</span><br><span class="line">    for _ <span class="meta">in</span><span class="meta"> range(</span>8):</span><br><span class="line">        p = Process(target=task_handler,args=(number_lisst[<span class="meta">index</span>:<span class="meta">index</span>+122500000],result_queue))</span><br><span class="line">        <span class="meta">index</span> += 12500000</span><br><span class="line">        processes.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    # 开始记录所有进程执行完成花费的时间</span><br><span class="line">    start =<span class="meta"> time(</span>)</span><br><span class="line">    for p <span class="meta">in</span> processes:</span><br><span class="line">        p.jo<span class="meta">in(</span>)</span><br><span class="line">    # 合并执行结果</span><br><span class="line">    total = 0</span><br><span class="line">    <span class="meta">while</span> <span class="meta">not</span> result_queue.empty():</span><br><span class="line">        total += result_queue.get()</span><br><span class="line">    p<span class="meta">rint(</span>total)</span><br><span class="line">    <span class="meta">end</span> =<span class="meta"> time(</span>)</span><br><span class="line">    p<span class="meta">rint(</span><span class="string">'Execution time:'</span>,(<span class="meta">end</span>-start),<span class="string">'s'</span>,sep=<span class="string">''</span>)</span><br><span class="line"><span class="meta">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ma<span class="meta">in(</span>)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>Python-100days</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache PHP MySQL安装配置</title>
    <url>/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="本文为Apache-PHP-MySQL的安装配置总结。"><a href="#本文为Apache-PHP-MySQL的安装配置总结。" class="headerlink" title="本文为Apache PHP MySQL的安装配置总结。"></a>本文为Apache PHP MySQL的安装配置总结。</h3><a id="more"></a><h4 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>从Apache官网下载安装包<br>地址：<a href="https://httpd.apache.org/docs/current/platform/windows.html" target="_blank" rel="noopener">https://httpd.apache.org/docs/current/platform/windows.html</a></p><p><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/01.png" alt="fae813d878164ac1c2cb18ee88b34665.png"></p><h5 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h5><p>记住解压路径<br>用管理员身份运行cmd<br>进入安装目录bin文件夹下，执行一下代码<br>安装：</p><blockquote><p>httpd.exe -k install -n “Apache”</p></blockquote><p>然后输入</p><blockquote><p>httpd.exe -t</p></blockquote><p>查看配置文件<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/02.png" alt="4ce21506a0aefc3decf97453f63ba335.png"><br>如果是这样的则成功<br>不是的话，需要配置conf/httpd.conf<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/03.png" alt="a473f2e9d9688c8802cf0622d49e1a4f.png"><br>配置完再输入httpd.exe -t 查看配置是否好</p><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><p>这里改一下监听端口号<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/04.png" alt="de1179b9c7922ea0a830923cd359b0e8.png"><br>如果apache不能启动，<br>443端口占用，则改一下文件。conf/extra/httpd-ahssl.conf<br>改为442端口<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/05.png" alt="81b7191c9ae08537971f68dd50b9ba1d.png"><br>启动服务：</p><blockquote><p>net start Apache<br>重新启动：<br>net restart Apache<br>停止服务<br>net stop Apache</p></blockquote><p>由于改成了81端口，所以浏览器输入localhost:81，即可看见运行结果。</p><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><blockquote><p>httpd.exe -k uninstall -n “Apache”</p></blockquote><h4 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h4><h5 id="下载PHP压缩包"><a href="#下载PHP压缩包" class="headerlink" title="下载PHP压缩包"></a>下载PHP压缩包</h5><p>下载地址：<br><a href="https://windows.php.net/download/" target="_blank" rel="noopener">https://windows.php.net/download/</a></p><p>下载VC15 x64 Thread Safe下的zip压缩包，并且解压到想要安装的目录下。</p><h5 id="配置Apache支持PHP解析"><a href="#配置Apache支持PHP解析" class="headerlink" title="配置Apache支持PHP解析"></a>配置Apache支持PHP解析</h5><p>打开Apache配置文件，Apache24/conf/httpd.conf<br>在一堆#LoadModule最下方加上</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加载PHP</span></span><br><span class="line">LoadModule php7_module 'D:<span class="string">/server/php7/php7apache2_4.dll</span>'</span><br><span class="line"><span class="comment">#加载PHP配置</span></span><br><span class="line">PHPIniDir 'D:<span class="string">/server/php7</span>'</span><br><span class="line"><span class="comment">#分配给PHP</span></span><br><span class="line">AddType application/x-httpd-php <span class="string">.php</span> <span class="string">.html</span> <span class="string">.htm</span></span><br></pre></td></tr></table></figure><p>说明：LoadModule是加载模块关键字，php7_module是模块名，C:/PHP7/php7apache2_4.dll是Apache支持PHP解析的dll库文件</p><p>PHPIniDir是配置文件目录关键字，’C:/PHP7’是php.ini文件所在目录，此配置实现重启Apache，php的配置同时生效。</p><p>AddType关键字添加解析类型，application/x-httpd-php .php表示所有以.php结尾的文件都会使用php解析。</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>先写一个index.php</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"hello world"</span>;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>保存到Aapche24的htdocs目录下<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/06.png" alt="fac7d760c2cde8a4fc8383d1584dd631.png"><br>运行Apche服务，输入localhost:81/index.php</p><p><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/07.png" alt="08c99e9c03dcf20656e1fbb7a4d29b9b.png"><br>可以看到配置成功</p><h4 id="安装MySql"><a href="#安装MySql" class="headerlink" title="安装MySql"></a>安装MySql</h4><p>B站视频<br><a href="https://www.bilibili.com/video/av90016352/?spm_id_from=333.788.b_636f6d6d656e74.9" target="_blank" rel="noopener">https://www.bilibili.com/video/av90016352/?spm_id_from=333.788.b_636f6d6d656e74.9</a><br>视频讲的非常细。<br>本文链接<a href="https://www.cnblogs.com/honeynan/p/12408119.html" target="_blank" rel="noopener">https://www.cnblogs.com/honeynan/p/12408119.html</a><br><a href="https://www.jb51.net/article/179326.htm" target="_blank" rel="noopener">https://www.jb51.net/article/179326.htm</a></p><h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><p>下载地址：</p><p><a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/installer/</a></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>双击安装包，进行安装<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/08.png" alt="9bbdd5fa383a0c6e5aaa42d7ee8173cb.png"><br>之后一直next，或者execute、finish就行<br>下面到了最为关键的步骤 ，现在、马上、立刻，拿一支笔、拿一个笔记本（不是随便一张纸）！！！下面的东西需要记。<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/09.png" alt="7f2181ee01ebdef60377c3a06dd68aa6.png"></p><p>如图所示Port（端口号）后边有黄色惊叹号，说明当前默认的端口号被占用，需要更换端口号。</p><p><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/10.png" alt="93413f99729f79bb3b2f5a5e0678dac1.png"></p><p>如图所示，可更换为3303，切记！更换后的端口号一定要牢记，最好整理到常用的笔记本上。记录好之后，单机NEXT，NEXT。<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/11.png" alt="915c0c94e183826e7beab433e04bc933.png"></p><p>接下来同样相当重要，为你的root用户设置密码，设置密码时一定要先把要设置的密码记录下来，再输入。<br>密码设置成功后，可以选择添加用户，也可以等待安装成功后再添加。<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/12.png" alt="815996a5c3e320c20e9ca1f717a2659e.png"><br>可以修改服务名，一般默认，点Next<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/13.png" alt="0dce8c164a04bd3bd6a6c933d740c99c.png"></p><p>Excute-&gt;NEXT-&gt;Finish-&gt;NEXT-&gt;Finish。<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/14.png" alt="30759c576eab18e76d205d76150a681b.png"></p><h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><p>一般在c盘programfile里边mysql，mysql server 8.0的bin文件夹，把这个文件夹加到path路径<br>最后添加配置文件<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/15.png" alt="dd021ce3e54c94b050fd9f42fcdce233.png"><br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/16.png" alt="24a9bee4141fc6c8dc1a9a029856c270.png"><br>如果没有那个my.ini文件，得新建配置</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=C:\Program Files\MySQL</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=C:\Program Files\MySQL\Data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="comment">#mysql_native_password</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure><p>保存文件为my.ini</p><p>以管理员身份运行命令提示符（即：cmd）,进入mysql安装目录，输入mysqld —initialize —console，9P0gYk-?0,kT就是初始密码，一定要记录。<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/17.png" alt="32c9b7579832abece521cd30dd7704ad.png"></p><p>继续在命令行中输入mysqld —install，如果出现 Service successfully installed.即为成功！<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/18.png" alt="713357933579e641187568091bb23b96.png"></p><p>如果出现以下内容，需要删除原有服务。<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/19.png" alt="f2da3a64d75ac392e2a3b29d639939d6.png"></p><p>删除原有服务需要在命令行中输入：sc delete mysql。<br>之后再次输入：mysqld —install。</p><p>mysql服务安装成功后，需要启动服务。在命令行中输入：net start mysql 。<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/20.png" alt="e5ad7930e0283529225d166988df2559.png"><br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/21.png" alt="e5ad7930e0283529225d166988df2559.png"></p><p>到此，mysql数据库全部安装、配置完毕，可以正常使用了！<br>登录mysql，在命令行中输入：mysql -uroot -p 回车，输入root密码。也可以使用用户登录，将root改为你自己的用户名即可。</p><p>注！ -p后边可以直接跟密码吗？可以！但是这样会让你的数据库密码暴露出来，所以建议大家以后先回车，再输入密码，mysql会为你隐藏密码。</p><p><strong>登录时如果出现如图所示的情况：</strong><br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/22.png" alt="c9b6176840d71c0bd896242bd2bd5039.png"></p><p>在输入密码的时候输入初始密码：<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/23.png" alt="a7a55fca2f1f377dce8c3cea67ba8161.png"></p><p>登录成功后，在操作数据库的时候会报以下错误：</p><blockquote><p>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</p></blockquote><p>这是因为此时你的密码时初始密码，你需要先修改密码才可以继续操作。　　修改密码如下：</p><blockquote><p>alter user ‘root’@’localhost’ identified by ‘123456’;</p></blockquote><p>最后的“123456”替换为你想要设置的密码，切记不要设置为纯数字或者纯密码，密码太简单也会报错。　　修改完之后，提示OK，说明修改成功！<br><img src="/2020/03/17/Apache-PHP-MySQL%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/24.png" alt="e36d06b8932c0f8573e39dbdd3ccd955.png"></p><p>PS：如果当登录时出现无法登录的情况或者忘记root密码（请先检查mysql服务是否已开启），请看一下文章</p><p><a href="https://www.cnblogs.com/honeynan/p/12408144.html" target="_blank" rel="noopener">https://www.cnblogs.com/honeynan/p/12408144.html</a></p><p>root密码 root</p><p>root@localhost密码PXz8s+quq8&gt;k</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF 2nd</title>
    <url>/2020/03/25/BJDCTF-2nd/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><p>这次跟着去水了一把。平常也练了一些，但见到这些题，也只能说是见识面太窄，还是慢慢积累吧。以下是部分wp，慢慢学慢慢更。</p><a id="more"></a><p><a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">题目地址</a></p><h3 id="签到-y1ng"><a href="#签到-y1ng" class="headerlink" title="签到-y1ng"></a>签到-y1ng</h3><p>QkpEe1czbGMwbWVfVDBfQkpEQ1RGfQ==<br>直接base64解码得到falg</p><h3 id="老文盲了1"><a href="#老文盲了1" class="headerlink" title="老文盲了1"></a>老文盲了1</h3><p>附件下载完打开是一行生僻字，</p><blockquote><p>罼雧締眔擴灝淛匶襫黼瀬鎶軄鶛驕鳓哵眔鞹鰝</p></blockquote><p>着实是无头绪，在后来hint的提示下，知道是读音。然后一个一个百度，连起来读一下知道flag。</p><blockquote><p>bi ji di da kuo hao zhe jiu shi fu lai ge zhi jie jiao le ba da guo hao</p></blockquote><h3 id="A-beautiful-picture"><a href="#A-beautiful-picture" class="headerlink" title="A beautiful picture"></a>A beautiful picture</h3><p><img src="/2020/03/25/BJDCTF-2nd/01.png" alt="picture"></p><p>这个就是标准隐写了，打开WinHex，改一下图片的高度，改到最大。<br><img src="/2020/03/25/BJDCTF-2nd/02.png" alt="picture"></p><p>然后得到flag。<br><img src="/2020/03/25/BJDCTF-2nd/03.png" alt="picture"></p><h3 id="灵能精通"><a href="#灵能精通" class="headerlink" title="灵能精通"></a>灵能精通</h3><p>这个题是猪圈密码的变形，可以根据提米描述，然后查一下这段话可以知道是圣堂武士密码。</p><p><img src="/2020/03/25/BJDCTF-2nd/04.png" alt="picture"></p><p><img src="/2020/03/25/BJDCTF-2nd/05.png" alt="picture"><br><img src="/2020/03/25/BJDCTF-2nd/06.png" alt="picture"></p><h3 id="燕言燕语"><a href="#燕言燕语" class="headerlink" title="燕言燕语"></a>燕言燕语</h3><p>给的是一串字符串，直接hex转string：得到yanzi ZJQ{xilzv_iqssuhoc_suzjg}<br><img src="/2020/03/25/BJDCTF-2nd/07.png" alt="picture"><br>然后就是换位密码，试过不是栅栏，从网上得知是维吉尼亚密码。yanzi是key。接下来就是解密了。</p><p><img src="/2020/03/25/BJDCTF-2nd/08.png" alt="picture"></p><h3 id="cat-flag"><a href="#cat-flag" class="headerlink" title="cat flag"></a>cat flag</h3><p>这个是根据图中只有两种形态，想到二进制，鸡腿为1，然后二进制转字符串。<br><img src="/2020/03/25/BJDCTF-2nd/09.png" alt="picture"></p><h3 id="小姐姐"><a href="#小姐姐" class="headerlink" title="小姐姐"></a>小姐姐</h3><p>压缩包直接解压缩得到图片，然后用winhex打开，搜BJD得到flag。<br><img src="/2020/03/25/BJDCTF-2nd/10.png" alt="picture"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>/2020/02/12/HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="简单介绍了HTTP协议"><a href="#简单介绍了HTTP协议" class="headerlink" title="简单介绍了HTTP协议"></a>简单介绍了HTTP协议</h3><a id="more"></a><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><h2 id="2-了解WEB"><a href="#2-了解WEB" class="headerlink" title="2.了解WEB"></a>2.了解WEB</h2><p>Web使用一种名为HTTP（HyperText Transfer Protocol，超文本运输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。Web是建立在HTTP（TCP/80)协议上通信的。<br>WWW（万维网）这一名称，是Web浏览器当年用来浏览超文本的客户端应用程序时的名称。现在表示这一系列的集合，简称Web</p><ul><li>页面的文本标记语言<strong>HTML</strong>（HyperText Markup Language,超文本标记语言）</li><li>作为文档传递协议的<strong>HTTP</strong></li><li>指定文档所在地址的<strong>URL</strong>（Uniform Resource Locator,统一资源定位符）</li><li><strong>URI</strong>（Uniform Resource Identifier,统一资源标识符）<br>URI用字符标识某一互联网资源，URL表示资源的地点（互联网上所处的位置）<br><strong>URL是一种具体的URI</strong><br>HTTP/1.1是目前主流的HTTP协议版本</li></ul><h2 id="3-HTTP协议简介"><a href="#3-HTTP协议简介" class="headerlink" title="3.HTTP协议简介"></a>3.HTTP协议简介</h2><p>客户端和服务器<br><img src="/2020/02/12/HTTP%E5%8D%8F%E8%AE%AE/客户端-服务器.png" alt="图片"><br>HTTP是不保存状态的协议，目的是为了更快的处理大量事务。不能进行事务的关联。<br>隐含参数和Cookie技术，能协助HTTP解决无状态问题</p><h3 id="HTTP-Method-GET"><a href="#HTTP-Method-GET" class="headerlink" title="HTTP Method GET"></a>HTTP Method GET</h3><p>GET：获取资源</p><p>通过URL传<br>请求访问已被URI识别的资源。指定的资源经服务器端解析后返回相应内容。</p><p>如果请求的资源是文本，保持原样返回；如果是像CGI（Common Gateway Interface,通用网关借口)那样的程序，返回经过执行后的输出结果。</p><h3 id="HTTP-Method-POST"><a href="#HTTP-Method-POST" class="headerlink" title="HTTP Method POST"></a>HTTP Method POST</h3><p>POST：传输实体主体</p><p>以下用POST</p><ul><li>请求中包含数据更新等副作用时</li><li>发送敏感信息时（防止Referer安全隐患）</li><li>发送的信息量很多时（URL长度有限）</li></ul><p>副作用：指除了获取资源（内容）以外的其他操作。比如，追加/更新/删除服务器端的数据、购买商品、注册/删除用户等操作。</p><h3 id="HTTP-Method-PUT"><a href="#HTTP-Method-PUT" class="headerlink" title="HTTP Method PUT"></a>HTTP Method PUT</h3><p>PUT：传输文件</p><p>存在安全隐患一般文件上传采用POST</p><h3 id="HTTP-Method-HEAD"><a href="#HTTP-Method-HEAD" class="headerlink" title="HTTP Method HEAD"></a>HTTP Method HEAD</h3><p>HEAD：获得报文首部</p><p>与GET方法一样，只是不返回报文主体部分，用于确认URI的有效性及资源更新的日期时间等。</p><h3 id="HTTP-Method-DELETE"><a href="#HTTP-Method-DELETE" class="headerlink" title="HTTP Method DELETE"></a>HTTP Method DELETE</h3><p>用来删除文件，是与PUT相反的的方法。DELETE方法按请求URI删除指定的资源<br><img src="/2020/02/12/HTTP%E5%8D%8F%E8%AE%AE/HTTP支持的方法.png" alt="图片"></p><h3 id="Cookie的工作原理"><a href="#Cookie的工作原理" class="headerlink" title="Cookie的工作原理"></a>Cookie的工作原理</h3><p><img src="/2020/02/12/HTTP%E5%8D%8F%E8%AE%AE/没有Cookie信息下请求.png" alt><br><img src="/2020/02/12/HTTP%E5%8D%8F%E8%AE%AE/存有Cookie信息下请求.png" alt></p><h2 id="4-HTTP报文"><a href="#4-HTTP报文" class="headerlink" title="4.HTTP报文"></a>4.HTTP报文</h2><p>请求端的HTTP报文叫请求报文，响应端的HTTP报文叫响应报文。</p><h4 id="请求报文："><a href="#请求报文：" class="headerlink" title="请求报文："></a>请求报文：</h4><ul><li>报文首部：<ul><li>请求行</li><li>请求首部字段</li><li>通用首部字段</li><li>实体首部字段</li><li>其他</li></ul></li><li>空行：</li><li>报文主体<br><img src="/2020/02/12/HTTP%E5%8D%8F%E8%AE%AE/请求报文格式.png" alt="图片"></li></ul><h4 id="响应报文："><a href="#响应报文：" class="headerlink" title="响应报文："></a>响应报文：</h4><ul><li>报文首部：<ul><li>状态行</li><li>响应首部字段</li><li>通用首部字段</li><li>实体首部字段</li><li>其他</li></ul></li><li>空行</li><li>报文主体<br><img src="/2020/02/12/HTTP%E5%8D%8F%E8%AE%AE/响应报文格式.png" alt="图片"></li></ul><h2 id="5-HTTP状态码"><a href="#5-HTTP状态码" class="headerlink" title="5.HTTP状态码"></a>5.HTTP状态码</h2><p>【功能】：当客户端向服务器发送请求时，描述返回的请求结果。</p><div class="table-container"><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Informational(信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table></div><h4 id="3XX："><a href="#3XX：" class="headerlink" title="3XX："></a>3XX：</h4><ul><li>301 Moved Permanently：永久重定向</li><li>302 Moved Temporarily：临时重定向 希望用户（本次）能使用新的URI访问</li><li>303 See Other：要求用户（用GET定向获取请求的资源）</li><li>304 Not Modified：访问页面没有修改</li><li>307 Temporary Redirect：希望把POST改为GET</li></ul><h4 id="4XX："><a href="#4XX：" class="headerlink" title="4XX："></a>4XX：</h4><ul><li>400 Bad Request:语法错误等造成错误请求</li><li>401 Unauthorized：需要授权认证</li><li>403 Forbidden：访问权限不够</li><li>404 Not Found：没有找到</li></ul><h4 id="5XX："><a href="#5XX：" class="headerlink" title="5XX："></a>5XX：</h4><ul><li>500 Internal Server Error：服务器端执行请求发生错误</li><li>503 Service Unavailable：服务器暂时处于超负载或正在进行停机维护，无法处理请求</li></ul><h2 id="6-HTTP首部"><a href="#6-HTTP首部" class="headerlink" title="6.HTTP首部"></a>6.HTTP首部</h2><h4 id="HTTP报文首部："><a href="#HTTP报文首部：" class="headerlink" title="HTTP报文首部："></a>HTTP报文首部：</h4><p>通用首部字段：</p><div class="table-container"><table><thead><tr><th>首部字段名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>Cache-Control</td><td>控制缓存的行为</td><td>private,max-age=0,no-cache等</td></tr><tr><td>Connection</td><td>逐跳首部、持久连接的管理</td><td>Keep-Alive/close</td></tr><tr><td>Date</td><td>创建报文的日期时间</td><td>Tue,03 Jul 2012 04:40:59 GMT</td></tr><tr><td>Pragma</td><td>报文指令</td><td></td></tr><tr><td>Trailer</td><td>说明报文主体后记录了哪些字段</td><td></td></tr><tr><td>Transfer-Encoding</td><td>指定报文主体的传输编码方式</td><td>chunked等</td></tr><tr><td>Upgrade</td><td>升级为其他协议</td><td>是否可使用更高的版本进行通讯</td></tr><tr><td>Via</td><td>追踪客户端与服务器之间的请求和响应报文的传输路径</td><td></td></tr><tr><td>Warning</td><td>告知用户一些与缓存有关的警告</td><td>[警告码][警告的主机：端口号]“[警告内容]”([日期时间])</td></tr></tbody></table></div><p>请求首部字段：</p><div class="table-container"><table><thead><tr><th>首部字段名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>Accept</td><td>用户代理可处理的<strong>媒体类型</strong></td><td>type/subtype形式；text/html,text/plain等</td></tr><tr><td>Accept-Charset</td><td>优先的<strong>字符集</strong></td><td>utf-8等</td></tr><tr><td>Accept-Language</td><td>优先的语言</td><td>zh-cn等</td></tr><tr><td>Accept-Encoding</td><td>优先编码内容</td><td>gzip等</td></tr><tr><td>Authorization</td><td>通知服务器，用户代理的认证信息</td><td>转码认证</td></tr><tr><td>Expect</td><td>期待服务器的特定行为</td><td>例：100-continue</td></tr><tr><td>From</td><td>用户的电子邮箱地址</td><td>例：info@hacker.jp</td></tr><tr><td>Host</td><td>请求资源所在服务器</td><td>必须包含；例：www.baidu.com</td></tr><tr><td>If-Match</td><td>条件请求</td><td>例：”123456</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td><td></td></tr><tr><td>If—None-Match</td><td>比较实体标记（与If-Match相反）</td><td></td></tr><tr><td>If-Range</td><td>资源未更新时发送实体Byte的范围请求</td><td></td></tr><tr><td>If-Unmodified-Since</td><td>比较资源的更新时间（与If-Modified-Since相反）</td><td></td></tr><tr><td>Max-Forwards</td><td>最大传输逐跳数</td><td></td></tr><tr><td>Proxy-Authorization</td><td>代理服务器要求客户端的认证信息</td><td></td></tr><tr><td>Range</td><td>实体的字节范围要求</td><td></td></tr><tr><td>Referer</td><td>对请求URI的原始获取方</td><td></td></tr><tr><td>TE</td><td>传输编码的优先级</td><td></td></tr><tr><td>User-Agent</td><td>HTTP客户端程序的信息</td><td>系统，浏览器，ip地址</td></tr><tr><td>Cookie</td><td>服务器接收到的Cookeie信息</td></tr></tbody></table></div><p>响应首部字段：</p><div class="table-container"><table><thead><tr><th>首部字段名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>是否接受字节范围请求</td><td></td></tr><tr><td>Age</td><td>推算资源创建经过时间</td><td>例：600</td></tr><tr><td>ETag</td><td>客户端实体标示</td><td></td></tr><tr><td>Location</td><td>令客户端重定向至URI</td><td>重定向目的地</td></tr><tr><td>Prox-Authenticate</td><td>代理服务器对客户端的认证信息</td><td></td></tr><tr><td>Retry-After</td><td>对再次发起请求的时机要求</td><td></td></tr><tr><td>Server</td><td>HTTP服务器的安装信息</td><td>具有安全隐患</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td><td></td></tr><tr><td>WWW-Authenticate</td><td>服务器对客户端的认证信息</td><td>访问认证</td></tr><tr><td>Set-Cookie</td><td>开始状态管理所使用的Cookie信息</td><td>NAME=VALUE；expires=DATE；path=PATH；domain=域名；Secure；HttpOnly</td></tr></tbody></table></div><p>实体首部字段：</p><div class="table-container"><table><thead><tr><th>首部字段名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的HTTP方法</td><td>GET等</td></tr><tr><td>Content-Encoding</td><td>实体主体适用的编码方式</td><td>gzip等</td></tr><tr><td>Content-Language</td><td>实体主体的自然语言</td><td>zh-cn等</td></tr><tr><td>Content-Length</td><td>实体主体的大小（单位：字节）</td><td>15000等</td></tr><tr><td>Content-Location</td><td>替代对应资源的URI</td><td></td></tr><tr><td>Content-MD5</td><td>实体主体的报文摘要</td><td></td></tr><tr><td>Content-Range</td><td>实体主体的位置范围</td><td></td></tr><tr><td>Content-Type</td><td>实体主体的媒体类型</td><td></td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td><td></td></tr><tr><td>Last-Modified</td><td>资源的最后修改日期时间</td></tr></tbody></table></div><p>HTTP首部字段是由首部字段名和字段值构成的</p><ul><li>Content-Type: 报文主体对象的类型</li><li>Keep-Alive：</li></ul><h2 id="7-HTTPS协议简介"><a href="#7-HTTPS协议简介" class="headerlink" title="7.HTTPS协议简介"></a>7.HTTPS协议简介</h2><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>通讯使用明文（不加密），内容可能会被窃听</li><li>不验证通信方的身份，因此有可能遭遇伪装</li><li>无法证明报文的完整性，所以有可能已遭篡改</li></ul><p>HTTP+加密+认证+完整性保护=HTTPS<br><img src="/2020/02/12/HTTP%E5%8D%8F%E8%AE%AE/HTTPS通讯过程.jpg" alt="图片"></p><h2 id="8-HTTP的认证"><a href="#8-HTTP的认证" class="headerlink" title="8.HTTP的认证"></a>8.HTTP的认证</h2><ul><li>BASIC认证（基本认证）</li><li>DIGEST认证（摘要认证）</li><li>SSL客户端认证</li><li>FormBase认证（基于表单认证）</li><li>Windows统一认证（Keberos认证，NTLM认证）</li></ul><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>HTTP协议</tag>
      </tags>
  </entry>
  <entry>
    <title>DES算法</title>
    <url>/2020/03/13/DES%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h2 id="本文为DES算法的原理详解"><a href="#本文为DES算法的原理详解" class="headerlink" title="本文为DES算法的原理详解"></a>本文为DES算法的原理详解</h2><a id="more"></a><h2 id="DES算法详解"><a href="#DES算法详解" class="headerlink" title="DES算法详解"></a>DES算法详解</h2><h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><p>DES是一个分组加密算法，典型的DES以64位为分组数据加密，加密和解密用的是同一算法。<br>它的密钥长度是56比特。尽管从规格上来说，DES的密钥长度是64比特，但由于每个7比特会设置一个用于错误检验的比特，因此实质上其密钥长度是56比特。<br>加密算法流程：<br><img src="/2020/03/13/DES%E7%AE%97%E6%B3%95/01.png" alt="9090bbfe6a422c74e42749050102f862.png"></p><h3 id="明文初始置换（IP初始置换）"><a href="#明文初始置换（IP初始置换）" class="headerlink" title="明文初始置换（IP初始置换）"></a>明文初始置换（IP初始置换）</h3><p>IP置换目的是将输入的64位明文数据块按位重新组合，并把输出分为L0，R0两部分，每部分各长32位。<br><strong>注意：这里的数字表示的是原数据的位置，不是数据</strong></p><p>置换规则如下表：</p><blockquote><p>58,50,42,34,26,18,10,2,<br>60,52,44,36,28,20,12,4,<br>62,54,46,38,30,22,14,6,<br>64,56,48,40,32,24,16,8,<br>57,49,41,33,25,17, 9,1,<br>59,51,43,35,27,19,11,3,<br>61,53,45,37,29,21,13,5,<br>63,55,47,39,31,23,15,7,</p></blockquote><p>即将第58位明文换到第一个位置，第50位明文换到第2位。以此类推。<br>L0:</p><blockquote><p>58,50,42,34,26,18,10,2,<br>60,52,44,36,28,20,12,4,<br>62,54,46,38,30,22,14,6,<br>64,56,48,40,32,24,16,8,</p></blockquote><p>R0:</p><blockquote><p>57,49,41,33,25,17, 9,1,<br>59,51,43,35,27,19,11,3,<br>61,53,45,37,29,21,13,5,<br>63,55,47,39,31,23,15,7,</p></blockquote><p>然后分为左右两部分</p><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><h4 id="密钥初始置换（密钥由64位转为56位）"><a href="#密钥初始置换（密钥由64位转为56位）" class="headerlink" title="密钥初始置换（密钥由64位转为56位）"></a>密钥初始置换（密钥由64位转为56位）</h4><p><strong>操作对象是64位秘钥</strong></p><p>不考虑每个字节的第8位，DES的密钥由64位减至56位，每个字节的第8位作为奇偶校验位。产生的56位密钥由下表生成（注意表中没有8，16，24，32，40，48，56和64这8位）：<br><strong>注意：这里的数字表示的是原数据的位置，不是数据</strong><br>C0:</p><blockquote><p>57,49,41,33,25,17,9<br>1,58,50,42,34,26,18<br>10,2,59,51,43,35,27<br>19,11,3,60,52,44,36</p></blockquote><p>D0:</p><blockquote><p>63,55,47,39,31,23,15<br>7,62,54,46,38,30,22<br>14,6,61,53,45,37,29<br>21,13,5,28,20,12,4</p></blockquote><h4 id="生成16个48位的子密钥"><a href="#生成16个48位的子密钥" class="headerlink" title="生成16个48位的子密钥"></a>生成16个48位的子密钥</h4><p>在DES的每一轮中，从56位密钥产生出不同的48子密钥，确定这些子密钥的方式如下：<br>1）将56位密钥分成两部分，每部分28位。<br>2）根据轮数，这两部分分别循环左移1位或2位。每轮移动的位数如下表：<br><img src="/2020/03/13/DES%E7%AE%97%E6%B3%95/02.png" alt="15b5906b4985620fae91c07441373fd3.png"></p><h5 id="第一轮循环左移1位"><a href="#第一轮循环左移1位" class="headerlink" title="第一轮循环左移1位"></a>第一轮循环左移1位</h5><p>C1:</p><blockquote><p>49,41,33,25,17,9,1<br>58,50,42,34,26,18,10<br>2,59,51,43,35,27,19<br>11,3,60,52,44,36,57</p></blockquote><p>D1:</p><blockquote><p>55,47,39,31,23,15,7,<br>62,54,46,38,30,22,14,<br>6,61,53,45,37,29,21,<br>13,5,28,20,12,4,63</p></blockquote><p>C1和D1合并之后，再经过置换表2生成48位的子密钥k1。<strong>56位转48位</strong><br><strong>置换表2</strong></p><blockquote><p>14,17,11,24,1,5<br>3,28,15,6,21,10<br>23,19,12,4,26,8<br>16,7,27,20,13,2<br>41,52,31,37,47,55<br>30,40,51,45,33,48<br>44.,49,39,56,34,53<br>46,42,50,36,29,32</p></blockquote><p>C1和D1再次经过循环左移变换，生成C2和D2，C2和D2合并，通过置换表2生成子秘钥K2。<br>以此类推，得到子秘钥K1~K16。需要注意其中循环左移的位数。</p><h3 id="16轮迭代（F函数）"><a href="#16轮迭代（F函数）" class="headerlink" title="16轮迭代（F函数）"></a>16轮迭代（F函数）</h3><h4 id="明文扩展置换（E盒扩展32位转48位）"><a href="#明文扩展置换（E盒扩展32位转48位）" class="headerlink" title="明文扩展置换（E盒扩展32位转48位）"></a>明文扩展置换（E盒扩展32位转48位）</h4><p>输入初始置换后明文右侧32位，最后变为48位。<br><img src="/2020/03/13/DES%E7%AE%97%E6%B3%95/03.png" alt="ca8801b6152ca8f712914df35f077989.png"><br>扩展规则如下：<br><img src="/2020/03/13/DES%E7%AE%97%E6%B3%95/04.png" alt="39726d21a7ff43ec18c06d4d8f3c2bd7.png"></p><blockquote><p>32,1,2,3,4,5,<br>4,5,6,7,8,9,<br>8,9,10,11,12,13,<br>12,13,14,15,16,17,<br>16,17,18,19,20,21,<br>20,21,22,23,24,25,<br>24,25,26,27,28,29,<br>28,29,30,31,32,1</p></blockquote><h4 id="S盒替代"><a href="#S盒替代" class="headerlink" title="S盒替代"></a>S盒替代</h4><p>压缩后的密钥与扩展分组异或以后得到48位的数据，将这个数据送入S盒，进行替代运算。替代由8个不同的S盒完成，每个S盒有6位输入4位输出。48位输入分为8个6位的分组，一个分组对应一个S盒，对应的S盒对各组进行代替操作。<br><img src="/2020/03/13/DES%E7%AE%97%E6%B3%95/05.png" alt="130b775c24f796bf9a930d813808389b.png"><br><img src="/2020/03/13/DES%E7%AE%97%E6%B3%95/06.png" alt="734d32e5dad6ee761f501b0703cc5e6d.png"></p><p>一个S盒就是一个4行16列的表，盒中的每一项都是一个4位的数。S盒的6个输入确定了其对应的输出在哪一行哪一列，输入的<strong>高低两位做为行数H</strong>，<strong>中间四位做为列数L</strong>，在S-BOX中查找第H行L列对应的数据(&lt;32)。</p><h5 id="8个S盒"><a href="#8个S盒" class="headerlink" title="8个S盒"></a>8个S盒</h5><p><strong>S盒1：</strong></p><blockquote><p>14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,<br>0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,<br>4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,<br>15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13,</p></blockquote><p><strong>S盒2：</strong></p><blockquote><p>15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,<br>3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,<br>0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,<br>13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9,</p></blockquote><p><strong>S盒3：</strong></p><blockquote><p>10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,<br>13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,<br>13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,<br>1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12,</p></blockquote><p><strong>S盒4：</strong></p><blockquote><p>7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,<br>13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,<br>10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,<br>3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14,</p></blockquote><p><strong>S盒5：</strong></p><blockquote><p>2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,<br>14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,<br>4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,<br>11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3,</p></blockquote><p><strong>S盒6：</strong></p><blockquote><p>12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,<br>10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,<br>9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,<br>4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13,</p></blockquote><p><strong>S盒7：</strong></p><blockquote><p>4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,<br>13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,<br>1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,<br>6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12,</p></blockquote><p><strong>S盒8：</strong></p><blockquote><p>13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,<br>1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,<br>7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,<br>2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11,</p></blockquote><p><img src="/2020/03/13/DES%E7%AE%97%E6%B3%95/07.png" alt="5c79891ddb9cda188777b0475500e3ab.png"></p><p>例如，假设S盒8的输入为110011，第1位和第6位组合为11，对应于S盒8的第3行；第2位到第5位为1001，对应于S盒8的第9列。S盒8的第3行第9列的数字为12，因此用1100来代替110011。注意，S盒的行列计数都是从0开始。</p><p>代替过程产生8个4位的分组，组合在一起形成32位数据。</p><p>S盒代替是DES算法的关键步骤，所有的其他的运算都是线性的，易于分析，而S盒是非线性的，相比于其他步骤，提供了更好安全性。</p><h4 id="P盒置换"><a href="#P盒置换" class="headerlink" title="P盒置换"></a>P盒置换</h4><p>S盒代替运算的32位输出按照P盒进行置换。该置换把输入的每位映射到输出位，任何一位不能被映射两次，也不能被略去，映射规则如下表：</p><blockquote><p>16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,<br>2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25,</p></blockquote><p>表中的数字代表原数据中此位置的数据在新数据中的位置，即原数据块的第16位放到新数据的第1位，第7位放到第2位，……依此类推，第25位放到第32位。</p><p>最后，P盒置换的结果与最初的64位分组左半部分L0异或，然后左、右半部分交换，接着开始另一轮</p><h3 id="末置换"><a href="#末置换" class="headerlink" title="末置换"></a>末置换</h3><p>末置换是初始置换的逆过程，DES最后一轮后，左、右两半部分并未进行交换，而是两部分合并形成一个分组做为末置换的输入。末置换规则如下：</p><blockquote><p>40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,<br>38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,<br>36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,<br>34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25,</p></blockquote><h3 id="DES的解密"><a href="#DES的解密" class="headerlink" title="DES的解密"></a>DES的解密</h3><p>加密和解密可以使用相同的算法。加密和解密唯一不同的是秘钥的次序是相反的。就是说如果每一轮的加密秘钥分别是K1、K2、K3…K16，那么解密秘钥就是K16、K15、K14…K1。</p><h2 id="代码实现（python）"><a href="#代码实现（python）" class="headerlink" title="代码实现（python）"></a>代码实现（python）</h2><h3 id="密钥生成部分"><a href="#密钥生成部分" class="headerlink" title="密钥生成部分"></a>密钥生成部分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">MaxTime = <span class="number">16</span></span><br><span class="line"><span class="comment"># 密钥初始置换 64位密钥转换为56位</span></span><br><span class="line">key_table1 = [<span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,</span><br><span class="line">              <span class="number">1</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,</span><br><span class="line">              <span class="number">10</span>,<span class="number">2</span>,<span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,</span><br><span class="line">              <span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,</span><br><span class="line">              <span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,</span><br><span class="line">              <span class="number">7</span>,<span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,</span><br><span class="line">              <span class="number">14</span>,<span class="number">6</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,</span><br><span class="line">              <span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment"># 密钥置换表2 56位转48位</span></span><br><span class="line">key_table2 = [<span class="number">14</span>,<span class="number">17</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">5</span>,</span><br><span class="line">              <span class="number">3</span>,<span class="number">28</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">21</span>,<span class="number">10</span>,</span><br><span class="line">              <span class="number">23</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">26</span>,<span class="number">8</span>,</span><br><span class="line">              <span class="number">16</span>,<span class="number">7</span>,<span class="number">27</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">2</span>,</span><br><span class="line">              <span class="number">41</span>,<span class="number">52</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">47</span>,<span class="number">55</span>,</span><br><span class="line">              <span class="number">30</span>,<span class="number">40</span>,<span class="number">51</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">48</span>,</span><br><span class="line">              <span class="number">44</span>,<span class="number">49</span>,<span class="number">39</span>,<span class="number">56</span>,<span class="number">34</span>,<span class="number">53</span>,</span><br><span class="line">              <span class="number">46</span>,<span class="number">42</span>,<span class="number">50</span>,<span class="number">36</span>,<span class="number">29</span>,<span class="number">32</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ListMove</span><span class="params">(l,step)</span>:</span> <span class="comment">#将列表中的元素循环左移</span></span><br><span class="line">    <span class="keyword">return</span> l[step:] + l[:step]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SubKey</span><span class="params">(key)</span>:</span> <span class="comment">#生成子密钥</span></span><br><span class="line">    keyresult = []</span><br><span class="line">    key0 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">56</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key_table1)):  <span class="comment">#密钥初始置换 64位转56位</span></span><br><span class="line">        key0[i] = key[key_table1[i]<span class="number">-1</span>]</span><br><span class="line">    <span class="comment"># 生成16个密钥</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(MaxTime):</span><br><span class="line">        key1 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>)]</span><br><span class="line">        <span class="comment"># 每次位移次数</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span> <span class="keyword">or</span> i == <span class="number">8</span> <span class="keyword">or</span> i == <span class="number">15</span>:</span><br><span class="line">            step = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            step = <span class="number">2</span></span><br><span class="line">        <span class="comment"># 分成左右两部分</span></span><br><span class="line">        temp1 = key0[<span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">        temp2 = key0[<span class="number">28</span>:<span class="number">56</span>]</span><br><span class="line">        <span class="comment"># 循环左移</span></span><br><span class="line">        temp1 = ListMove(temp1,step)</span><br><span class="line">        temp2 = ListMove(temp2,step)</span><br><span class="line">        <span class="comment"># 左右连接</span></span><br><span class="line">        key0 = temp1 + temp2</span><br><span class="line">        <span class="comment"># 置换 56位转48位</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key_table2)):</span><br><span class="line">            key1[i] = key0[key_table2[i]<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 生成密钥</span></span><br><span class="line">        keyresult.append(key1)</span><br><span class="line">    <span class="comment"># 返回每次的密钥</span></span><br><span class="line">    <span class="keyword">return</span> keyresult</span><br></pre></td></tr></table></figure><h3 id="F函数"><a href="#F函数" class="headerlink" title="F函数"></a>F函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">MaxTime = <span class="number">16</span></span><br><span class="line"><span class="comment"># 初始IP置换表</span></span><br><span class="line">IP_table = [<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,</span><br><span class="line">            <span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>,</span><br><span class="line">            <span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>,</span><br><span class="line">            <span class="number">64</span>,<span class="number">56</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">8</span>,</span><br><span class="line">            <span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>, <span class="number">9</span>,<span class="number">1</span>,</span><br><span class="line">            <span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,</span><br><span class="line">            <span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,</span><br><span class="line">            <span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line"><span class="comment"># 逆IP置换表</span></span><br><span class="line">Inv_IP_table = [<span class="number">40</span>,  <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">                <span class="number">39</span>,  <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">                <span class="number">38</span>,  <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">                <span class="number">37</span>,  <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">                <span class="number">36</span>,  <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">                <span class="number">35</span>,  <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">                <span class="number">34</span>,  <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">                <span class="number">33</span>,  <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>]</span><br><span class="line"><span class="comment"># E盒表</span></span><br><span class="line">extend_table = [<span class="number">32</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,</span><br><span class="line">                <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>,</span><br><span class="line">                <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">                <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">                <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">                <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">                <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">                <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,  <span class="number">1</span>]</span><br><span class="line"><span class="comment"># S1盒</span></span><br><span class="line">S1 = [<span class="number">14</span>,  <span class="number">4</span>, <span class="number">13</span>,  <span class="number">1</span>,  <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>,  <span class="number">8</span>,  <span class="number">3</span>, <span class="number">10</span>,  <span class="number">6</span>, <span class="number">12</span>,  <span class="number">5</span>,  <span class="number">9</span>,  <span class="number">0</span>,  <span class="number">7</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">15</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">14</span>,  <span class="number">2</span>, <span class="number">13</span>,  <span class="number">1</span>, <span class="number">10</span>,  <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>,  <span class="number">9</span>,  <span class="number">5</span>,  <span class="number">3</span>,  <span class="number">8</span>,</span><br><span class="line">      <span class="number">4</span>,  <span class="number">1</span>, <span class="number">14</span>,  <span class="number">8</span>, <span class="number">13</span>,  <span class="number">6</span>,  <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">7</span>,  <span class="number">3</span>, <span class="number">10</span>,  <span class="number">5</span>,  <span class="number">0</span>,</span><br><span class="line">      <span class="number">15</span>, <span class="number">12</span>,  <span class="number">8</span>,  <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">1</span>,  <span class="number">7</span>,  <span class="number">5</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">13</span>]</span><br><span class="line"><span class="comment"># S2盒</span></span><br><span class="line">S2 = [<span class="number">15</span>,  <span class="number">1</span>,  <span class="number">8</span>, <span class="number">14</span>,  <span class="number">6</span>, <span class="number">11</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">7</span>,  <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>,  <span class="number">0</span>,  <span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">      <span class="number">3</span>, <span class="number">13</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">15</span>,  <span class="number">2</span>,  <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>,  <span class="number">0</span>,  <span class="number">1</span>, <span class="number">10</span>,  <span class="number">6</span>,  <span class="number">9</span>, <span class="number">11</span>,  <span class="number">5</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">14</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>,  <span class="number">4</span>, <span class="number">13</span>,  <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">8</span>, <span class="number">12</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">3</span>,  <span class="number">2</span>, <span class="number">15</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">8</span>, <span class="number">10</span>,  <span class="number">1</span>,  <span class="number">3</span>, <span class="number">15</span>,  <span class="number">4</span>,  <span class="number">2</span>, <span class="number">11</span>,  <span class="number">6</span>,  <span class="number">7</span>, <span class="number">12</span>,  <span class="number">0</span>,  <span class="number">5</span>, <span class="number">14</span>,  <span class="number">9</span>]</span><br><span class="line"><span class="comment"># S3盒</span></span><br><span class="line">S3 = [<span class="number">10</span>,  <span class="number">0</span>,  <span class="number">9</span>, <span class="number">14</span>,  <span class="number">6</span>,  <span class="number">3</span>, <span class="number">15</span>,  <span class="number">5</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>,  <span class="number">7</span>, <span class="number">11</span>,  <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">8</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">7</span>,  <span class="number">0</span>,  <span class="number">9</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">6</span>, <span class="number">10</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>,  <span class="number">1</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">6</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">8</span>, <span class="number">15</span>,  <span class="number">3</span>,  <span class="number">0</span>, <span class="number">11</span>,  <span class="number">1</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>,  <span class="number">7</span>,</span><br><span class="line">      <span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>,  <span class="number">0</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">8</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>,  <span class="number">3</span>, <span class="number">11</span>,  <span class="number">5</span>,  <span class="number">2</span>, <span class="number">12</span>]</span><br><span class="line"><span class="comment"># S4盒</span></span><br><span class="line">S4 = [<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>,  <span class="number">3</span>,  <span class="number">0</span>,  <span class="number">6</span>,  <span class="number">9</span>, <span class="number">10</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">15</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">8</span>, <span class="number">11</span>,  <span class="number">5</span>,  <span class="number">6</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">7</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>,  <span class="number">9</span>,</span><br><span class="line">      <span class="number">10</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>,  <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>,  <span class="number">1</span>,  <span class="number">3</span>, <span class="number">14</span>,  <span class="number">5</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">4</span>,</span><br><span class="line">      <span class="number">3</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">10</span>,  <span class="number">1</span>, <span class="number">13</span>,  <span class="number">8</span>,  <span class="number">9</span>,  <span class="number">4</span>,  <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>,  <span class="number">7</span>,  <span class="number">2</span>, <span class="number">14</span>]</span><br><span class="line"><span class="comment"># S5盒</span></span><br><span class="line">S5 = [<span class="number">2</span>, <span class="number">12</span>,  <span class="number">4</span>,  <span class="number">1</span>,  <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">5</span>,  <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>,  <span class="number">0</span>, <span class="number">14</span>,  <span class="number">9</span>,</span><br><span class="line">      <span class="number">14</span>, <span class="number">11</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">13</span>,  <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>,  <span class="number">3</span>,  <span class="number">9</span>,  <span class="number">8</span>,  <span class="number">6</span>,</span><br><span class="line">      <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>,  <span class="number">7</span>,  <span class="number">8</span>, <span class="number">15</span>,  <span class="number">9</span>, <span class="number">12</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">3</span>,  <span class="number">0</span>, <span class="number">14</span>,</span><br><span class="line">      <span class="number">11</span>,  <span class="number">8</span>, <span class="number">12</span>,  <span class="number">7</span>,  <span class="number">1</span>, <span class="number">14</span>,  <span class="number">2</span>, <span class="number">13</span>,  <span class="number">6</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">9</span>, <span class="number">10</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">3</span>]</span><br><span class="line"><span class="comment"># S6盒</span></span><br><span class="line">S6 = [<span class="number">12</span>,  <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>,  <span class="number">9</span>,  <span class="number">2</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">0</span>, <span class="number">13</span>,  <span class="number">3</span>,  <span class="number">4</span>, <span class="number">14</span>,  <span class="number">7</span>,  <span class="number">5</span>, <span class="number">11</span>,</span><br><span class="line">      <span class="number">10</span>, <span class="number">15</span>,  <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">7</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>,  <span class="number">0</span>, <span class="number">11</span>,  <span class="number">3</span>,  <span class="number">8</span>,</span><br><span class="line">      <span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>,  <span class="number">5</span>,  <span class="number">2</span>,  <span class="number">8</span>, <span class="number">12</span>,  <span class="number">3</span>,  <span class="number">7</span>,  <span class="number">0</span>,  <span class="number">4</span>, <span class="number">10</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>,  <span class="number">6</span>,</span><br><span class="line">      <span class="number">4</span>,  <span class="number">3</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>,  <span class="number">1</span>,  <span class="number">7</span>,  <span class="number">6</span>,  <span class="number">0</span>,  <span class="number">8</span>, <span class="number">13</span>]</span><br><span class="line"><span class="comment"># S7盒</span></span><br><span class="line">S7 = [<span class="number">4</span>, <span class="number">11</span>,  <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">8</span>, <span class="number">13</span>,  <span class="number">3</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">7</span>,  <span class="number">5</span>, <span class="number">10</span>,  <span class="number">6</span>,  <span class="number">1</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">0</span>, <span class="number">11</span>,  <span class="number">7</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>,  <span class="number">3</span>,  <span class="number">5</span>, <span class="number">12</span>,  <span class="number">2</span>, <span class="number">15</span>,  <span class="number">8</span>,  <span class="number">6</span>,</span><br><span class="line">      <span class="number">1</span>,  <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>,  <span class="number">3</span>,  <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">0</span>,  <span class="number">5</span>,  <span class="number">9</span>,  <span class="number">2</span>,</span><br><span class="line">      <span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>,  <span class="number">8</span>,  <span class="number">1</span>,  <span class="number">4</span>, <span class="number">10</span>,  <span class="number">7</span>,  <span class="number">9</span>,  <span class="number">5</span>,  <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>,  <span class="number">2</span>,  <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line"><span class="comment"># S8盒</span></span><br><span class="line">S8 = [<span class="number">13</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">4</span>,  <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>,  <span class="number">1</span>, <span class="number">10</span>,  <span class="number">9</span>,  <span class="number">3</span>, <span class="number">14</span>,  <span class="number">5</span>,  <span class="number">0</span>, <span class="number">12</span>,  <span class="number">7</span>,</span><br><span class="line">      <span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>,  <span class="number">8</span>, <span class="number">10</span>,  <span class="number">3</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">12</span>,  <span class="number">5</span>,  <span class="number">6</span>, <span class="number">11</span>,  <span class="number">0</span>, <span class="number">14</span>,  <span class="number">9</span>,  <span class="number">2</span>,</span><br><span class="line">      <span class="number">7</span>, <span class="number">11</span>,  <span class="number">4</span>,  <span class="number">1</span>,  <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>,  <span class="number">2</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">8</span>,</span><br><span class="line">      <span class="number">2</span>,  <span class="number">1</span>, <span class="number">14</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">10</span>,  <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">6</span>, <span class="number">11</span>]</span><br><span class="line"><span class="comment"># S盒</span></span><br><span class="line">S = [S1,S2,S3,S4,S5,S6,S7,S8]</span><br><span class="line"><span class="comment"># p盒</span></span><br><span class="line">p_table = [<span class="number">16</span>,  <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">           <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>,  <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">           <span class="number">2</span>,  <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>,  <span class="number">3</span>,  <span class="number">9</span>,</span><br><span class="line">           <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>,  <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>,  <span class="number">4</span>, <span class="number">25</span>]</span><br><span class="line"><span class="comment"># 10进制转4位二进制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2bit</span><span class="params">(n)</span>:</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        a.insert(<span class="number">0</span>,str(n%<span class="number">2</span>))</span><br><span class="line">        n = int(n/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="comment"># IP置换，op为0为加密置换，op为1表示解密置换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IP</span><span class="params">(text,op)</span>:</span></span><br><span class="line">    temp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>)]</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">            temp[i] = text[IP_table[i]<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> temp</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">            temp[i] = text[Inv_IP_table[i]<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> temp</span><br><span class="line"><span class="comment"># E盒扩展</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Extend</span><span class="params">(text)</span>:</span></span><br><span class="line">    extend = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</span><br><span class="line">        extend[i] = text[extend_table[i]<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span>  extend</span><br><span class="line"><span class="comment"># S盒变换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_Replace</span><span class="params">(text)</span>:</span></span><br><span class="line">    sResult = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        row = <span class="number">2</span> * int(text[k*<span class="number">6</span>]) + int(text[k*<span class="number">6</span>+<span class="number">5</span>])</span><br><span class="line">        column = <span class="number">8</span>*int(text[k*<span class="number">6</span>+<span class="number">1</span>]) + <span class="number">4</span>*int(text[k*<span class="number">6</span>+<span class="number">2</span>]) + <span class="number">2</span>*int(text[k*<span class="number">6</span>+<span class="number">3</span>]) + int(text[k*<span class="number">6</span>+<span class="number">4</span>])</span><br><span class="line">        temp = S[k][row*<span class="number">16</span>+column]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            sResult[<span class="number">4</span>*k + i] = int2bit(temp)[i]</span><br><span class="line">    <span class="keyword">return</span>  sResult</span><br><span class="line"><span class="comment"># P盒置换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_Replace</span><span class="params">(text)</span>:</span></span><br><span class="line">    pResult = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        pResult[i] = text[p_table[i]<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> pResult</span><br><span class="line"><span class="comment"># 异或运算</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Xor</span><span class="params">(bit1,bit2)</span>:</span></span><br><span class="line">    xorResult = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bit1))]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bit1)):</span><br><span class="line">        xorResult[i] = str(int(bit1[i])^int(bit2[i]))</span><br><span class="line">    <span class="keyword">return</span> xorResult</span><br></pre></td></tr></table></figure><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># /*</span></span><br><span class="line"><span class="comment">#  * @Author: Barry</span></span><br><span class="line"><span class="comment">#  * @Date: 2020-03-30 16:02:41</span></span><br><span class="line"><span class="comment">#  * @Last Modified by: Barry</span></span><br><span class="line"><span class="comment">#  * @Last Modified time: 2020-03-30 16:03:52</span></span><br><span class="line"><span class="comment">#  */</span></span><br><span class="line"><span class="keyword">import</span> creatSubkey <span class="keyword">as</span> cs</span><br><span class="line"><span class="keyword">import</span>  f_Function <span class="keyword">as</span> f</span><br><span class="line"><span class="comment">#16进制转2进制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2bin</span><span class="params">(text)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text)):</span><br><span class="line">        result.extend(f.int2bit(int(text[i],<span class="number">16</span>)))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="comment"># 2进制转16进制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2hex</span><span class="params">(text)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    q = len(text)//<span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q):</span><br><span class="line">        dec = int(text[<span class="number">4</span>*i])*<span class="number">8</span> + int(text[<span class="number">4</span>*i+<span class="number">1</span>])*<span class="number">4</span>+int(text[<span class="number">4</span>*i+<span class="number">2</span>])*<span class="number">2</span> + int(text[<span class="number">4</span>*i+<span class="number">3</span>])*<span class="number">1</span></span><br><span class="line">        x = hex(dec)[<span class="number">2</span>:]</span><br><span class="line">        result.extend(x)</span><br><span class="line">    rs = <span class="string">''</span>.join(result)</span><br><span class="line">    <span class="keyword">return</span> rs</span><br><span class="line"><span class="comment"># 加密步骤</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DESEncryption</span><span class="params">(plaintext,secret_key)</span>:</span></span><br><span class="line">    secret_key = cs.SubKey(secret_key) <span class="comment">#密钥初始置换</span></span><br><span class="line">    text1 = f.IP(plaintext,<span class="number">0</span>)</span><br><span class="line">    L = [text1[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    R = [text1[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">64</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        temp = R</span><br><span class="line">        temp = f.Extend(temp)</span><br><span class="line">        temp = f.Xor(temp,secret_key[i])</span><br><span class="line">        temp = f.s_Replace(temp)</span><br><span class="line">        temp = f.p_Replace(temp)</span><br><span class="line">        temp = f.Xor(temp,L)</span><br><span class="line">        L = R</span><br><span class="line">        R = temp</span><br><span class="line">    L,R = R,L</span><br><span class="line">    cText = L</span><br><span class="line">    cText.extend((R))</span><br><span class="line">    cText = f.IP(cText,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> bin2hex(cText)</span><br><span class="line"><span class="comment">#程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 输入明文</span></span><br><span class="line">    print(<span class="string">'读入16位十六进制明文'</span>)</span><br><span class="line">    f1 = open(<span class="string">'des_plaintext.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    plaintext = f1.read()</span><br><span class="line">    f1.close()</span><br><span class="line">    print(<span class="string">"读入完成"</span>)</span><br><span class="line">    <span class="comment"># 输入密钥</span></span><br><span class="line">    print(<span class="string">"读入16位十六进制密钥"</span>)</span><br><span class="line">    <span class="comment"># with open('des_sercetkey.txt','r') as f:</span></span><br><span class="line">    <span class="comment">#     secret_key = f.read()</span></span><br><span class="line">    f2 = open(<span class="string">'des_sercetkey.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    secret_key = f2.read()</span><br><span class="line">    f2.close()</span><br><span class="line">    print(<span class="string">"读入完成"</span>)</span><br><span class="line">    print(<span class="string">"算法开始"</span>)</span><br><span class="line">    print(<span class="string">"明文为："</span> + plaintext)</span><br><span class="line">    print(<span class="string">"密钥为："</span> + secret_key)</span><br><span class="line">    plaintext = hex2bin(plaintext)</span><br><span class="line">    secret_key = hex2bin(secret_key)</span><br><span class="line">    <span class="comment"># 算法开始</span></span><br><span class="line">    Ciphertext = DESEncryption(plaintext, secret_key)</span><br><span class="line">    <span class="comment"># 打印密文</span></span><br><span class="line">    print(<span class="string">"加密后密文为"</span> + Ciphertext)</span><br></pre></td></tr></table></figure><h3 id="解密函数"><a href="#解密函数" class="headerlink" title="解密函数"></a>解密函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> creatSubkey <span class="keyword">as</span> cs</span><br><span class="line"><span class="keyword">import</span> f_Function <span class="keyword">as</span> f</span><br><span class="line"><span class="comment">#16进制转2进制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2bin</span><span class="params">(text)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text)):</span><br><span class="line">        result.extend(f.int2bit(int(text[i],<span class="number">16</span>)))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="comment"># 2进制转16进制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2hex</span><span class="params">(text)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    q = len(text)//<span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q):</span><br><span class="line">        dec = int(text[<span class="number">4</span>*i])*<span class="number">8</span> + int(text[<span class="number">4</span>*i+<span class="number">1</span>])*<span class="number">4</span>+int(text[<span class="number">4</span>*i+<span class="number">2</span>])*<span class="number">2</span> + int(text[<span class="number">4</span>*i+<span class="number">3</span>])*<span class="number">1</span></span><br><span class="line">        x = hex(dec)[<span class="number">2</span>:]</span><br><span class="line">        result.extend(x)</span><br><span class="line">    rs = <span class="string">''</span>.join(result)</span><br><span class="line">    <span class="keyword">return</span> rs</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decryption</span><span class="params">(text,key)</span>:</span></span><br><span class="line">    keylist = cs.SubKey(key)</span><br><span class="line">    text1 = f.IP(text,<span class="number">0</span>)</span><br><span class="line">    L = [text1[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    R = [text1[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">64</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        temp = R</span><br><span class="line">        temp = f.Extend(temp)</span><br><span class="line">        temp = f.Xor(temp, keylist[<span class="number">15</span>-i])</span><br><span class="line">        temp = f.s_Replace(temp)</span><br><span class="line">        temp = f.p_Replace(temp)</span><br><span class="line">        temp = f.Xor(temp, L)</span><br><span class="line">        L = R</span><br><span class="line">        R = temp</span><br><span class="line">    L, R = R, L</span><br><span class="line">    cText = L</span><br><span class="line">    cText.extend((R))</span><br><span class="line">    cText = f.IP(cText, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> bin2hex(cText)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'读入16位十六进制密文'</span>)</span><br><span class="line">    f1 = open(<span class="string">'des_ciphertext.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    ciphertext = f1.read()</span><br><span class="line">    f1.close()</span><br><span class="line">    print(<span class="string">"读入完成"</span>)</span><br><span class="line">    <span class="comment"># 输入密钥</span></span><br><span class="line">    print(<span class="string">"读入16位十六进制密钥"</span>)</span><br><span class="line">    <span class="comment"># with open('des_sercetkey.txt','r') as f:</span></span><br><span class="line">    <span class="comment">#     secret_key = f.read()</span></span><br><span class="line">    f2 = open(<span class="string">'des_sercetkey.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    secret_key = f2.read()</span><br><span class="line">    f2.close()</span><br><span class="line">    print(<span class="string">"读入完成"</span>)</span><br><span class="line">    print(<span class="string">"算法开始"</span>)</span><br><span class="line">    print(<span class="string">"密文为："</span> + ciphertext)</span><br><span class="line">    print(<span class="string">"密钥为："</span> + secret_key)</span><br><span class="line">    ciphertext = hex2bin(ciphertext)</span><br><span class="line">    secret_key = hex2bin(secret_key)</span><br><span class="line">    <span class="comment"># 算法开始</span></span><br><span class="line">    plaintext = Decryption(ciphertext, secret_key)</span><br><span class="line">    <span class="comment"># 打印密文</span></span><br><span class="line">    print(<span class="string">"解密后明文为"</span> + plaintext)</span><br></pre></td></tr></table></figure><p>本文参考链接：<br>原文链接：<br><a href="https://blog.csdn.net/qq_27570955/article/details/52442092" target="_blank" rel="noopener">https://blog.csdn.net/qq_27570955/article/details/52442092</a><br><a href="https://www.cnblogs.com/songwenlong/p/5944139.html" target="_blank" rel="noopener">https://www.cnblogs.com/songwenlong/p/5944139.html</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux使用程序</title>
    <url>/2020/02/12/Linux%E4%BD%BF%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h2 id="文件和文件夹操作"><a href="#文件和文件夹操作" class="headerlink" title="文件和文件夹操作"></a>文件和文件夹操作</h2><h3 id="1-创建-删除空目录-mkdir-rmdir"><a href="#1-创建-删除空目录-mkdir-rmdir" class="headerlink" title="1.创建/删除空目录 - mkdir/rmdir"></a>1.创建/删除空目录 - <strong>mkdir/rmdir</strong></h3><a id="more"></a><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root ~</span>]<span class="meta"># mkdir abc</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># mkdir -p xyz/abc</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># rmdir abc</span></span><br></pre></td></tr></table></figure><h3 id="2-创建-删除文件-touch-rm"><a href="#2-创建-删除文件-touch-rm" class="headerlink" title="2.创建/删除文件 - **touch/rm"></a>2.创建/删除文件 - **touch/rm</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root ~</span>]<span class="meta"># touch readme.txt</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># touch <span class="meta-keyword">error</span>.txt</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># rm <span class="meta-keyword">error</span>.txt</span></span><br><span class="line">rm: <span class="keyword">remove</span> regular empty file ‘error.txt’? y</span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># rm -rf xyz</span></span><br></pre></td></tr></table></figure><ul><li>touch命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：<ul><li>更改内容的时间 - mtime</li><li>更改权限的时间呢 - ctime</li><li>最后访问时间 - atime</li></ul></li><li>rm的几个重要参数<ul><li>-i: 交互式删除，每个删除项都会进行询问</li><li>-r：删除目录并递归的删除目录中的文件和目录</li><li>-f：强制删除，忽略不存在的文件，没有任何提示</li></ul></li></ul><h3 id="3-切换和查看当前工作目录-cd-pwd"><a href="#3-切换和查看当前工作目录-cd-pwd" class="headerlink" title="3.切换和查看当前工作目录 - cd/pwd"></a>3.切换和查看当前工作目录 - <strong>cd/pwd</strong></h3><p>说明：</p><blockquote><p>cd命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以/开关）来切换到指定的目录，也可以用cd .. 来返回上一级目录。请大家想一想，如果要返回到上上一级目录应该给cd命令加上什么样的参数呢？</p></blockquote><h3 id="4-查看目录内容-ls"><a href="#4-查看目录内容-ls" class="headerlink" title="4.查看目录内容 - ls"></a>4.查看目录内容 - <strong>ls</strong></h3><ul><li>-l：以长格式查看文件和目录</li><li>-a：显示以点开头的文件和目录（隐藏文件）</li><li>-R：遇到目录要进行递归展开（继续列出目录下面的文件和目录）</li><li>-d：只列出目录，不列出其他内容</li><li>-s/-t：按大小/时间排序</li></ul><blockquote><p>ls -l 可以简写为ll</p></blockquote><h3 id="5-查看文件内容-cat-tac-head-tail-more-less-rev-od"><a href="#5-查看文件内容-cat-tac-head-tail-more-less-rev-od" class="headerlink" title="5.查看文件内容 - cat/tac/head/tail/more/less/rev/od"></a>5.查看文件内容 - <strong>cat/tac/head/tail/more/less/rev/od</strong></h3><ul><li>cat: 由第一行开始显示内容，并将所有内容输出</li><li>tac: 从最后一行倒序显示内容，并将所有内容输出</li><li>rev：从每一行的最后一个字符显示到第一个字符</li><li>head：只显示头几行</li><li>tail：只显示后几行</li><li>more：根据窗口大小，一页一页的显示文件内容</li><li>less：和more类似，但其优点可以往前翻页，而且进行可以搜索字符</li><li>od：以八进制、十进制、十六进制和ASCII码的格式来显示文件或者流<ul><li>od [-A 地址进制] [-t 显示格式] 文件名</li><li>-A 指定地址进制包括：<ul><li>o:八进制（系统默认值）</li><li>d：十进制</li><li>x：十六进制</li><li>n：不打印位移值</li></ul></li><li>-t：指定数据的显示格式的主要参数有：<ul><li>c：ASCII字符或反斜杠序列（如\n）</li><li>d：有符号十进制数</li><li>f：浮点数</li><li>o：八进制（系统默认值）</li><li>u：无符号十进制数</li><li>x：十六进制数</li></ul></li></ul></li></ul><h3 id="6-拷贝-移动文件-cp-mv"><a href="#6-拷贝-移动文件-cp-mv" class="headerlink" title="6.拷贝/移动文件 - cp/mv"></a>6.拷贝/移动文件 - <strong>cp/mv</strong></h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root ~</span>]<span class="meta"># mkdir backup</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># cp sohu.html backup/</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># cd backup</span></span><br><span class="line">[<span class="meta">root backup</span>]<span class="meta"># ls</span></span><br><span class="line">sohu.html</span><br><span class="line">[<span class="meta">root backup</span>]<span class="meta"># mv sohu.html sohu_index.html</span></span><br><span class="line">[<span class="meta">root backup</span>]<span class="meta"># ls</span></span><br><span class="line">sohu_index.html</span><br></pre></td></tr></table></figure><h3 id="7-文件重命名-rename"><a href="#7-文件重命名-rename" class="headerlink" title="7.文件重命名 - rename"></a>7.文件重命名 - <strong>rename</strong></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@iZwz97tbgo9lkabnat2lo8Z ~]</span># <span class="selector-tag">rename</span> <span class="selector-class">.htm</span> <span class="selector-class">.html</span> *<span class="selector-class">.htm</span></span><br></pre></td></tr></table></figure><h3 id="8-查找文件和查找内容-find-grep"><a href="#8-查找文件和查找内容-find-grep" class="headerlink" title="8.查找文件和查找内容 - find/grep"></a>8.查找文件和查找内容 - <strong>find/grep</strong></h3><p>【find】：find 路径 参数 文件名<br>参数：</p><ul><li>-name：根据文件名查找</li><li>-perm：根据文件权限查找</li><li>-prune：该选项可以排除某些查找目录</li><li>-user：根据文件属主查找</li><li>-group：根据文件属组查找</li><li>-mtime -n | +n 根据文件更改时间查找</li><li>-type：根据文件类型查找、<ul><li>-f: 文件</li><li>-d：目录</li><li>-c：字符设备文件</li><li>-b：块设备文件</li><li>-l：链接文件</li><li>-p：管道文件</li></ul></li><li>-size -n +n 按文件大小查找<br>【grep】：grep [选项] [文本] 文件<blockquote><p>说明：grep在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用grep -E 或直接使用egrep</p></blockquote></li></ul><h3 id="9-创建链接和查看链接-ln-readlink"><a href="#9-创建链接和查看链接-ln-readlink" class="headerlink" title="9.创建链接和查看链接 -ln/readlink"></a>9.创建链接和查看链接 -<strong>ln/readlink</strong></h3><p>软链接：</p><ul><li>存放另一个文件的路径的形式</li><li>可以跨文件系统，硬链接不可以</li><li>可以对一个不存在的文件名进行链接，硬链接必须有源文件</li><li>可以对目录进行链接</li></ul><p>硬链接：</p><ul><li>以文本副本的形式存在，不占用实际空间</li><li>不允许给目录创建硬链接</li><li>只有在同一个文件系统中才能创建</li><li>删除其中一个硬链接文件并不影响其他有相同inode号的文件</li></ul><blockquote><p>【ln】：[参数] [源文件目录] [目标文件或目录]</p></blockquote><p>主要参数：</p><ul><li>-i:交互模式，文件存在则提示用户是否覆盖</li><li>-s 软链接（符号链接）</li><li>-d 允许超级用户制作目录的硬链接</li><li>-b 删除，覆盖以前建立的链接</li></ul><h3 id="10-压缩-解压缩和归档-解归档-gzip-gunzip-xz"><a href="#10-压缩-解压缩和归档-解归档-gzip-gunzip-xz" class="headerlink" title="10.压缩/解压缩和归档/解归档 - gzip/gunzip/xz"></a>10.压缩/解压缩和归档/解归档 - <strong>gzip/gunzip/xz</strong></h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>iZwz97tbgo9lkabnat2lo8Z ~]# wget http:<span class="comment">//download.redis.io/releases/redis-4.0.10.tar.gz</span></span><br><span class="line">-<span class="number">-2018</span><span class="number">-06</span><span class="number">-20</span> <span class="number">19</span>:<span class="number">29</span>:<span class="number">59</span>--  http:<span class="comment">//download.redis.io/releases/redis-4.0.10.tar.gz</span></span><br><span class="line">Resolving download.redis.io (download.redis.io)... <span class="number">109.74</span><span class="number">.203</span><span class="number">.151</span></span><br><span class="line">Connecting to download.redis.io (download.redis.io)|<span class="number">109.74</span><span class="number">.203</span><span class="number">.151</span>|:<span class="number">80.</span>.. connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: <span class="number">1738465</span> (<span class="number">1.7</span>M) [application/x-gzip]</span><br><span class="line">Saving to: ‘redis<span class="number">-4.0</span><span class="number">.10</span>.tar.gz’</span><br><span class="line"><span class="number">100</span>%[==================================================&gt;] <span class="number">1</span>,<span class="number">738</span>,<span class="number">465</span>   <span class="number">70.1</span>KB/s   <span class="keyword">in</span> <span class="number">74</span>s</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-20</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">14</span> (<span class="number">22.9</span> KB/s) - ‘redis<span class="number">-4.0</span><span class="number">.10</span>.tar.gz’ saved [<span class="number">1738465</span>/<span class="number">1738465</span>]</span><br><span class="line">[<span class="symbol">root@</span>iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>.tar.gz</span><br><span class="line">[<span class="symbol">root@</span>iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis<span class="number">-4.0</span><span class="number">.10</span>.tar.gz</span><br><span class="line">[<span class="symbol">root@</span>iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>.tar</span><br></pre></td></tr></table></figure><h3 id="11-归档和解归档-tar"><a href="#11-归档和解归档-tar" class="headerlink" title="11.归档和解归档 - tar"></a>11.归档和解归档 - <strong>tar</strong></h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis<span class="number">-4.0</span><span class="number">.10</span>.tar</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/.gitignore</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/<span class="number">00</span>-RELEASENOTES</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/BUGS</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/CONTRIBUTING</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/COPYING</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/INSTALL</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/MANIFESTO</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/Makefile</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/README.md</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/deps/</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/deps/Makefile</span><br><span class="line">redis<span class="number">-4.0</span><span class="number">.10</span>/deps/README.md</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>说明：归档（也称为创建归档）和解归档都使用tar命令，通常创建归档需要-cvf三个参数，其中c表示创建（create），v表示显示创建归档详情（verbose），f表示指定归档的文件（file）；解归档需要加上-xvf参数，其中x表示抽取（extract），其他两个参数跟创建归档相同。</p></blockquote><h3 id="12-将标准输入转成命令行参数-xargs"><a href="#12-将标准输入转成命令行参数-xargs" class="headerlink" title="12.将标准输入转成命令行参数 - xargs"></a>12.将标准输入转成命令行参数 - <strong>xargs</strong></h3><p>下面的命令会将查找当前路径下的html文件，然后通过xargs将这些文件作为参数传给rm命令，实现查找并删除文件的操作</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find . -<span class="keyword">type</span> <span class="type">f </span>-name <span class="string">"*.html"</span> | xargs rm -f</span><br></pre></td></tr></table></figure><p>下面的命令讲a.txt文件中的多行内容变成一行输出到b.txt文件中，其中&lt;表示从a.txt中读取输入，&gt;表示讲命令的执行结果输出到b.txt中</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">[root@iZwz97tbgo9lkabnat2lo8Z ~]<span class="comment"># xargs &lt; a.txt &gt; b.txt</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：这个命令就像上面演示的那样常在管道（实现进程间通信的一种方式）和重定向（重新指定输入输出的位置）操作中用到，后面的内容中会讲到管道操作和输入输出重定向操作。</p></blockquote><h3 id="13-显示文件或目录-basename-dirname"><a href="#13-显示文件或目录-basename-dirname" class="headerlink" title="13.显示文件或目录 - basename/dirname"></a>13.显示文件或目录 - <strong>basename/dirname</strong></h3><h3 id="14-其他相关工具"><a href="#14-其他相关工具" class="headerlink" title="14.其他相关工具"></a>14.其他相关工具</h3><ul><li>sort - 对内容排序</li><li>uniq - 去掉相邻重复内容</li><li>tr - 替换指定内容为新内容</li><li>cut/paste - 剪切/粘贴内容</li><li>split - 拆分文件</li><li>file - 判断文件类型</li><li>wc - 统计文件行数、单词数、字节数</li><li>iconv - 编码转换</li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[root ~]# cat foo.txt</span><br><span class="line">grape</span><br><span class="line">apple</span><br><span class="line">pitaya</span><br><span class="line">[root ~]# cat bar.txt</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">300</span></span><br><span class="line"><span class="number">400</span></span><br><span class="line">[root ~]# paste foo.txt bar.txt</span><br><span class="line">grape   <span class="number">100</span></span><br><span class="line">apple   <span class="number">200</span></span><br><span class="line">pitaya  <span class="number">300</span></span><br><span class="line">        <span class="number">400</span></span><br><span class="line">[root ~]# paste foo.txt bar.txt &gt; hello.txt</span><br><span class="line">[root ~]# cut -b <span class="number">4</span><span class="number">-8</span> hello.txt</span><br><span class="line">pe      <span class="number">10</span></span><br><span class="line">le      <span class="number">20</span></span><br><span class="line">aya     <span class="number">3</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">[root ~]# cat hello.txt | tr <span class="string">'\t'</span> <span class="string">','</span></span><br><span class="line">grape,<span class="number">100</span></span><br><span class="line">apple,<span class="number">200</span></span><br><span class="line">pitaya,<span class="number">300</span></span><br><span class="line">,<span class="number">400</span></span><br><span class="line">[root ~]# split -l <span class="number">100</span> sohu.html hello</span><br><span class="line">[root ~]# wget https:<span class="comment">//www.baidu.com/img/bd_logo1.png</span></span><br><span class="line">[root ~]# file bd_logo1.png</span><br><span class="line">bd_logo1.png: PNG image data, <span class="number">540</span> x <span class="number">258</span>, <span class="number">8</span>-bit colormap, non-<span class="built_in">int</span>erlaced</span><br><span class="line">[root ~]# wc sohu.html</span><br><span class="line">  <span class="number">2979</span>   <span class="number">6355</span> <span class="number">212527</span> sohu.html</span><br><span class="line">[root ~]# wc -l sohu.html</span><br><span class="line"><span class="number">2979</span> sohu.html</span><br><span class="line">[root ~]# wget http:<span class="comment">//www.qq.com -O qq.html</span></span><br><span class="line">[root ~]# iconv -f gb2312 -t utf<span class="number">-8</span> qq.html</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>Linux学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础命令</title>
    <url>/2020/02/12/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>【语句格式】</p><blockquote><p>命令名称 [命令参数] [命令对象]</p></blockquote><a id="more"></a><h3 id="1-获取登录信息-w-who-last-lastb"><a href="#1-获取登录信息-w-who-last-lastb" class="headerlink" title="1.获取登录信息 - w/who/last/lastb"></a>1.获取登录信息 - <strong>w/who/last/lastb</strong></h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ w</span><br><span class="line"> <span class="number">12</span>:<span class="number">32</span>:<span class="number">22</span> up  <span class="number">2</span>:<span class="number">57</span>,  <span class="number">1</span> user,  load average: <span class="number">0.86</span>, <span class="number">1.18</span>, <span class="number">1.13</span></span><br><span class="line">USER     TTY      FROM             <span class="symbol">LOGIN@</span>   IDLE   JCPU   PCPU WHAT</span><br><span class="line">admintor tty1     :<span class="number">0</span>               <span class="number">09</span>:<span class="number">35</span>    <span class="number">2</span>:<span class="number">57</span>m  <span class="number">4</span>:<span class="number">45</span>  <span class="number">11.21</span>s /usr/bin/startdde</span><br><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ clear</span><br><span class="line"></span><br><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ w</span><br><span class="line"> <span class="number">12</span>:<span class="number">32</span>:<span class="number">28</span> up  <span class="number">2</span>:<span class="number">57</span>,  <span class="number">1</span> user,  load average: <span class="number">0.79</span>, <span class="number">1.16</span>, <span class="number">1.13</span></span><br><span class="line">USER     TTY      FROM             <span class="symbol">LOGIN@</span>   IDLE   JCPU   PCPU WHAT</span><br><span class="line">admintor tty1     :<span class="number">0</span>               <span class="number">09</span>:<span class="number">35</span>    <span class="number">2</span>:<span class="number">57</span>m  <span class="number">4</span>:<span class="number">45</span>  <span class="number">11.21</span>s /usr/bin/startdde</span><br><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ who</span><br><span class="line">admintor tty1         <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">35</span> (:<span class="number">0</span>)</span><br><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ whoami</span><br><span class="line">admintor</span><br><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ last</span><br><span class="line">admintor tty1         :<span class="number">0</span>               Sat Feb  <span class="number">8</span> <span class="number">09</span>:<span class="number">35</span>   still logged <span class="keyword">in</span></span><br><span class="line">reboot   system boot  <span class="number">4.15</span><span class="number">.0</span><span class="number">-30</span>deepin- Sat Feb  <span class="number">8</span> <span class="number">17</span>:<span class="number">34</span>   still running</span><br><span class="line">admintor tty1         :<span class="number">0</span>               Fri Feb  <span class="number">7</span> <span class="number">11</span>:<span class="number">43</span> - <span class="number">18</span>:<span class="number">32</span>  (<span class="number">06</span>:<span class="number">49</span>)</span><br><span class="line">reboot   system boot  <span class="number">4.15</span><span class="number">.0</span><span class="number">-30</span>deepin- Fri Feb  <span class="number">7</span> <span class="number">19</span>:<span class="number">42</span> - <span class="number">18</span>:<span class="number">32</span>  (<span class="number">-1</span>:<span class="number">-9</span>)</span><br><span class="line">admintor tty1         :<span class="number">0</span>               Wed Feb  <span class="number">5</span> <span class="number">10</span>:<span class="number">21</span> - <span class="number">14</span>:<span class="number">43</span>  (<span class="number">04</span>:<span class="number">21</span>)</span><br><span class="line">reboot   system boot  <span class="number">4.15</span><span class="number">.0</span><span class="number">-30</span>deepin- Wed Feb  <span class="number">5</span> <span class="number">18</span>:<span class="number">19</span> - <span class="number">14</span>:<span class="number">43</span>  (<span class="number">-3</span>:<span class="number">-36</span>)</span><br><span class="line">admintor tty1         :<span class="number">0</span>               Tue Feb  <span class="number">4</span> <span class="number">09</span>:<span class="number">32</span> - <span class="number">18</span>:<span class="number">16</span>  (<span class="number">08</span>:<span class="number">44</span>)</span><br><span class="line">reboot   system boot  <span class="number">4.15</span><span class="number">.0</span><span class="number">-30</span>deepin- Tue Feb  <span class="number">4</span> <span class="number">17</span>:<span class="number">31</span> - <span class="number">18</span>:<span class="number">17</span>  (<span class="number">00</span>:<span class="number">45</span>)</span><br><span class="line">admintor tty1         :<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-查看自己使用的Shell-ps"><a href="#2-查看自己使用的Shell-ps" class="headerlink" title="2.查看自己使用的Shell - ps"></a>2.查看自己使用的Shell - <strong>ps</strong></h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ ps</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line"><span class="number">19593</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> bash</span><br><span class="line"><span class="number">20057</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps</span><br></pre></td></tr></table></figure><h3 id="3-查看命令的说明和位置-whatis-which-whereis"><a href="#3-查看命令的说明和位置-whatis-which-whereis" class="headerlink" title="3.查看命令的说明和位置 - whatis/which/whereis"></a>3.查看命令的说明和位置 - <strong>whatis/which/whereis</strong></h3><h4 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a>whatis</h4><p>【功能】在whatis库中搜寻特定的命令</p><p>【语法】whatis COMMAND</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ whatis ps</span><br><span class="line">ps (<span class="number">1</span>)               - report a snapshot of the current processes.</span><br><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ whatis python</span><br><span class="line">python3<span class="number">.7</span> (<span class="number">1</span>)        - an <span class="built_in">int</span>erpreted, <span class="built_in">int</span>eractive, object-oriented programming language</span><br><span class="line">python (<span class="number">1</span>)           - an <span class="built_in">int</span>erpreted, <span class="built_in">int</span>eractive, object-oriented programming language</span><br></pre></td></tr></table></figure><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><p>【功能】 查找文件、手册页、命令等的相关位置</p><p>【语法】 whereis options argument</p><p>【常用选项】</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-b:只查找二进制文件位置</span></span><br><span class="line"><span class="deletion">-m:只查找手册页部分</span></span><br></pre></td></tr></table></figure><p>【实例】<br></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">admintor<span class="meta">@admintor</span>-<span class="string">PC:</span>~/Desktop$ whereis ps</span><br><span class="line"><span class="string">ps:</span> <span class="regexp">/usr/</span>bin<span class="regexp">/ps /</span>usr<span class="regexp">/share/</span>man<span class="regexp">/man1/</span>ps<span class="number">.1</span>.gz</span><br><span class="line">admintor<span class="meta">@admintor</span>-<span class="string">PC:</span>~/Desktop$ whereis python</span><br><span class="line"><span class="string">python:</span> <span class="regexp">/usr/</span>bin<span class="regexp">/python /</span>usr<span class="regexp">/bin/</span>python2<span class="number">.7</span>-config <span class="regexp">/usr/</span>bin<span class="regexp">/python3.5-dbg /</span>usr<span class="regexp">/bin/</span>python2<span class="number">.7</span> <span class="regexp">/usr/</span>bin<span class="regexp">/python3.5dm-config /</span>usr<span class="regexp">/bin/</span>python3<span class="number">.5</span> <span class="regexp">/usr/</span>bin<span class="regexp">/python3.5m /</span>usr<span class="regexp">/bin/</span>python3<span class="number">.5</span>dm <span class="regexp">/usr/</span>bin<span class="regexp">/python3.5-dbg-config /</span>usr<span class="regexp">/lib/</span>python2<span class="number">.7</span> <span class="regexp">/usr/</span>lib<span class="regexp">/python3.5 /</span>etc<span class="regexp">/python /</span>etc<span class="regexp">/python2.7 /</span>etc<span class="regexp">/python3.5 /</span>usr<span class="regexp">/local/</span>bin<span class="regexp">/python3.7 /</span>usr<span class="regexp">/local/</span>bin<span class="regexp">/python3.7m /</span>usr<span class="regexp">/local/</span>bin<span class="regexp">/python3.7m-config /</span>usr<span class="regexp">/local/</span>lib<span class="regexp">/python3.7 /</span>usr<span class="regexp">/local/</span>lib<span class="regexp">/python2.7 /</span>usr<span class="regexp">/local/</span>lib<span class="regexp">/python3.5 /</span>usr<span class="regexp">/include/</span>python2<span class="number">.7</span> <span class="regexp">/usr/</span>include<span class="regexp">/python3.5m /</span>usr<span class="regexp">/include/</span>python3<span class="number">.5</span>dm <span class="regexp">/usr/</span>share<span class="regexp">/python /</span>usr<span class="regexp">/share/</span>man<span class="regexp">/man1/</span>python<span class="number">.1</span>.gz</span><br></pre></td></tr></table></figure><p></p><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><p>【功能】 查看<strong>可执行命令</strong>的路径</p><p>【语法】which COMMAND<br></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">admintor<span class="meta">@admintor</span>-<span class="string">PC:</span>~/Desktop$ which ps</span><br><span class="line"><span class="regexp">/usr/</span>bin/ps</span><br><span class="line">admintor<span class="meta">@admintor</span>-<span class="string">PC:</span>~/Desktop$ which python</span><br><span class="line"><span class="regexp">/usr/</span>bin/python</span><br></pre></td></tr></table></figure><p></p><h3 id="4-清除屏幕上显示的内容-clear"><a href="#4-清除屏幕上显示的内容-clear" class="headerlink" title="4.清除屏幕上显示的内容 - clear"></a>4.清除屏幕上显示的内容 - <strong>clear</strong></h3><h3 id="5-查看帮助文档-man-info-help-apropos"><a href="#5-查看帮助文档-man-info-help-apropos" class="headerlink" title="5.查看帮助文档 - man/info/help/apropos"></a>5.查看帮助文档 - <strong>man/info/help/apropos</strong></h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">admintor@admintor-PC:~/Desktop$ ps --help</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"> ps [options]</span><br><span class="line"></span><br><span class="line"> Try <span class="string">'ps --help &lt;simple|list|output|threads|misc|all&gt;'</span></span><br><span class="line">  <span class="keyword">or</span> <span class="string">'ps --help &lt;s|l|o|t|m|a&gt;'</span></span><br><span class="line"> <span class="keyword">for</span> additional help text.</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> more details see ps(1).</span><br><span class="line">admintor@admintor-PC:~/Desktop$ man ps</span><br><span class="line">PS(1)                                                   <span class="built_in"> User </span>Commands                                                    PS(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       ps - report a snapshot of the current processes.</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ps [options]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line"><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><h3 id="6-查看系统和主机名-uname-hostname"><a href="#6-查看系统和主机名-uname-hostname" class="headerlink" title="6.查看系统和主机名 - uname/hostname"></a>6.查看系统和主机名 - <strong>uname/hostname</strong></h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">admintor<span class="meta">@admintor</span>-<span class="string">PC:</span>~/Desktop$ uname</span><br><span class="line">Linux</span><br><span class="line">admintor<span class="meta">@admintor</span>-<span class="string">PC:</span>~/Desktop$ hostname</span><br><span class="line">admintor-PC</span><br></pre></td></tr></table></figure><h3 id="7-时间和日期-date-cal"><a href="#7-时间和日期-date-cal" class="headerlink" title="7.时间和日期 - date/cal"></a>7.时间和日期 - <strong>date/cal</strong></h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ date</span><br><span class="line"><span class="number">2020</span>年 <span class="number">02</span>月 <span class="number">08</span>日 星期六 <span class="number">15</span>:<span class="number">56</span>:<span class="number">50</span> CST</span><br><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ cal</span><br><span class="line">      二月 <span class="number">2020</span>         </span><br><span class="line">日 一 二 三 四 五 六  </span><br><span class="line">                   <span class="number">1</span>  </span><br><span class="line"> <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  </span><br><span class="line"> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>  </span><br><span class="line"><span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span>  </span><br><span class="line"><span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span>  </span><br><span class="line">                      </span><br><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ cal <span class="number">5</span> <span class="number">2017</span></span><br><span class="line">      五月 <span class="number">2017</span>         </span><br><span class="line">日 一 二 三 四 五 六  </span><br><span class="line">    <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  </span><br><span class="line"> <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span>  </span><br><span class="line"><span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span>  </span><br><span class="line"><span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span>  </span><br><span class="line"><span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span></span><br></pre></td></tr></table></figure><h3 id="8-重启和关机-reboot-shutdown"><a href="#8-重启和关机-reboot-shutdown" class="headerlink" title="8.重启和关机 - reboot/shutdown"></a>8.重启和关机 - <strong>reboot/shutdown</strong></h3><h3 id="9-退出登录-exit-logout"><a href="#9-退出登录-exit-logout" class="headerlink" title="9.退出登录 - exit/logout"></a>9.退出登录 - <strong>exit/logout</strong></h3><h3 id="10-查看历史命令-history"><a href="#10-查看历史命令-history" class="headerlink" title="10.查看历史命令 - history"></a>10.查看历史命令 - <strong>history</strong></h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ history</span><br><span class="line">...</span><br><span class="line"><span class="number">441</span>  whatis python</span><br><span class="line"><span class="number">442</span>  whereis ps</span><br><span class="line"><span class="number">443</span>  whereis python</span><br><span class="line"><span class="number">444</span>  which ps</span><br><span class="line"><span class="number">445</span>  which python</span><br><span class="line"><span class="number">446</span>  ps --help</span><br><span class="line"><span class="number">447</span>  man ps</span><br><span class="line"><span class="number">448</span>  uname</span><br><span class="line"><span class="number">449</span>  hostname</span><br><span class="line"><span class="number">450</span>  date</span><br><span class="line"><span class="number">451</span>  cal</span><br><span class="line"><span class="number">452</span>  cal <span class="number">5</span> <span class="number">2017</span></span><br><span class="line"><span class="number">453</span>  history</span><br><span class="line"><span class="symbol">admintor@</span>admintor-PC:~/Desktop$ !<span class="number">452</span></span><br></pre></td></tr></table></figure><blockquote><p>查看到历史命令后，可以用！历史命令编号来重新执行该命令；通过history -c 可以清除历史命令。</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>Linux学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题配置</title>
    <url>/2020/03/28/Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><p>该文介绍一些Next主题的配置信息<br><a id="more"></a></p><h2 id="页面显示问题"><a href="#页面显示问题" class="headerlink" title="页面显示问题"></a>页面显示问题</h2><h3 id="设置站点建立时间"><a href="#设置站点建立时间" class="headerlink" title="设置站点建立时间"></a>设置站点建立时间</h3><p>在 主题配置文件 中，搜索：since，修改 since 后面的值即可，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">since: 2013</span><br></pre></td></tr></table></figure><h3 id="subnav链接错误"><a href="#subnav链接错误" class="headerlink" title="subnav链接错误"></a>subnav链接错误</h3><p>修改主题配置文件后,运行时,出现subnav子导航 链接中多了%20这样的字样，这是主题内置字符串切割时出现错误，可以修改配置,将空格去掉,如： 将</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  # about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br></pre></td></tr></table></figure><p>改为:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;||home</span><br><span class="line">  # about: &#x2F;about&#x2F;||user</span><br><span class="line">  tags: &#x2F;tags&#x2F;||tags</span><br><span class="line">  categories: &#x2F;categories&#x2F;||th</span><br></pre></td></tr></table></figure><h3 id="站点概览中的链接错误-包括右边栏“日志”菜单部分URL的乱码"><a href="#站点概览中的链接错误-包括右边栏“日志”菜单部分URL的乱码" class="headerlink" title="站点概览中的链接错误(包括右边栏“日志”菜单部分URL的乱码)"></a>站点概览中的链接错误(包括右边栏“日志”菜单部分URL的乱码)</h3><p>在<strong>thems\next\layout_macro</strong>中，打开<strong>sidebar.swig</strong>文件，找到</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123; &#123; url_for(theme.menu.archives).split('\|\|')[0] | trim &#125; &#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123; &#123; url_for(theme.menu.archives.split('\|\|')[0]) | trim &#125; &#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文章目录编号显示问题"><a href="#文章目录编号显示问题" class="headerlink" title="文章目录编号显示问题"></a>文章目录编号显示问题</h3><p>在主题配置文件中找到 toc 节点，修改 number 为 false</p><h3 id="分页显示问题"><a href="#分页显示问题" class="headerlink" title="分页显示问题"></a>分页显示问题</h3><p><img src="/2020/03/28/Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/分页显示问题.png" alt="图片"></p><p>主题配置页面进入layout/_partials/pagination.swig,修改为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- if page.prev or page.next %&#125;</span><br><span class="line"> &lt;nav class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">   &#123;&#123;</span><br><span class="line">     paginator(&#123;</span><br><span class="line">       prev_text: &#39;&lt;i class&#x3D;&quot;fa fa-angle-left&quot; aria-label&#x3D;&quot;&#39;+__(&#39;accessibility.prev_page&#39;)+&#39;&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">       next_text: &#39;&lt;i class&#x3D;&quot;fa fa-angle-right&quot; aria-label&#x3D;&quot;&#39;+__(&#39;accessibility.next_page&#39;)+&#39;&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">       mid_size: 1,</span><br><span class="line">       escape: false</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;&#125;</span><br><span class="line"> &lt;&#x2F;nav&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="文章添加阴影"><a href="#文章添加阴影" class="headerlink" title="文章添加阴影"></a>文章添加阴影</h3><p>打开/themes/next/source/css/_custom/custom.styl，添加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Local-Search-本地搜索"><a href="#Local-Search-本地搜索" class="headerlink" title="Local Search 本地搜索"></a>Local Search 本地搜索</h3><p>在站点的根目录执行以下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>编辑站点配置文件，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>编辑主题配置文件，启用本地搜索功能：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="文章图片显示问题"><a href="#文章图片显示问题" class="headerlink" title="文章图片显示问题"></a>文章图片显示问题</h3><ol><li>设置站点配置文件_config.yml中 post_asset_folder:true。</li></ol><p>Hexo 提供了一种更方便管理 Asset 的设定：post_asset_folder当您设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹。</p><ol><li>安装插件：在hexo的目录下执行</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure><ol><li><p>完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。</p></li><li><p>文章中插入图片方式：</p></li></ol><ul><li>方式一：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;%asset_img example.jpg examplename&#125;</span><br></pre></td></tr></table></figure><ul><li>方式二：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">![description][<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>]:picture_path <span class="string">"picture_name"</span></span><br></pre></td></tr></table></figure><h3 id="文章内容显示不全"><a href="#文章内容显示不全" class="headerlink" title="文章内容显示不全"></a>文章内容显示不全</h3><p>在主题目录中，找到主题配置文件，搜索 motion，修改如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">motion:</span><br><span class="line">  enable: true</span><br><span class="line">  async: true</span><br></pre></td></tr></table></figure><h3 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h3><p>修改文件themes\next\source\css_common\components\post\post.styl，在末尾添加如下css样式，：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h2 id="页面背景设置"><a href="#页面背景设置" class="headerlink" title="页面背景设置"></a>页面背景设置</h2><p>打开文件 themes/next/source/css/_custom/custom.styl，添加：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 修改背景图片</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(https://source.unsplash.com/random/<span class="number">1600</span>x900?wallpapers);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">  <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改主体透明度</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改菜单栏透明度</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h2><p>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class&#x3D;&quot;fa fa-paw&quot;&gt;&lt;&#x2F;i&gt;感谢您的阅读-------------&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后,post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include 'passage-end-tag.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后打开主题配置文件（_config.yml),在末尾添加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h2 id="加入代码块复制功能"><a href="#加入代码块复制功能" class="headerlink" title="加入代码块复制功能"></a>加入代码块复制功能</h2><h3 id="添加-copy-code-swig-文件"><a href="#添加-copy-code-swig-文件" class="headerlink" title="添加 copy-code.swig 文件"></a>添加 copy-code.swig 文件</h3><p>在 themes/next/layout/_third-party/ 下，新建 copy-code.swig 文件，内容如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.codeblock.copy_button.enable %&#125;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .copy-btn &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      padding: <span class="number">6</span>px <span class="number">12</span>px;</span><br><span class="line">      font-size: <span class="number">13</span>px;</span><br><span class="line">      font-weight: <span class="number">700</span>;</span><br><span class="line">      line-height: <span class="number">20</span>px;</span><br><span class="line">      color: #333;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      background-color: #eee;</span><br><span class="line">      background-image: linear-gradient(#fcfcfc, #eee);</span><br><span class="line">      border: 1px solid #d5d5d5;</span><br><span class="line">      border-radius: <span class="number">3</span>px;</span><br><span class="line">      user-select: none;</span><br><span class="line">      outline: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .highlight-wrap .copy-btn &#123;</span><br><span class="line">      transition: opacity <span class="number">.3</span>s ease-<span class="keyword">in</span>-out;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">      padding: <span class="number">2</span>px <span class="number">6</span>px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: <span class="number">4</span>px;</span><br><span class="line">      top: <span class="number">8</span>px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .highlight-wrap:hover .copy-btn,</span><br><span class="line">    .highlight-wrap .copy-btn:focus &#123;</span><br><span class="line">      opacity: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .highlight-wrap &#123;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    $('.highlight').each(function (i, e) &#123;</span></span><br><span class="line"><span class="regexp">      var $wrap = $('&lt;div&gt;').addClass('highlight-wrap')</span></span><br><span class="line"><span class="regexp">      $(e).after($wrap)</span></span><br><span class="line"><span class="regexp">      $wrap.append($('&lt;button&gt;').addClass('copy-btn').append('&#123;&#123;__("post.copy_button")&#125;&#125;').on('click', function (e) &#123;</span></span><br><span class="line"><span class="regexp">        var code = $(this).parent().find('.code').find('.line').map(function (i, e) &#123;</span></span><br><span class="line"><span class="regexp">          return $(e).text()</span></span><br><span class="line"><span class="regexp">        &#125;).toArray().join('\n')</span></span><br><span class="line"><span class="regexp">        var ta = document.createElement('textarea')</span></span><br><span class="line"><span class="regexp">        document.body.appendChild(ta)</span></span><br><span class="line"><span class="regexp">        ta.style.position = 'absolute'</span></span><br><span class="line"><span class="regexp">        ta.style.top = '0px'</span></span><br><span class="line"><span class="regexp">        ta.style.left = '0px'</span></span><br><span class="line"><span class="regexp">        ta.value = code</span></span><br><span class="line"><span class="regexp">        ta.select()</span></span><br><span class="line"><span class="regexp">        ta.focus()</span></span><br><span class="line"><span class="regexp">        var result = document.execCommand('copy')</span></span><br><span class="line"><span class="regexp">        document.body.removeChild(ta)</span></span><br><span class="line"><span class="regexp">        &#123;% if theme.codeblock.copy_button.show_result %&#125;</span></span><br><span class="line"><span class="regexp">          if(result)$(this).text('&#123;&#123;__("post.copy_success")&#125;&#125;')</span></span><br><span class="line"><span class="regexp">          else $(this).text('&#123;&#123;__("post.copy_failure")&#125;&#125;')</span></span><br><span class="line"><span class="regexp">        &#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">        $(this).blur()</span></span><br><span class="line"><span class="regexp">      &#125;)).on('mouseleave', function (e) &#123;</span></span><br><span class="line"><span class="regexp">        var $b = $(this).find('.copy-btn')</span></span><br><span class="line"><span class="regexp">        setTimeout(function () &#123;</span></span><br><span class="line"><span class="regexp">          $b.text('&#123;&#123;__("post.copy_button")&#125;&#125;')</span></span><br><span class="line"><span class="regexp">        &#125;, 300)</span></span><br><span class="line"><span class="regexp">      &#125;).append(e)</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="编辑-layout-swig文件"><a href="#编辑-layout-swig文件" class="headerlink" title="编辑_layout.swig文件"></a>编辑_layout.swig文件</h3><p>返回上一层，在layout文件夹下，修改 _layout.swig，在\&lt;/body&gt;上面，加上：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% include <span class="string">'_third-party/copy-code.swig'</span> %&#125;</span><br></pre></td></tr></table></figure><h3 id="添加复制按钮显示的文字"><a href="#添加复制按钮显示的文字" class="headerlink" title="添加复制按钮显示的文字"></a>添加复制按钮显示的文字</h3><p>在 themes/next/languages/ 目录下，找到 在zh-CN.yml 或 在zh-Hans.yml 文件中的 post 节点，向其中添加：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">copy_button: 复制</span><br><span class="line">copy_success: 复制成功</span><br><span class="line">copy_failure: 复制失败</span><br></pre></td></tr></table></figure><p>在 en.yml 文件中同一节点位置，添加：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">copy_button: Copy</span><br><span class="line">copy_success: success</span><br><span class="line">copy_failure: Copy failed</span><br></pre></td></tr></table></figure><h3 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h3><p>更新 themes/next/_config.yml，添加：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  border_radius:</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line"><span class="code">    enable: true</span></span><br><span class="line"><span class="code">    # Show text copy result</span></span><br><span class="line"><span class="code">    show_result: true</span></span><br></pre></td></tr></table></figure><h2 id="流动线条"><a href="#流动线条" class="headerlink" title="流动线条"></a>流动线条</h2><p>在主题配置文件中，修改：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 动态线条效果，会向鼠标集中</span></span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  color: '0,0,255'        # color of lines, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)</span><br><span class="line">  pointColor: '249, 72, 137'     # color of points, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)</span><br><span class="line">  opacity: '0.8'               # the opacity of line (0~1), default: 0.5.</span><br><span class="line">  count: '99'                  # the number of lines, default: 99.</span><br><span class="line">  zIndex: '-2'                 # z-index property of the background, default: -1. 底层</span><br></pre></td></tr></table></figure><p>在文件 themes\next\layout_scripts\vendors.swig 中添加：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;# 动态线条效果 #&#125;</span><br><span class="line">&#123;% if theme.canvas<span class="emphasis">_nest &amp;&amp; theme.canvas_</span>nest.enable  %&#125;</span><br><span class="line">  &#123;% set js<span class="emphasis">_vendors.canvas_</span>nest  = 'canvas-nest/canvas-nest.min.js' %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span></span></span></span><br><span class="line"><span class="xml">    type="text/javascript"</span></span><br><span class="line"><span class="xml">    color="&#123;&#123; theme.canvas_nest.color &#125;&#125;"</span></span><br><span class="line"><span class="xml">    opacity="&#123;&#123; theme.canvas_nest.opacity &#125;&#125;"</span></span><br><span class="line"><span class="xml">    zIndex="&#123;&#123; theme.canvas_nest.zIndex &#125;&#125;"</span></span><br><span class="line"><span class="xml">    count="&#123;&#123; theme.canvas_nest.count &#125;&#125;"</span></span><br><span class="line"><span class="xml">    src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js" &gt;</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h2><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save-dev</span><br></pre></td></tr></table></figure><ul><li>在站点目录下的_config.yml的末尾，添加配置信息:</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># hexo-neat</span></span><br><span class="line"><span class="section"># 博文压缩</span></span><br><span class="line">neat_enable: true</span><br><span class="line"><span class="section"># 压缩html</span></span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:  #排除的文件</span><br><span class="line">  </span><br><span class="line"><span class="section"># 压缩css  跳过min.css</span></span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  # exclude:</span><br><span class="line"><span class="code">    # - '**/*.min.css'</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 压缩js 跳过min.js</span></span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  # exclude:</span><br><span class="line"><span class="code">    # - '**/*.min.js'</span></span><br><span class="line"><span class="code">    # - '**/jquery.fancybox.pack.js'</span></span><br><span class="line"><span class="code">    # - '**/index.js'  </span></span><br><span class="line"><span class="section"># 压缩博文配置结束</span></span><br><span class="line"><span class="section"># 注意上面的路径 **/* ,需要自己去配置正确的路径。，不然生成的是空白页面，当然你也可以删掉，全部压缩。</span></span><br></pre></td></tr></table></figure><h2 id="设置字数统计和预计阅读时间"><a href="#设置字数统计和预计阅读时间" class="headerlink" title="设置字数统计和预计阅读时间"></a>设置字数统计和预计阅读时间</h2><h3 id="方式一：post-wordcount-不推荐"><a href="#方式一：post-wordcount-不推荐" class="headerlink" title="方式一：post_wordcount(不推荐)"></a>方式一：post_wordcount(不推荐)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#打开cmd，进入博客根目录</span><br><span class="line"></span><br><span class="line"># 安装统计插件</span><br><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>主题配置文件：开启统计功能</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 实现字数统计和阅读时长的功能</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true # false&#x2F;true</span><br><span class="line">  min2read: true # false&#x2F;true</span><br><span class="line">  totalcount: false</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure><h3 id="方式二：symbols-count-time-推荐"><a href="#方式二：symbols-count-time-推荐" class="headerlink" title="方式二：symbols_count_time(推荐)"></a>方式二：symbols_count_time(推荐)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#打开cmd，进入博客根目录</span><br><span class="line"></span><br><span class="line"># 安装统计插件</span><br><span class="line">npm install hexo-symbols-count-time</span><br><span class="line"></span><br><span class="line">#下载</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time.git &#x2F;node_modules&#x2F;hexo-symbols-count-time</span><br><span class="line">#进入目录</span><br><span class="line">cd node_modules&#x2F;hexo-symbols-count-time</span><br><span class="line">#Test 测试</span><br><span class="line">npm install mocha chai --save-dev</span><br><span class="line">npm test</span><br><span class="line">#Tests with coverage 覆盖率测试</span><br><span class="line">npm install -g nyc</span><br><span class="line">nyc --print both node_modules&#x2F;.bin&#x2F;_mocha -- test&#x2F;index.js</span><br></pre></td></tr></table></figure><p>主题配置文件： 开启统计功能</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time</span><br><span class="line"># 实现字数统计和阅读时长的功能 （参考 https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time）</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false # false&#x2F;true # 总字数</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure><h3 id="方式三：不蒜子统计"><a href="#方式三：不蒜子统计" class="headerlink" title="方式三：不蒜子统计"></a>方式三：不蒜子统计</h3><p>主题配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 统计访客量以及文章阅读量</span><br><span class="line"># NexT主题集成了不蒜子统计功能</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true # false&#x2F;true 是否开启不蒜子统计功能</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  # 效果：本站访客数12345人次</span><br><span class="line">  site_uv: true</span><br><span class="line">  #本站访客数</span><br><span class="line">  site_uv_header: 本站访客数 &lt;i class&#x3D;&quot;fa fa-user&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  site_uv_footer: 人次</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  # 效果：本站总访问量12345次（一般不开启这个）</span><br><span class="line">  site_pv: true</span><br><span class="line">  #本站总访问量</span><br><span class="line">  site_pv_header: 本站总访问量 &lt;i class&#x3D;&quot;fa fa-eye&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  ## 效果：本文总阅读量12345次</span><br><span class="line">  page_pv: true</span><br><span class="line">  #本文总阅读量</span><br><span class="line">  page_pv_header: 本文总阅读量 &lt;i class&#x3D;&quot;fa fa-file-o&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure><p>hexo博客解决不蒜子统计无法显示问题：</p><p>首先需要先找到NexT下引用不蒜子统计的方法。文件路径为/theme/next/layout/_third-party/analytics/busuanzi-counter.swig文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--修改前--&gt;</span><br><span class="line">  &lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!--修改后--&gt;</span><br><span class="line">  &lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p>主题文件中搜索，post_copyright,改为true即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Declare license on posts</span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  license: CC BY-NC-SA 3.0</span><br><span class="line">  license_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;3.0&#x2F;</span><br></pre></td></tr></table></figure><h2 id="添加Live2D-萌宠"><a href="#添加Live2D-萌宠" class="headerlink" title="添加Live2D 萌宠"></a>添加Live2D 萌宠</h2><h3 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h3><p>进入到工程目录下，安装 Hexo 插件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure><h3 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h3><p>在 插件作者的博客 中挑选一个模型，记录该模型的名字。模型资源名称为 live2d-widget-model-模型名称，例如选择模型 shizuku ，则其对应的 Live2D 资源名称为 live2d-widget-model-shizuku，然后直接在站点根目录下安装该模型，命令如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku --save</span><br></pre></td></tr></table></figure><h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h3><p>编辑站点配置文件，添加以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Hexo plugin: hexo-helper-live2d</span><br><span class="line">## https:&#x2F;&#x2F;github.com&#x2F;EYHN&#x2F;hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true #控制live2d插件是否生效</span><br><span class="line">  pluginRootPath: live2dw&#x2F; # Root path of plugin to be on the site (Relative)</span><br><span class="line">  pluginJsPath: lib&#x2F; # JavaScript path related to plugin&#39;s root (Relative)</span><br><span class="line">  pluginModelPath: assets&#x2F; # Relative model path related to plugin&#39;s root (Relative)</span><br><span class="line">  scriptFrom: local # Default l2dwidget.js使用的CDN地址，local表示使用本地地址</span><br><span class="line">  #scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  #scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  #scriptFrom: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;live2d-widget@3.x&#x2F;lib&#x2F;L2Dwidget.min.js # Your custom url</span><br><span class="line">  tagMode: false # Whether only to replace live2d tag instead of inject to all pages</span><br><span class="line">  log: false # Whether to show logs in console</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku # npm-module package name</span><br><span class="line">    #use: wanko # folder name in (hexo base dir)&#x2F;live2d_models&#x2F;</span><br><span class="line">    #use: .&#x2F;wives&#x2F;wanko # folder path relative to hexo base dir</span><br><span class="line">    #use: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;live2d-widget-model-wanko@1.0.5&#x2F;assets&#x2F;wanko.model.json # Your custom url</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2 #超采样等级</span><br><span class="line">    width: 150 #宽度</span><br><span class="line">    height: 300 #canvas的高度</span><br><span class="line">    position: right #显示位置左或右</span><br><span class="line">    hOffset: 0 #canvas水平偏移</span><br><span class="line">    vOffset: -10 #canvas水平偏移</span><br><span class="line">  mobile:</span><br><span class="line">    show: false #控制是否在移动设备上显示</span><br><span class="line">    scale: 0.05 #移动设备上的缩放</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7 #默认透明度</span><br><span class="line">    opacityOnHover: 0.2 #鼠标移上透明度</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/weixin_41599858/java/article/details/104806723" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41599858/java/article/details/104806723</a></p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown数学公式语法</title>
    <url>/2020/04/17/Markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><p>Markdown数学公式繁多，不容易记，此文大致总结一下，以供以后翻阅。<br><a id="more"></a></p><p>公式用法：</p><ol><li>行内公式：将公式插入到本行中，符号$公式内容$.</li><li>独行公式：将公式插入到新的一行内，并且居中，符号<script type="math/tex">公式内容</script>。</li></ol><p>以下Markdown格式不加$,加上表示相应公式。</p><h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><div class="table-container"><table><thead><tr><th>类型</th><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>上标</td><td>^</td><td>x^4</td></tr><tr><td>下标</td><td>$p_1$</td><td>p_1</td></tr><tr><td>组合</td><td>$e^{k-1}$</td><td>e^{k-1}</td></tr></tbody></table></div><h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><div class="table-container"><table><thead><tr><th>类型</th><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>汉字形式</td><td>$V_{\mbox{初始}}$</td><td>V_{\mbox{初始}}</td></tr><tr><td>字体控制</td><td>$\displaystyle\frac{x+y}{y+z}$</td><td>\displaystyle\frac{x+y}{y+z}</td></tr><tr><td>下划线符号</td><td>$\underline{x+y}$</td><td>\underline{x+y}</td></tr><tr><td>标签</td><td>$\tag{11}$</td><td>\tag{11}</td></tr><tr><td>上大括号</td><td>$\overbrace{a+b+c+d}^{2.0}$</td><td>\overbrace{a+b+c+d}^{2.0}</td></tr><tr><td>下大括号</td><td>$a+\underbrace{b+c}_{1.0}+d$</td><td>a+\underbrace{b+c}_{1.0}+d</td></tr><tr><td>上位符号</td><td>$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</td><td>\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}</td></tr></tbody></table></div><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><div class="table-container"><table><thead><tr><th>类型</th><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>两个quad空格</td><td>$x \qquad y$</td><td>x \qquad y</td></tr><tr><td>quad空格</td><td>$x \quad y$</td><td>x \quad y</td></tr><tr><td>大空格</td><td>$x \ y$</td><td>x \ y</td></tr><tr><td>中空格</td><td>$x \: y$</td><td>x \\: y</td></tr><tr><td>小空格</td><td>$x \, y$</td><td>x \\, y</td></tr><tr><td>没有空格</td><td>$xy$</td><td>xy</td></tr><tr><td>紧贴</td><td>$x!y$</td><td>x\!y</td></tr></tbody></table></div><h2 id="定界符和组合"><a href="#定界符和组合" class="headerlink" title="定界符和组合"></a>定界符和组合</h2><div class="table-container"><table><thead><tr><th>类型</th><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>括号</td><td>$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</td><td>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</td></tr><tr><td>中括号</td><td>$[x+y]$</td><td>[x+y]</td></tr><tr><td>大括号</td><td>$\{x+y\}$</td><td>{x+y}</td></tr><tr><td>自适应括号</td><td>$\left(x\right)$，$\left(x{yz}\right)$</td><td>\left(x\right)$，$\left(x{yz}\right)</td></tr><tr><td>组合公式</td><td>${n+1 \choose k}={n \choose k}+{n \choose k-1}$</td><td>{n+1 \choose k}={n \choose k}+{n \choose k-1}</td></tr><tr><td>组合公式</td><td>$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots$</td><td>\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots</td></tr></tbody></table></div><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><div class="table-container"><table><thead><tr><th>类型</th><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>加法运算</td><td>$x+y=z$</td><td>x+y=z</td></tr><tr><td>减法运算</td><td>$x-y=z$</td><td>x-y=z</td></tr><tr><td>加减运算</td><td>$x \pm y=z$</td><td>x \pm y=z</td></tr><tr><td>减加运算</td><td>$x \mp y=z$</td><td>x \mp y=z</td></tr><tr><td>乘法运算</td><td>$x \times y=z$</td><td>x \times y=z</td></tr><tr><td>点乘运算</td><td>$x \cdot y=z$</td><td>x \cdot y=z</td></tr><tr><td>星乘运算</td><td>$x \ast y=z$</td><td>x \ast y=z</td></tr><tr><td>除法运算</td><td>$x \div y=z$</td><td>x \div y=z</td></tr><tr><td>斜除法运算</td><td>$x/y=z$</td><td>x/y=z</td></tr><tr><td>分式表示</td><td>$\frac{x+y}{y+z}$</td><td>\frac{x+y}{y+z}</td></tr><tr><td>分式表示</td><td>${x+y} \over {y+z}$</td><td>{x+y} \over {y+z}</td></tr></tbody></table></div><h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><div class="table-container"><table><thead><tr><th>类型</th><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>平均数运算</td><td>$\overline{xyz}$</td><td>\overline{xyz}</td></tr><tr><td>开二次方运算</td><td>$\sqrt x$</td><td>\sqrt x</td></tr><tr><td>开方运算</td><td>$\sqrt[3]{x+y}$</td><td>\sqrt[3]{x+y}</td></tr><tr><td>对数运算</td><td>$\log(x)$</td><td>\log(x)</td></tr><tr><td>极限运算</td><td>$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</td><td>\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}</td></tr><tr><td>极限运算</td><td>$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</td><td>\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}</td></tr><tr><td>求和运算</td><td>$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</td><td>\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}</td></tr><tr><td>求和运算</td><td>$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</td><td>\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}</td></tr><tr><td>积分运算</td><td>$\int^{\infty}_{0}{xdx}$</td><td>\int^{\infty}_{0}{xdx}</td></tr><tr><td>积分运算</td><td>$\displaystyle \int^{\infty}_{0}{xdx}$</td><td>\displaystyle \int^{\infty}_{0}{xdx}</td></tr><tr><td>微分运算</td><td>$\frac{\partial x}{\partial y}$</td><td>\frac{\partial x}{\partial y}</td></tr><tr><td>矩阵表示</td><td>$\left[\begin{matrix}a &amp; b &amp; c &amp; d &amp; e\\f &amp; g &amp; h &amp; i &amp; j \\k &amp; l &amp; m &amp; n &amp; o \\p &amp; q &amp; r &amp; s &amp; t\end{matrix} \right]$</td><td>\left[\begin{matrix}a &amp; b &amp; c &amp; d &amp; e\\f &amp; g &amp; h &amp; i &amp; j \\k &amp; l &amp; m &amp; n &amp; o \\p &amp; q &amp; r &amp; s &amp; t\end{matrix} \right]</td></tr></tbody></table></div><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><div class="table-container"><table><thead><tr><th>类型</th><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>等于运算</td><td>$x+y=z$</td><td>x+y=z</td></tr><tr><td>大于运算</td><td>$x+y&gt;z$</td><td>x+y&gt;z</td></tr><tr><td>小于运算</td><td>$x+y&lt;z$</td><td>x+y&lt;z</td></tr><tr><td>大于等于运算</td><td>$x+y \geq z$</td><td>x+y \geq z</td></tr><tr><td>小于等于运算</td><td>$x+y \leq z$</td><td>x+y \leq z</td></tr><tr><td>不等于运算</td><td>$x+y \neq z$</td><td>x+y \neq z</td></tr><tr><td>不大于等于运算</td><td>$x+y \ngeq z$</td><td>x+y \ngeq z</td></tr><tr><td>不大于等于运算</td><td>$x+y \not\geq z$</td><td>x+y \not\geq z</td></tr><tr><td>不小于等于运算</td><td>$x+y \not\geq z$</td><td>x+y \not\geq z</td></tr><tr><td>不小于等于运算</td><td>$x+y \nleq z$</td><td>x+y \nleq z</td></tr><tr><td>约等于运算</td><td>$x+y \approx z$</td><td>x+y \approx z</td></tr><tr><td>恒等于运算</td><td>$x+y \equiv z$</td><td>x+y \equiv z</td></tr></tbody></table></div><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><div class="table-container"><table><thead><tr><th>类型</th><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>属于运算</td><td>$x \in y$</td><td>x \in y</td></tr><tr><td>不属于运算</td><td>$x \notin y$</td><td>x \notin y</td></tr><tr><td>子集运算</td><td>$x \subset y$</td><td>x \subset y</td></tr><tr><td>子集运算</td><td>$x \supset y$</td><td>x \supset y</td></tr><tr><td>真子集运算</td><td>$x \subseteq y$</td><td>x \subseteq y</td></tr><tr><td>非真子集运算</td><td>$x \subsetneq y$</td><td>x \subsetneq y</td></tr><tr><td>真子集运算</td><td>$x \supseteq y$</td><td>x \supseteq y</td></tr><tr><td>非真子集运算</td><td>$x \supsetneq y$</td><td>x \supsetneq y</td></tr><tr><td>非子集运算</td><td>$x \not\subset y$</td><td>x \not\subset y</td></tr><tr><td>非子集运算</td><td>$x \not\supset y$</td><td>x \not\supset y</td></tr><tr><td>并集运算</td><td>$x \cup y$</td><td>x \cup y</td></tr><tr><td>交集运算</td><td>$x \cap y$</td><td>x \cap y</td></tr><tr><td>差集运算</td><td>$x \setminus y$</td><td>x \setminus y</td></tr><tr><td>同或运算</td><td>$x \bigodot y$</td><td>x \bigodot y</td></tr><tr><td>同与运算</td><td>$x \bigotimes y$</td><td>x \bigotimes y</td></tr><tr><td>实数集合</td><td>$\mathbb{R}$</td><td>\mathbb{R}</td></tr><tr><td>自然数集合</td><td>$\mathbb{Z}$</td><td>\mathbb{Z}</td></tr><tr><td>空集</td><td>$\emptyset$</td><td>\emptyset</td></tr></tbody></table></div><h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><div class="table-container"><table><thead><tr><th>类型</th><th>算式</th><th>Markdown</th></tr></thead><tbody><tr><td>无穷</td><td>$\infty$</td><td>\infty</td></tr><tr><td>虚数</td><td>$\imath$</td><td>\imath</td></tr><tr><td>虚数</td><td>$\jmath$</td><td>\jmath</td></tr><tr><td>数学符号</td><td>$\hat{a}$</td><td>\hat{a}</td></tr><tr><td>数学符号</td><td>$\check{a}$</td><td>\check{a}</td></tr><tr><td>数学符号</td><td>$\breve{a}$</td><td>\breve{a}</td></tr><tr><td>数学符号</td><td>$\tilde{a}$</td><td>\tilde{a}</td></tr><tr><td>数学符号</td><td>$\bar{a}$</td><td>\bar{a}</td></tr><tr><td>矢量符号</td><td>$\vec{a}$</td><td>\vec{a}</td></tr><tr><td>数学符号</td><td>$\acute{a}$</td><td>\acute{a}</td></tr><tr><td>数学符号</td><td>$\grave{a}$</td><td>\grave{a}</td></tr><tr><td>数学符号</td><td>$\mathring{a}$</td><td>\mathring{a}</td></tr><tr><td>一阶导数符号</td><td>$\dot{a}$</td><td>\dot{a}</td></tr><tr><td>二阶导数符号</td><td>$\ddot{a}$</td><td>\ddot{a}</td></tr><tr><td>上箭头</td><td>$\uparrow$/$\Uparrow$</td><td>\uparrow / \Uparrow</td></tr><tr><td>下箭头</td><td>$\downarrow$ / $\Downarrow$</td><td>\downarrow / \Downarrow</td></tr><tr><td>左箭头</td><td>$\leftarrow$ / $\Leftarrow$</td><td>\leftarrow / \Leftarrow</td></tr><tr><td>右箭头</td><td>$\rightarrow$ / $\Rightarrow$</td><td>\rightarrow / \Rightarrow</td></tr><tr><td>低端对齐省略号</td><td>$1,2,\ldots,n$</td><td>1,2,\ldots,n</td></tr><tr><td>中线对齐省略号</td><td>$x_1^2 + x_2^2 + \cdots + x_n^2$</td><td>x_1^2 + x_2^2 + \cdots + x_n^2</td></tr><tr><td>竖直对齐省略号</td><td>$\vdots$</td><td>\vdots</td></tr><tr><td>斜对齐省略号</td><td>$\ddots$</td><td>\ddots</td></tr></tbody></table></div><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><div class="table-container"><table><thead><tr><th>字母</th><th>实现</th><th>字母</th><th>实现</th></tr></thead><tbody><tr><td>$A$</td><td>A</td><td>$\alpha$</td><td>\alpha</td></tr><tr><td>$B$</td><td>B</td><td>$\beta$</td><td>\beta</td></tr><tr><td>$\Gamma$</td><td>\Gamma</td><td>$\gamma$</td><td>\gamma</td></tr><tr><td>$\Delta$</td><td>\Delta</td><td>$\delta$</td><td>\delta</td></tr><tr><td>$E$</td><td>E</td><td>$\epsilon$</td><td>\epsilon</td></tr><tr><td>$Z$</td><td>Z</td><td>$\zeta$</td><td>\zeta</td></tr><tr><td>$H$</td><td>H</td><td>$\eta$</td><td>\eta</td></tr><tr><td>$\Theta$</td><td>\Theta</td><td>$\theta$</td><td>\theta</td></tr><tr><td>$I$</td><td>I</td><td>$\iota$</td><td>\iota</td></tr><tr><td>$K$</td><td>K</td><td>$\kappa$</td><td>\kappa</td></tr><tr><td>$\Lambda$</td><td>\Lambda</td><td>$\lambda$</td><td>\lambda</td></tr><tr><td>$M$</td><td>M</td><td>$\mu$</td><td>\mu</td></tr><tr><td>$N$</td><td>N</td><td>$\nu$</td><td>\nu</td></tr><tr><td>$\Xi$</td><td>\Xi</td><td>$\xi$</td><td>\xi</td></tr><tr><td>$O$</td><td>O</td><td>$\omicron$</td><td>\omicron</td></tr><tr><td>$\Pi$</td><td>\Pi</td><td>$\pi$</td><td>\pi</td></tr><tr><td>$P$</td><td>P</td><td>$\rho$</td><td>\rho</td></tr><tr><td>$\Sigma$</td><td>\Sigma</td><td>$\sigma$</td><td>\sigma</td></tr><tr><td>$T$</td><td>T</td><td>$\tau$</td><td>\tau</td></tr><tr><td>$\Upsilon$</td><td>\Upsilon</td><td>$\upsilon$</td><td>\upsilon</td></tr><tr><td>$\Phi$</td><td>\Phi</td><td>$\phi$</td><td>\phi</td></tr><tr><td>$X$</td><td>X</td><td>$\chi$</td><td>\chi</td></tr><tr><td>$\Psi$</td><td>\Psi</td><td>$\psi$</td><td>\psi</td></tr><tr><td>$\Omega$</td><td>\Omega</td><td>$\omega$</td><td>\omega</td></tr></tbody></table></div><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>RSA算法</title>
    <url>/2020/04/17/RSA%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><p>1976年以前，所有的加密方法都是对称加密算法。这种算法加密和解密使用的是同一个密钥。这种模式密钥的传递很不安全。</p><p>1977年，两位美国计算机学家 Whitfield Diffie 和 Martin Hellman，提出了一种新的构思，可以在不传递密钥的情况下，完成解密。这被称为 <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange" target="_blank" rel="noopener">Diffie-Hellman 密钥交换算法</a>。这个构思引出了后来的非对称加密模式。</p><p><img src="/2020/04/17/RSA%E7%AE%97%E6%B3%95/twoScients.png" alt="8e532e24d152a59efc7492e033e74c47.png"></p><a id="more"></a><p>1977年，三位数学家 Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。算法用他们三个人名字命名，叫RSA算法。直到现在，依旧目前最广泛使用的非对称加密算法。<br><img src="/2020/04/17/RSA%E7%AE%97%E6%B3%95/threeScients.png" alt="12e42a5376ea5c0af9ac6a8dc20a068d.png"></p><h2 id="算法所需知识"><a href="#算法所需知识" class="headerlink" title="算法所需知识"></a>算法所需知识</h2><h3 id="互质关系"><a href="#互质关系" class="headerlink" title="互质关系"></a>互质关系</h3><p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是<a href="https://zh.wikipedia.org/zh-cn/%E4%BA%92%E8%B3%AA" target="_blank" rel="noopener">互质关系</a>.</p><p>关于互质可以得到以下结论：</p><ul><li>任意两个制数构成互质关系，比如13和61.</li><li>一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，如3和10。</li><li>如果两个数中，较大的那个数是质数，则两者构成互质关系，如97和57。</li><li>1和任意一个自然数都是互质关系，如1和99。</li><li>p是大于1的整数，则p和p-1构成互质关系，如57和56。</li><li>p是大于1的奇数，则p和p-2构成互质关系，如17和15。</li></ul><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>请思考以下问题：</p><pre><code>任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？（比如，在1到8之中，有多少个数与8构成互质关系？）
</code></pre><p>计算这个值的方法就是<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">欧拉函数</a>，以φ(n)表示。在1到8之中，与8形成互质关系的是1、3、5、7，所以 φ(n) = 4。</p><p>对于φ(n)的计算有如下方式：</p><ul><li>当n=1时，则φ(1) = 1.因为1与任何数（包括自身）都构成互质关系。</li><li>当n是质数，则φ(n) = n-1。因为质数与小于它的每一个数，都构成互质关系。如5与1、2、3、4都构成互质关系。</li><li>如果n是质数的某一次方，即n = p^k(p为质数，k为大于等于1的整数).则$\phi(p^k) = p^k-p^{k-1}$</li></ul><p>比如φ(8) = φ(2^3) = 2^3 - 2^2 = 8-4 = 4.<br>这是因为只有当一个数不包含质数p，才可能与n互质。而包含质数p的数一共有p^(k-1)个，即1×p、2×p、3×p、…、p^(k-1)×p，把它们去除，剩下的就是与n互质的数。<br>上面的式子还可以写成下面的形式：</p><script type="math/tex;mode=display">\phi(p^k) = p^k-p^{k-1} = p^k(1-1/p)</script><p>可以看出，上面第二条是k=1时的特例。</p><ul><li>如果n可以分解成两个互质的整数之积，n = p1 × p2，则φ(n) = φ(p1p2) = φ(p1)φ(p2) 即积的欧拉函数等于各个因子的欧拉函数之积。</li><li>因为任意一共大于1的正整数，都可以写成一系列质数的积。`</li></ul><script type="math/tex;mode=display">n = p_1^{k_1}p_2^{k_2}...p_r^{k_r}</script><p>根据第四点得到：</p><script type="math/tex;mode=display">\phi(n) = \phi(p_1^{k_1})\phi(p_2^{k_2})...\phi(p_r^{k_r})</script><p>再根据第三点结论得到：</p><script type="math/tex;mode=display">\phi(n) = p_1^{k_1}p_2^{k_2}...p_r^{k_r}(1-1/{p_1})(1-1/{p_2})...(1-1/{p_r})</script><p>也就等于:</p><script type="math/tex;mode=display">\phi(n) = n(1-1/{p_1})(1-1/{p_2})...(1-1/{p_r})</script><p>这就是欧拉函数的通用计算公式。</p><h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>欧拉函数的用处，在于<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86_(%E6%95%B0%E8%AE%BA" target="_blank" rel="noopener">欧拉定理</a>)。欧拉定理指，</p><p>如果两个正整数a和n互质，则n的欧拉函数 φ(n) 可以让下面的等式成立：</p><script type="math/tex;mode=display">a^{\phi(n)} ≡ 1\,(mod\,\phi(n))</script><p>也就是说，a的φ(n)次方被n除的余数为1。或者说，a的φ(n)次方减去1，可以被n整除。比如，3和7互质，而7的欧拉函数φ(7)等于6，所以3的6次方（729）减去1，可以被7整除（728/7=104）。</p><p>欧拉定理有一个特殊的情况。</p><p>假设正整数a与质数p互质，因为质数p的φ(p)等于p-1，则欧拉定理可以写成</p><script type="math/tex;mode=display">a^{p-1} ≡ 1\,(mod\,p)</script><p>这就是著名的<a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">费马小定理</a>。它是欧拉定理的特例。</p><h3 id="模反元素"><a href="#模反元素" class="headerlink" title="模反元素"></a>模反元素</h3><p>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1。</p><script type="math/tex;mode=display">ab ≡ 1\,(mod\,n)</script><p>欧拉定理可以用来证明模反元素必然存在。</p><script type="math/tex;mode=display">a^{\phi(n)} = a\times a^{\phi(n)-1} ≡ 1\,(mod\,n)</script><p>可以看到，a的 φ(n)-1 次方，就是a的模反元素。</p><h2 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h2><p>假设爱丽丝和鲍勃进行加密通信，怎么生成公钥和私钥呢？<br><img src="/2020/04/17/RSA%E7%AE%97%E6%B3%95/communicate.png" alt="61a50ac1a0ee63f955b48ce00e97fa86.png"></p><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><h4 id="1-随机选择两个不想等的质数p和q"><a href="#1-随机选择两个不想等的质数p和q" class="headerlink" title="1.随机选择两个不想等的质数p和q"></a>1.随机选择两个不想等的质数p和q</h4><p>爱丽丝选择了61和53.（实际应用中，这两个质数越大，就越难破解）。</p><h4 id="2-计算p和q的乘积n"><a href="#2-计算p和q的乘积n" class="headerlink" title="2.计算p和q的乘积n"></a>2.计算p和q的乘积n</h4><p>爱丽丝把61和53相乘。<br>n = 61×53 = 3233</p><p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。</p><h4 id="3-计算n的欧拉函数φ-n"><a href="#3-计算n的欧拉函数φ-n" class="headerlink" title="3.计算n的欧拉函数φ(n)"></a>3.计算n的欧拉函数φ(n)</h4><p>根据公式：φ(n) = （p-1）（q-1）<br>算出 φ(3233) 为 3120.</p><h4 id="4-随机选择一个整数e，条件是1-lt-e-lt-φ-n-且e与φ-n-互质"><a href="#4-随机选择一个整数e，条件是1-lt-e-lt-φ-n-且e与φ-n-互质" class="headerlink" title="4.随机选择一个整数e，条件是1&lt;e&lt;φ(n),且e与φ(n)互质"></a>4.随机选择一个整数e，条件是1&lt;e&lt;φ(n),且e与φ(n)互质</h4><p>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p><h4 id="5-计算e对于φ-n-的模反元素d"><a href="#5-计算e对于φ-n-的模反元素d" class="headerlink" title="5.计算e对于φ(n)的模反元素d"></a>5.计算e对于φ(n)的模反元素d</h4><p>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</p><p>ed ≡ 1 (mod φ(n)),</p><p>这个式子等价于</p><p>ed - 1 = kφ(n)</p><p>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解</p><p>ex + φ(n)y = 1<br>爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</p><p>至此所有计算完成。</p><h4 id="讲n和e封装成公钥，n和d封装成私钥"><a href="#讲n和e封装成公钥，n和d封装成私钥" class="headerlink" title="讲n和e封装成公钥，n和d封装成私钥"></a>讲n和e封装成公钥，n和d封装成私钥</h4><p>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。</p><p>实际应用中，公钥和私钥的数据都采用ASN.1格式表达（实例）。</p><h3 id="加密和解密"><a href="#加密和解密" class="headerlink" title="加密和解密"></a>加密和解密</h3><h4 id="用公钥加密"><a href="#用公钥加密" class="headerlink" title="用公钥加密"></a>用公钥加密</h4><p>假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。</p><p>可以得到以下式子c：</p><script type="math/tex;mode=display">{m^e} ≡ c \,(\,mod\,n)</script><h4 id="用私钥解密"><a href="#用私钥解密" class="headerlink" title="用私钥解密"></a>用私钥解密</h4><p>爱丽丝拿到鲍勃发来的密文以后，就用自己的私钥（n，d）进行解密。可以证明，下面的等式一定成立：</p><script type="math/tex;mode=display">c^d ≡ m\,(mod\,n)</script><p>本文参考：<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text3 配置pyhon环境</title>
    <url>/2020/03/13/Sublime-Text3-%E9%85%8D%E7%BD%AEpyhon%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="Sublime-Text3-配置python环境详解。"><a href="#Sublime-Text3-配置python环境详解。" class="headerlink" title="Sublime Text3 配置python环境详解。"></a>Sublime Text3 配置python环境详解。</h3><a id="more"></a><h4 id="Sublime-Text3配置python环境"><a href="#Sublime-Text3配置python环境" class="headerlink" title="Sublime Text3配置python环境"></a>Sublime Text3配置python环境</h4><p>安装参考以前文章，下面说配置</p><p>打开安装好的 sublime text 3，选择编译环境<br><img src="/2020/03/13/Sublime-Text3-%E9%85%8D%E7%BD%AEpyhon%E7%8E%AF%E5%A2%83/SublimePython01.png" alt="0e3b5e9cfb36e436416f187edb061fd0.png"></p><p>然后输入</p><blockquote><p>print(“你好”)</p></blockquote><p>然后保存为.py后缀文件</p><p>回到主界面，Ctrl+B运行</p><p><img src="/2020/03/13/Sublime-Text3-%E9%85%8D%E7%BD%AEpyhon%E7%8E%AF%E5%A2%83/SublimePython02.png" alt="89d3fe035435cc1dc56fff80ffd225fc.png"></p><p>中文成功输出，证明配置好了，但还需要按一个插件来支持 input</p><p>安装SublimeREPL插件，使Sublime支持input</p><p>安装好，试着调用。</p><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">num</span> = <span class="function"><span class="title">input</span>(<span class="string">"今天几月几日:"</span>)</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="variable">num</span>)</span></span><br></pre></td></tr></table></figure><p>跟 Ctrl+B 直接编译不同，利用插件来编译需要先手动 Ctrl+S 保存</p><p><strong>常规调用：</strong></p><p><img src="/2020/03/13/Sublime-Text3-%E9%85%8D%E7%BD%AEpyhon%E7%8E%AF%E5%A2%83/SublimePython03.png" alt="69d5a1b9e9dfe5c1aff1d2e1e1775f36.png"></p><p>然后弹出一个新的框，进行输入输出。</p><p><img src="/2020/03/13/Sublime-Text3-%E9%85%8D%E7%BD%AEpyhon%E7%8E%AF%E5%A2%83/SublimePython04.png" alt="fbe8fc6a38764b3605c069357dafdf37.png"></p><p><strong>设置快捷键调用：</strong></p><p><img src="/2020/03/13/Sublime-Text3-%E9%85%8D%E7%BD%AEpyhon%E7%8E%AF%E5%A2%83/SublimePython05.png" alt="ded30527af9e541ca4cf0e79bf907cf2.png"></p><p>左边是系统默认设置，我们在右边窗口输入以下设置（另一个 Alt + End 是终止编译的快捷键），Ctrl+S 保存</p><p><img src="/2020/03/13/Sublime-Text3-%E9%85%8D%E7%BD%AEpyhon%E7%8E%AF%E5%A2%83/SublimePython06.png" alt="bc715187792b855d583c10db6cc44403.png"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[ </span><br><span class="line"><span class="code">    &#123; </span></span><br><span class="line"><span class="code">        "keys": ["f4"], </span></span><br><span class="line"><span class="code">        "caption": "SublimeREPL: Python - RUN current file", </span></span><br><span class="line"><span class="code">        "command": "run_existing_windoww_command", </span></span><br><span class="line"><span class="code">        "args": &#123; </span></span><br><span class="line"><span class="code">            "id": "repl_python_run", </span></span><br><span class="line"><span class="code">            "file": "config/Python/Main.sublime-menu"</span></span><br><span class="line"><span class="code">        &#125; </span></span><br><span class="line"><span class="code">    &#125;,</span></span><br><span class="line"><span class="code">        &#123; </span></span><br><span class="line"><span class="code">            "keys": ["alt+end"], </span></span><br><span class="line"><span class="code">            "command": "exec", </span></span><br><span class="line"><span class="code">            "args": &#123;"kill": true&#125; </span></span><br><span class="line"><span class="code">        &#125; </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>切换不方便，可以打开两个视图：</p><p><img src="/2020/03/13/Sublime-Text3-%E9%85%8D%E7%BD%AEpyhon%E7%8E%AF%E5%A2%83/SublimePython07.png" alt="c33682bb046be44ffbe99139d83ea249.png"></p><p>本文参考：<br>链接：<a href="https://www.zhihu.com/question/22904994/answer/800236870" target="_blank" rel="noopener">https://www.zhihu.com/question/22904994/answer/800236870</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>binwalk安装使用</title>
    <url>/2020/01/18/binwalk%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><p>网上也有这个安装教程，我是看完之后根据自己的安装总结一下。以备以后使用。<br>这个软件就是对图片进行分析，看是否包含有文件压缩包。<br><a id="more"></a></p><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a><strong>1.下载</strong></h4><p>github项目：<a href="https://github.com/devttys0/binwalk" target="_blank" rel="noopener">安装链接</a><br>需要已经下载python，python2或python3都行。<br>下载完zip文件，下载完解压。</p><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a><strong>2.安装</strong></h4><p>打开文件夹，在目录里按<strong>Shift+右键</strong>，打开命令窗口。输入<br><strong>python setup.py install</strong><br>安装完成</p><h4 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a><strong>3.配置</strong></h4><p>到自己到python安装目录找到Script目录，打开，因为刚刚已经安装完成，所以里面应该有叫binwalk的没有后缀的文件。根据我的经验，可以不用理他。因为按照正常方式，要是需要用binwalk，需要输入命令比较多一点，想简单一点，可以按照下面的方法。（也是根据网上的一些教程来的，感觉这个挺方便的）。</p><p>新建一个文件夹（可以在python那个安装目录），并把文件夹的路径加入到系统变量path里（这样在cmd里就可以直接运行了。）<br>在文件夹里新建一个binwalk.bat文件，内容为以下代码。（代码来自网上教程，自己操作过，莫得问题）</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="title">@echo</span> off</span><br><span class="line">echo * suggest: you'd better <span class="keyword">to</span> input the parameters enclosed in <span class="keyword">double</span> quotes.echo * made by pcat</span><br><span class="line">python <span class="string">"%~dp0\p_binwalk.py"</span> <span class="symbol">%1</span> <span class="symbol">%2</span> <span class="symbol">%3</span> <span class="symbol">%4</span> <span class="symbol">%5</span> <span class="symbol">%6</span> <span class="symbol">%7</span> <span class="symbol">%8</span> <span class="symbol">%9</span></span><br></pre></td></tr></table></figure><p>再新建一个p_binwalk.py文件<br></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import binwalk</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    lst=sys.argv</span><br><span class="line">    <span class="keyword">if</span> len(lst)&lt;<span class="number">2</span>:</span><br><span class="line">        print(<span class="string">"No files."</span>)</span><br><span class="line">        <span class="keyword">exit</span>()</span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">if</span> lst[<span class="number">1</span>][<span class="number">0</span>]==<span class="string">'-'</span>:</span><br><span class="line">            binwalk.scan(*lst[<span class="number">2</span>:],signature=lst[<span class="number">1</span>])</span><br><span class="line">        elif lst[<span class="number">1</span>][<span class="number">0</span>]!=<span class="string">'-'</span>:</span><br><span class="line">            binwalk.scan(*lst[<span class="number">1</span>:],signature=True)</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><br>只要这个文件夹的路径在系统变量path里和这2个文件存在着，那么你就可以在cmd里像linux那样使用binwalk了。<p></p><h4 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4.常用命令"></a><strong>4.常用命令</strong></h4><p>-e 分解出压缩包<br></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">binwalk -e <span class="number">555.</span>gif</span><br></pre></td></tr></table></figure><br>-D或者—dd分解某种类型的文件（在windows里要用双括号括起来）<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">binwalk </span>-D=<span class="keyword">jpeg </span><span class="number">555</span>.gif</span><br></pre></td></tr></table></figure><br>-M 递归分解扫描出来的文件（得跟-e或者-D配合使用）<p></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">binwalk -eM <span class="number">555.</span>gif</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text3 Markdown插件</title>
    <url>/2020/03/13/Sublime-Text3-Markdown%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="Sublime-Text3-Markdown插件推荐"><a href="#Sublime-Text3-Markdown插件推荐" class="headerlink" title="Sublime Text3 Markdown插件推荐"></a>Sublime Text3 Markdown插件推荐</h3><a id="more"></a><h3 id="Markdown插件安装"><a href="#Markdown插件安装" class="headerlink" title="Markdown插件安装"></a>Markdown插件安装</h3><div class="table-container"><table><thead><tr><th>插件</th><th>功能</th></tr></thead><tbody><tr><td>MarkdownEditing</td><td>一个提高Sublime中Markdown编辑特性的插件</td></tr><tr><td>MarkdownPreview</td><td>Markdown转HTML，提供在浏览器中的预览功能</td></tr><tr><td>MarkdownLivePreview</td><td>提供在编辑框中实时预览的功能</td></tr><tr><td>LiveReload</td><td>一个提供md/html等文档的实时刷新预览的插件</td></tr></tbody></table></div><h4 id="MarkdownEditing"><a href="#MarkdownEditing" class="headerlink" title="MarkdownEditing"></a>MarkdownEditing</h4><h5 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h5><p>可以高亮显示Markdown语法还支持很多编程语言的语法高亮显示。</p><p><strong>特别注意</strong>：MarkdownEditing只针对 md\mdown\mmd\txt 格式文件才启用。</p><h5 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h5><p><img src="/2020/03/13/Sublime-Text3-Markdown%E6%8F%92%E4%BB%B6/01.png" alt="2c15bc4a4995c73ffedb34f232b4af24.png"></p><h4 id="安装报错解决："><a href="#安装报错解决：" class="headerlink" title="安装报错解决："></a>安装报错解决：</h4><p>报错问题<br><img src="/2020/03/13/Sublime-Text3-Markdown%E6%8F%92%E4%BB%B6/02.png" alt="65ed9cb9ead31696bfbf1192852fa61b.png"></p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>./Data/Local/ 清理掉<br>Session.sublime_session<br>Auto Save Session.sublime_session</p><p>去Local文件夹里删除掉这两个文件，我的只有第一个，删除后重启就可以。</p><h4 id="MarkdownLivePreview"><a href="#MarkdownLivePreview" class="headerlink" title="MarkdownLivePreview"></a>MarkdownLivePreview</h4><h5 id="功能：-1"><a href="#功能：-1" class="headerlink" title="功能："></a>功能：</h5><p>实时预览Markdown文件，左侧为md文件，右侧为预览结果。</p><h5 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h5><p>MarkdownLivePreview默认关闭实时预览，既然安装这个插件了，那肯定是要用的。打开方式为在Preferences -&gt; Package Settings -&gt; MarkdownLivePreview -&gt; Settings 的设置的右侧加一条 “markdown_live_preview_on_open”: true,，重启sublime即可。</p><p>为什么不能直接将左侧对应的false改为true，这是因为左侧为默认配置，是不能改的（只读），右侧的编辑区才是用户自定义区。</p><h5 id="效果图：-1"><a href="#效果图：-1" class="headerlink" title="效果图："></a>效果图：</h5><p><img src="/2020/03/13/Sublime-Text3-Markdown%E6%8F%92%E4%BB%B6/03.png" alt="219e1ca6d2f5d2d1ac54fa50e086acb3.png"></p><p>但是预览效果并不是很好，不能横向滚动。推荐下面插件。</p><h5 id="MarkdownPreview"><a href="#MarkdownPreview" class="headerlink" title="MarkdownPreview"></a>MarkdownPreview</h5><h6 id="将md文件用浏览器预览——1-常规方法"><a href="#将md文件用浏览器预览——1-常规方法" class="headerlink" title="将md文件用浏览器预览——1.常规方法"></a>将md文件用浏览器预览——1.常规方法</h6><p>1 组合键 Ctrl+Shift+P 调出命令面板</p><p>2 输入mdp找到并选中Markdown Preview： Preview in Browser</p><p>3 出现两个选项：github和markdown。任选其一即可，github是利用GitHub的在线API来解析.md文件，支持在线资源的预览，如在线图片它的解析速度取决于你的联网速度。该方式据说一天只能打开60次。markdown就是传统的本地打开，不支持在线资源的预览。</p><p>4 默认浏览器中显示预览结果</p><h6 id="将md文件用浏览器预览——2-用快捷键打开"><a href="#将md文件用浏览器预览——2-用快捷键打开" class="headerlink" title="将md文件用浏览器预览——2.用快捷键打开"></a>将md文件用浏览器预览——2.用快捷键打开</h6><p>Sublime Text支持自定义快捷键，Markdown</p><p>Preview默认没有快捷键，我们可以自己为Markdown Preview： Preview in Browser设置快捷键。</p><p>方法是在Preferences -&gt; Key Bindings打开的文件的右侧栏的中括号中添加一行代码：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"keys"</span>: [<span class="string">"alt+m"</span>],  </span><br><span class="line">    <span class="attr">"command"</span>:<span class="string">"markdown_preview"</span>,</span><br><span class="line">    <span class="attr">"args"</span>: </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"target"</span>: <span class="string">"browser"</span>,      </span><br><span class="line">            <span class="attr">"parser"</span>:<span class="string">"markdown"</span></span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里：</p><blockquote><p>“alt+m” 可设置为自己喜欢的按键。”parser”: “markdown”也可设置为”parser”:”github”，改为使用Github在线API解析markdown</p></blockquote><p>以上两种方式都有个问题：每次预览都要打开一个新的网页，而且需要手动操作。有没有一个方法，可以打开一个网页后，之后再也不用管，让它实时刷新预览呢？</p><p>有，还很简单，答案就是MarkdownPreview+LiveReload！<br>LiveReload是一个可实时刷新的插件，不仅可用于Markdown，也可用于HTML等。</p><h5 id="最强）实时自动刷新预览：MarkdownPreview-LiveReload"><a href="#最强）实时自动刷新预览：MarkdownPreview-LiveReload" class="headerlink" title="(最强）实时自动刷新预览：MarkdownPreview+LiveReload"></a>(最强）实时自动刷新预览：MarkdownPreview+LiveReload</h5><p><strong>先安装并配置Markdown Preview</strong></p><p>如前Markdown Preview安装成功后，设置前文所述的快捷键（如需），打开其配置文件 Preferences -&gt; Package Settings -&gt; Markdown Preview -&gt; Settings，检查左侧enable_autoreload条目是否为true，若是，跳过。若不是，右侧栏加一条下面这个后重启Sublime:<br></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"enable_autoreload"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>安装并配置LiveReload</strong><p></p><p>Ctrl+Shift+p, 输入 Install Package，输入LiveReload, 回车安装</p><p>安装成功后, 再次Ctrl+shift+p, 输入LiveReload: Enable/disable plug-ins, 回车, 选择 Simple Reload with delay (400ms)或者Simple Reload，两者的区别仅仅在于后者没有延迟。</p><p><strong>开始使用</strong></p><p>原文链接：<a href="https://blog.csdn.net/qq_20011607/article/details/81370236" target="_blank" rel="noopener">https://blog.csdn.net/qq_20011607/article/details/81370236</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text3 Install</title>
    <url>/2020/03/12/Sublime-Text3-Install/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="Sublime-Text3-一次能够安装好的教程详解。"><a href="#Sublime-Text3-一次能够安装好的教程详解。" class="headerlink" title="Sublime Text3 一次能够安装好的教程详解。"></a>Sublime Text3 一次能够安装好的教程详解。</h3><a id="more"></a><h3 id="Sublime-Text3-安装教程"><a href="#Sublime-Text3-安装教程" class="headerlink" title="Sublime Text3 安装教程"></a>Sublime Text3 安装教程</h3><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>去官网下载：<a href="http://www.sublimetext.cn/" target="_blank" rel="noopener">http://www.sublimetext.cn/</a></p><p><img src="/2020/03/12/Sublime-Text3-Install/Sublime01.png" alt="a48170e3051da81b40ba956fe85ac553.png"></p><p>用IDM会很慢，可以复制下载链接，用迅雷下载，3秒下载完毕。<br>下载完毕，双击安装。选择”Add to explorer context menu”.</p><h4 id="安装package-control插件"><a href="#安装package-control插件" class="headerlink" title="安装package control插件"></a>安装package control插件</h4><p>这是安装sublime的重点。</p><p>手动安装：<br>1 点击<br><a href="https://github.com/wbond/package_control" target="_blank" rel="noopener">https://github.com/wbond/package_control</a>去github下载Package Control安装报下载到本地，下载的文件名为：<br>package_control-master.zip。解压后将文件名改为Package Control；</p><p>2.打开Sublime的Preferences -&gt; Browse Packages菜单，将上面改好名字的Package Control文件夹复制过去,重启就会发现package control。</p><p><img src="/2020/03/12/Sublime-Text3-Install/Sublime02.png" alt="be3d5a2e4efd21446517b576426ee60c.png"></p><p>3.但是你会发现你点击package control后Install Package不成功，There are no packages available for installation的提示。</p><p>失败原因为官网地址被墙，导致channel_v3文件无法访问。</p><p>解决方法：点击Preferences——&gt;Package Settings——&gt;Package Control——&gt;Settings - User，</p><p>打开配置文件添加地址：</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="string">"channels"</span>:</span><br><span class="line">[<span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta-string">"https://github.com/JavenZ/channel_v3/raw/master/channel_v3.json"</span></span></span><br><span class="line"><span class="meta"></span>],</span><br></pre></td></tr></table></figure><p>以下两个地址任选一</p><p>GitHub地址：<a href="https://github.com/JavenZ/channel_v3/raw/master/channel_v3.json" target="_blank" rel="noopener">https://github.com/JavenZ/channel_v3/raw/master/channel_v3.json</a></p><p>国内地址：<a href="https://attachments-cdn.shimo.im/OykO0AIRnX0aeB4d/channel_v3.json" target="_blank" rel="noopener">https://attachments-cdn.shimo.im/OykO0AIRnX0aeB4d/channel_v3.json</a></p><p>以上json文件引用地址由简书作者Javen_01（知乎ID孙悟菜）提供，如果地址失效可以去他的GitHub查看最新地址。</p><p>下载完就可以下载插件。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/20/hello-world/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>博客域名解析使用</title>
    <url>/2020/04/21/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><p>通过Hexo搭建博客有一段时间了，在家闲着没啥事，想着先弄个域名玩一玩，也为以后搭建动态网站先奠定一个基础。<br><a id="more"></a></p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>第一次买，不太清楚这里的水深不深，没有考虑其他的网站，直接去阿里云购买域名。</p><p>选好了域名，然后加入清单购买。因为是第一次购买，第一年16人民币，不确定行不行，先买一年试试。然后就是实名认证了，认证速度比我想的快了许多，第二天就认证完了。（也就是今天，昨天买的域名，哈哈哈）</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>服务器就用阿里送的半年服务器先跑着（还不知道行不行呢，万一翻车岂不尴尬）。</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>通过ping 自己的博客，得到ip地址，然后通过ip地址进行解析，直接一次成功。（美滋滋）</p><p>等一会，打开就显示出博客内容了。</p><p>之后就是慢慢来了，域名有了，网站还远吗？</p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>回形取数</title>
    <url>/2020/02/02/%E5%9B%9E%E5%BD%A2%E5%8F%96%E6%95%B0/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="本题为蓝桥杯回形取数的python题解。"><a href="#本题为蓝桥杯回形取数的python题解。" class="headerlink" title="本题为蓝桥杯回形取数的python题解。"></a>本题为蓝桥杯回形取数的python题解。</h3><a id="more"></a><p><img src="/2020/02/02/%E5%9B%9E%E5%BD%A2%E5%8F%96%E6%95%B0/回形取数.png" alt="题目描述"><br>这个题目按照下右上左的顺序取数，并对每个取过的数进行标记。<br>一下代码提交后为runtime error，不太清楚为啥。之后再继续找找原因<br></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># str1 = input()</span><br><span class="line"># arr1 = str1.split(<span class="string">' '</span>)</span><br><span class="line"># m = <span class="built_in">int</span>(arr1[<span class="number">0</span>])</span><br><span class="line"># n = <span class="built_in">int</span>(arr1[<span class="number">1</span>])</span><br><span class="line">m,n = map(<span class="built_in">int</span>,input().split()) #简单写法</span><br><span class="line">Arr = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]</span><br><span class="line">Arr = [[] * n] * m</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    Arr[i] = [<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> input().split()]</span><br><span class="line">#<span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">#    str2 = input()</span><br><span class="line">#    Arr[i] = str2.split(<span class="string">' '</span>)</span><br><span class="line">sum = m * n</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> sum &gt; <span class="number">0</span>: #取过的数赋值为<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; m <span class="keyword">and</span> Arr[i][j] != <span class="number">-1</span>: #向下取数</span><br><span class="line">        print(Arr[i][j],end=<span class="string">' '</span>)</span><br><span class="line">        Arr[i][j] = <span class="number">-1</span></span><br><span class="line">        sum -= <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; n <span class="keyword">and</span> Arr[i][j] != <span class="number">-1</span>: #向右取数</span><br><span class="line">        print(Arr[i][j],end=<span class="string">' '</span>)</span><br><span class="line">        Arr[i][j] = <span class="number">-1</span></span><br><span class="line">        sum -= <span class="number">1</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    j -= <span class="number">1</span></span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> Arr[i][j] != <span class="number">-1</span>: #向上取数</span><br><span class="line">        print(Arr[i][j],end=<span class="string">' '</span>)</span><br><span class="line">        Arr[i][j] = <span class="number">-1</span></span><br><span class="line">        sum -= <span class="number">1</span></span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> Arr[i][j] != <span class="number">-1</span>: #向左取数</span><br><span class="line">        print(Arr[i][j],end=<span class="string">' '</span>)</span><br><span class="line">        Arr[i][j] = <span class="number">-1</span></span><br><span class="line">        sum -= <span class="number">1</span></span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>分解质因数</title>
    <url>/2020/02/01/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h1 id="基础练习-分解质因数"><a href="#基础练习-分解质因数" class="headerlink" title="基础练习 分解质因数"></a>基础练习 分解质因数</h1><p><img src="/2020/02/01/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/分解质因数图片.png" alt="图片"><br>这里用了两种方法，第一种是暴力解法，超时了，第二种递归，成功AC<br><a id="more"></a></p><h2 id="第一种解法-暴力解法："><a href="#第一种解法-暴力解法：" class="headerlink" title="第一种解法 暴力解法："></a>第一种解法 暴力解法：</h2><figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#第一种 暴力解法 超时</span></span><br><span class="line">def isPrime(x): <span class="meta">#判断是否为质数</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">2</span>,<span class="keyword">int</span>(x ** (<span class="number">1</span>/<span class="number">2</span>))+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> False</span><br><span class="line">    <span class="keyword">return</span> True</span><br><span class="line"></span><br><span class="line">str1 = <span class="keyword">input</span>() <span class="meta">#接收输入</span></span><br><span class="line">arr = str1.split(<span class="string">' '</span>) <span class="meta">#分割成数组</span></span><br><span class="line">a = <span class="keyword">int</span>(arr[<span class="number">0</span>]) <span class="meta">#取出开始值</span></span><br><span class="line">b = <span class="keyword">int</span>(arr[<span class="number">1</span>]) <span class="meta">#取出结束值</span></span><br><span class="line"><span class="keyword">for</span> i in range(a,b+<span class="number">1</span>): <span class="meta">#循环输出每一次的结果</span></span><br><span class="line">    str1 = <span class="string">''</span>.join([<span class="keyword">str</span>(i),<span class="string">'='</span>]) <span class="meta">#先得出前面的</span></span><br><span class="line">    <span class="keyword">if</span> isPrime(i): <span class="meta">#是质数的话就是本身</span></span><br><span class="line">        str1 = <span class="string">''</span>.join([str1,<span class="keyword">str</span>(i)])</span><br><span class="line">        <span class="keyword">print</span>(str1)</span><br><span class="line">    <span class="keyword">else</span>: <span class="meta">#不是质数</span></span><br><span class="line">        tmp = [] <span class="meta">#一个空列表</span></span><br><span class="line">        t = i</span><br><span class="line">        <span class="keyword">while</span> t != <span class="number">1</span>: <span class="meta">#经过一次一次除，最后除到<span class="number">1</span>结束</span></span><br><span class="line">            j = <span class="number">2</span> <span class="meta">#最小的质数为<span class="number">2</span>，从<span class="number">2</span>开始</span></span><br><span class="line">            <span class="keyword">while</span> j &lt;= t: <span class="meta">#从<span class="number">2</span>开始找最小能整除t的值</span></span><br><span class="line">                <span class="keyword">if</span> isPrime(j) <span class="keyword">and</span> t % j == <span class="number">0</span>:</span><br><span class="line">                    tmp.append(j)</span><br><span class="line">                    t /= j</span><br><span class="line">                    <span class="keyword">break</span> <span class="meta">#找到一个就结束，重新开始找</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j += <span class="number">1</span> <span class="meta">#不符合要求加<span class="number">1</span></span></span><br><span class="line">            <span class="keyword">if</span> t == <span class="number">1</span>: <span class="meta">#当等于<span class="number">1</span>时跳出循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="meta">#tmp = sorted(tmp) #因为是从小到大找的，不用排序也行</span></span><br><span class="line">        <span class="keyword">for</span> j in range(len(tmp)): <span class="meta">#然后按照列表开始输出</span></span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                str1 = str1 + <span class="keyword">str</span>(tmp[j])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                str1 = str1 + <span class="string">'*'</span> + <span class="keyword">str</span>(tmp[j])</span><br><span class="line">        <span class="keyword">print</span>(str1)</span><br></pre></td></tr></table></figure><h2 id="第二种解法-递归"><a href="#第二种解法-递归" class="headerlink" title="第二种解法 递归"></a>第二种解法 递归</h2><p>用乘积的方式进行计算，等于值时得到对应的质因数分解<br></p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第二种方法 递归</span></span><br><span class="line">def isPrime(<span class="built_in">num</span>): <span class="comment">#判断是否为质数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="built_in">num</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">num</span> % i == <span class="number">0</span>:</span><br><span class="line">            <span class="literal">return</span> False</span><br><span class="line">    <span class="literal">return</span> True</span><br><span class="line">def calcuate(<span class="built_in">num</span>,tmp):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,int(<span class="built_in">num</span> ** (<span class="number">1</span>/<span class="number">2</span>)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">num</span> % i == <span class="number">0</span> <span class="keyword">and</span> isPrime(i):</span><br><span class="line">            tmp.append(i)</span><br><span class="line">            <span class="built_in">num</span> = <span class="built_in">num</span><span class="comment"> // i</span></span><br><span class="line">            <span class="literal">return</span> calcuate(<span class="built_in">num</span>,tmp)</span><br><span class="line">    tmp.append(<span class="built_in">num</span>)</span><br><span class="line">    str1 = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="built_in">len</span>(tmp)): <span class="comment">#循环列表返回值</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            str1 += str(tmp[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str1 += <span class="string">'*'</span> + str(tmp[i])</span><br><span class="line">    <span class="literal">return</span> str1    </span><br><span class="line">str1 = input()</span><br><span class="line">arr = str1.<span class="built_in">split</span>(<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">a</span> = int(arr[<span class="number">0</span>])</span><br><span class="line">b = int(arr[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="keyword">a</span>,b+<span class="number">1</span>):</span><br><span class="line">    tmp = []</span><br><span class="line">    str1 = <span class="string">''</span>.join([str(i),<span class="string">'='</span>])</span><br><span class="line">    str1 += calcuate(i,tmp)</span><br><span class="line">    print(str1)</span><br></pre></td></tr></table></figure><p></p><h1 id="算法提高-质因数"><a href="#算法提高-质因数" class="headerlink" title="算法提高 质因数"></a>算法提高 质因数</h1><p><img src="/2020/02/01/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/质因数.png" alt="图片"><br>这个就是上个题的简写版，按照同样的递归方法即可<br></p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">def isPrime(<span class="built_in">num</span>): <span class="comment">#判断是否为质数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,int(<span class="built_in">num</span> ** (<span class="number">1</span>/<span class="number">2</span>))+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">num</span> % i == <span class="number">0</span>:</span><br><span class="line">            <span class="literal">return</span> False</span><br><span class="line">    <span class="literal">return</span> True</span><br><span class="line">def calcuate(<span class="built_in">num</span>,tmp): <span class="comment">#进行递归求解</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,int(<span class="built_in">num</span> ** (<span class="number">1</span>/<span class="number">2</span>))+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> isPrime(i) <span class="keyword">and</span> <span class="built_in">num</span> % i == <span class="number">0</span>:</span><br><span class="line">            tmp.append(i)</span><br><span class="line">            <span class="comment">#num = num // i</span></span><br><span class="line">            <span class="literal">return</span> calcuate(nu<span class="comment">m//i,tmp)</span></span><br><span class="line">    tmp.append(<span class="built_in">num</span>)</span><br><span class="line">    str1 = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            str1 += str(tmp[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str1 += <span class="string">'*'</span> + str(tmp[i])</span><br><span class="line">    <span class="literal">return</span> str1</span><br><span class="line"><span class="keyword">a</span> = eval(input())</span><br><span class="line">tmp = []</span><br><span class="line">str1 = str(<span class="keyword">a</span>) + <span class="string">'='</span> + calcuate(<span class="keyword">a</span>,tmp)</span><br><span class="line">print(str1) <span class="comment">#打印值</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo中渲染MathJax数学公式</title>
    <url>/2020/04/17/%E5%9C%A8Hexo%E4%B8%AD%E6%B8%B2%E6%9F%93MathJax%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><p>在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成Mathjax，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。<br><a id="more"></a></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Hexo 默认使用 hexo-renderer-marked 引擎渲染网页，该引擎会把一些特殊的 markdown 符号转换为相应的 html 标签，比如在 markdown 语法中，下划线_代表斜体，会被渲染引擎处理为<em>标签。</em></p><p>因为类 Latex 格式书写的数学公式下划线_表示下标，有特殊的含义，如果被强制转换为<em>标签，那么 MathJax 引擎在渲染数学公式的时候就会出错。</em></p><p>类似的语义冲突的符号还包括*, {, }, \\等。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>更换 Hexo 的 markdown 渲染引擎，hexo-renderer-kramed 引擎是在默认的渲染引擎 hexo-renderer-marked 的基础上修改了一些 bug ，两者比较接近，也比较轻量级。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。<br>然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为 hexo-renderer-kramed 引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js，把第11行的 escape 变量的值做相应的修改:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><p>这一步是在原基础上取消了对\,{,}的转义(escape)。<br>同时把第20行的em变量也要做相应的修改。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line"> em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>重新启动hexo（先clean再generate）,问题完美解决。哦，如果不幸还没解决的话，看看是不是还需要在使用的主题中配置mathjax开关。</p><h2 id="在Next主题中开启MathJax开关"><a href="#在Next主题中开启MathJax开关" class="headerlink" title="在Next主题中开启MathJax开关"></a>在Next主题中开启MathJax开关</h2><p>进入到主题目录，找到 _config.yml 配置问题，把 mathjax 默认的 false 修改为true，具体如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br></pre></td></tr></table></figure><p>别着急，这样还不够，还需要在文章的Front-matter里打开mathjax开关，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: index.html</span><br><span class="line">date: 2020-04-17 16:16:32</span><br><span class="line">tags:</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>—</p><p>不要嫌麻烦，之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。</p><p>本文参考链接：<a href="http://xudongyang.coding.me/math-in-hexo/" target="_blank" rel="noopener">http://xudongyang.coding.me/math-in-hexo/</a></p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界Web WP</title>
    <url>/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h2 id="攻防世界WebWp"><a href="#攻防世界WebWp" class="headerlink" title="攻防世界WebWp"></a>攻防世界WebWp</h2><p>本文为攻防世界web区的writeup。<br><a id="more"></a></p><p><a href="https://adworld.xctf.org.cn/" target="_blank" rel="noopener">题目地址</a></p><h3 id="view-source"><a href="#view-source" class="headerlink" title="view-source"></a>view-source</h3><p>打开直接右键得到flag。</p><h3 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h3><p>robots是一个爬虫协议，规定了访客可以访问哪些文件，以.txt文本显示。在地址栏后添加robots.txt进入robots页面。<br>显示flag_ls_h3re.php，然后访问，得到flag。</p><h3 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h3><p>.bak为电脑自动设置的备份文件。<br>直接地址添加/index.php.bak可得备份文件，打开可得flag。</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>这道题两种做法<br>第一种：<br>直接f12，打开network，<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/01.png" alt="f3738a25ab605fb8b8784491c5d5d040.png"><br>然后在地址栏加入cookie.php<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/02.png" alt="06588c1507fd173426276b57b1bc78c6.png"><br>得到flag<br>第二种：bp<br>抓包<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/03.png" alt="47324d9ace2eb7d38401ec00e3d4712b.png"><br>然后在地址栏加入cookie.php，再次抓包<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/04.png" alt="58b7bd929b82db184ea5de4a06f57aa2.png"><br>也可得到flag。</p><h3 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h3><p>打开后有个不能按的按钮，f12，发现属性为disabled<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/05.png" alt="fe780a899cc3c93e902cd2152b5affcc.png"><br>把这个删掉，刷新，得到flag。<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/06.png" alt="a6f9938bcbbeea57a26079e2c846572f.png"></p><h3 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h3><p>进去是这个页面，是爆破没错了。<br>先随便输入一下，弹窗提示为admin登录，那么用户名应该为admin了。接着就是弱口令，直接bp。<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/07.png" alt="fc49e7907a0c4e73ea41c09d35a41fb0.png"><br>抓包，送到Intruder，payload选择passwords<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/08.png" alt="7747c15f7d116759e4663af4910c97f4.png"><br>开始爆破。<br>然后找到长度不一样的即为密码。<br>然后登录即可找到flag。</p><h3 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h3><p>构造地址如下：<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/09.png" alt="ef06b27efbeaeceb70a6d0a74f699a78.png"><br>php是弱类型，所以’0’==0成立，b能是数字，可以构造b为数组b[]=5678，或者在b后加字母，比较时默认只比较数字部分。</p><h3 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h3><p>这个就是简单的get，post了。<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/10.png" alt="1186692dbbbcd5c3bb80c810b428c343.png"></p><h3 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h3><p>提示ip地址为123.123.123.123<br>该题掌握X-Forwarded-For和Referer的知识：<br>简称XFF，代表客户端，是HTTP的请求端真实的IP。<br>Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。referer 是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。<br>用bp抓包修改<br>右键送到Repeater，添加X-Forwarded-For:123.123.123.123，go，显示如下页面<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/11.png" alt="d0eab203ed63605eade4469542c943dc.png"><br>还要构造referer。<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/12.png" alt="5a7243e1dbb8e1ec66250fa2b5be76c3.png"><br>得出flag。</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>这道题就是菜刀的基本使用。<br>打开菜刀输入url，<img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/13.png" alt="f9713fc76cf46bad206a7058fe79d3e5.png"><br>打开flag.txt得到flag。</p><h3 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h3><p>这是命令执行漏洞，也就是用户通过浏览器在远程服务器上执行任意系统命令，这是第一次接触。参考了网上的wp。<br>先试一下本机127.0.0.1，有回显。<img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/14.png" alt="5552db0ea1c328d3cd82b16311af227b.png"><br>这个是可以添加连接符的，比如&amp;&amp;||等，这里试一下输入127.0.0.1&amp;&amp;dir<br>dir就是显示目录内容。<img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/15.png" alt="25da5b930a0600f6a16b047bd5ae061a.png"><br>回显有index.php<br>然后试试输入flag关键词</p><blockquote><p>127.0.0.1 &amp;&amp; find / -name “flag.*”</p></blockquote><p><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/16.png" alt="26fb9ef994a699ca100e4f2ba704627d.png"></p><p>找到位置，然后开始输入</p><blockquote><p>127.0.0.1 &amp;&amp; cat /home/flag.txt</p></blockquote><p>得到flag。</p><h3 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h3><p>查看源代码，是js代码。整理一下。<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/17.png" alt="4be7a3fec6b950d9c10e7bb8c5ad816d.png"><br>代码功能是把一串用逗号分隔的数字按ascii转成字符串，然后输出。</p><p>代码有很多没有用的变量，需要进行修改。<br>代码中有这样的ascii串，</p><blockquote><p>\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30</p></blockquote><p>转码后为55,56,54,79,115,69,114,116,107,49,50<br>再通过ascii转换<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/18.png" alt="281beda85aabf6c406af0984f3958bfb.png"><br>连起来就是flag。</p><h3 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h3><p>提示说初始页面，想到index.html,不行又试了试index.php，到network里边响应头找到flag。<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/19.png" alt="bf357a9dcbe4bc5f3b6c6ce1ebe5889f.png"></p><h5 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h5><p>提示robots，先看看robots文件，<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/20.png" alt="4a00ff9dcd6407567359d55d029b173a.png"><br>有个fl0g.php，打开看看。<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/21.png" alt="dafa7304aed10e61657aba39dc534c5a.png"><br>得到flag。</p><h3 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h3><p>打开试了半天，不知道是干哈的，没办法，搜一下吧。是thinkphp5 rce漏洞，这个以前没有见过。<br><img src="/2020/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb-WP/22.png" alt="6c7f65ceff78de22ac1b3536a1421eec.png"><br><a href="https://blog.csdn.net/qq_40884727/article/details/101452478" target="_blank" rel="noopener">ThinkPHP5.x rec漏洞分析与复现</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>算法提高 分苹果</title>
    <url>/2020/02/03/%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98-%E5%88%86%E8%8B%B9%E6%9E%9C/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="本文为蓝桥杯分苹果的python题解"><a href="#本文为蓝桥杯分苹果的python题解" class="headerlink" title="本文为蓝桥杯分苹果的python题解"></a>本文为蓝桥杯分苹果的python题解</h3><a id="more"></a><p><img src="/2020/02/03/%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98-%E5%88%86%E8%8B%B9%E6%9E%9C/分苹果.png" alt="图片"><br>看到这道题感觉还可以，花了一会就写出了代码，但提交上却TLE，试着简化了简化还是不行，最后找到了其他大佬的解法，通过差分数组求解</p><h2 id="我的方法和代码如下"><a href="#我的方法和代码如下" class="headerlink" title="我的方法和代码如下"></a>我的方法和代码如下</h2><p>也可解出答案，但是会超时<br>Time Limit Exceeded</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">N</span>,M = <span class="keyword">map</span>(<span class="keyword">int</span>,<span class="built_in">input</span>().<span class="keyword">split</span>(<span class="string">' '</span>))</span><br><span class="line">Arr = [<span class="number">0</span>] * <span class="keyword">N</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(M):</span><br><span class="line">    <span class="keyword">a</span>,<span class="keyword">b</span>,<span class="keyword">c</span> = <span class="keyword">map</span>(<span class="keyword">int</span>,<span class="built_in">input</span>().<span class="keyword">split</span>())</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="keyword">a</span>,<span class="keyword">b</span>+<span class="number">1</span>):</span><br><span class="line">        Arr[<span class="keyword">j</span>-<span class="number">1</span>] += <span class="keyword">c</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">N</span>):</span><br><span class="line">    <span class="keyword">print</span>(Arr[i],end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h2 id="运用差分数组"><a href="#运用差分数组" class="headerlink" title="运用差分数组"></a>运用差分数组</h2><p>代码很简洁，只计算一次就行<br>f[i] = d[i] - d[i-1]<br>d[2] = f[1]+d[0]+f[2] = d[1] + d[2] -d[1] = d[2]<br>数列第i项的值是可以用差分数组的前i项的和计算的，即d[i] = f[i]的前缀和<br>差分数组其实就相当于通过改变区间前段和末端与其他部分的差值，在最后进行累加的时候实行对整个区间的值的改变<br></p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">N</span>,M = <span class="keyword">map</span>(<span class="keyword">int</span>,<span class="built_in">input</span>().<span class="keyword">split</span>(<span class="string">' '</span>))</span><br><span class="line">Arr = [<span class="number">0</span>] * (<span class="keyword">N</span> + <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(M):</span><br><span class="line">    <span class="keyword">a</span>,<span class="keyword">b</span>,<span class="keyword">c</span> = <span class="keyword">map</span>(<span class="keyword">int</span>,<span class="built_in">input</span>().<span class="keyword">split</span>())</span><br><span class="line">    Arr[<span class="keyword">a</span>] += <span class="keyword">c</span></span><br><span class="line">    Arr[<span class="keyword">b</span>+<span class="number">1</span>] -= <span class="keyword">c</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,<span class="keyword">N</span>+<span class="number">1</span>):</span><br><span class="line">    Arr[i] += Arr[i-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">print</span>(Arr[i],end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编学习笔记</title>
    <url>/2020/01/18/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="汇编的简单学习笔记。"><a href="#汇编的简单学习笔记。" class="headerlink" title="汇编的简单学习笔记。"></a>汇编的简单学习笔记。</h3><a id="more"></a><h4 id="简单传送指令"><a href="#简单传送指令" class="headerlink" title="简单传送指令"></a>简单传送指令</h4><h5 id="传送指令"><a href="#传送指令" class="headerlink" title="传送指令"></a>传送指令</h5><p><strong>MOV DEST，SRC</strong> （DEST &lt;= SRC）<br>操作数尺寸必须保持一致<br>立即数永远不能作为目的操作数，CS寄存器不能做目的操作数。EIP不能作为操作数。<br>不影响各标志位状态。<br><img src="/2020/01/18/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/汇编笔记图片.png" alt="图片"></p><h5 id="交换指令"><a href="#交换指令" class="headerlink" title="交换指令"></a>交换指令</h5><p><strong>XCHG OPRD1,OPRD2</strong><br>内容交换<br>不能同时是存储单元，也不能有立即数。操作数尺寸一致。</p><h4 id="简单加减指令"><a href="#简单加减指令" class="headerlink" title="简单加减指令"></a>简单加减指令</h4><h5 id="加法指令"><a href="#加法指令" class="headerlink" title="加法指令"></a>加法指令</h5><p><strong>ADD DEST，SRC</strong> （DEST &lt;= DEST + SRC）<br>带进位的加法指令<br><strong>ADC DEST，SRC</strong> （DEST &lt;= DEST + SRC + CF）<br>加法指令ADD，ADC影响标志寄存器中的有关状态标志。</p><h5 id="减法指令"><a href="#减法指令" class="headerlink" title="减法指令"></a>减法指令</h5><p><strong>SUB DEST，SRC</strong> （DEST &lt;= DEST-SRC）<br>带借位的减法指令<br><strong>SBB DEST，SRC</strong> （DEST - SRC - CF = DEST）<br>减法指令SUB，SBB影响标志寄存器中的有关状态标志。</p><h5 id="加一指令"><a href="#加一指令" class="headerlink" title="加一指令"></a>加一指令</h5><p><strong>INC DEST</strong> （DEST &lt;= DEST + 1）<br>不影响标志寄存器中的进位标志（CF），会影响其他状态标志。</p><h5 id="减一指令"><a href="#减一指令" class="headerlink" title="减一指令"></a>减一指令</h5><p><strong>DEC DEST</strong> （DEST &lt;= DEST -1)<br>不影响标志寄存器中的进位标志（CF），会影响其他状态标志。</p><h5 id="去补指令"><a href="#去补指令" class="headerlink" title="去补指令"></a>去补指令</h5><p><strong>NEG OPRD</strong> （OPRD &lt;= 0-OPRD)<br>会影响标志寄存器中的有关状态标志。如果操作数为0，那么使得进位标志为0，否则进位标志为1。</p><h4 id="状态标志"><a href="#状态标志" class="headerlink" title="状态标志"></a>状态标志</h4><div class="table-container"><table><thead><tr><th><strong>状态标志</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>进位标志（CF）</td><td>主要反应算数运算是否产生进位或借位。如果运算结果的最高位产生一个进位或借位，则CF被置1，否则CF被清0。</td></tr><tr><td>零标志（ZF）</td><td>反应运算结果是否为0. 如果运算结果为0，则ZF被置1，否则ZF被清0。</td></tr><tr><td>符号标志（SF）</td><td>反应运算结果的符号位。SF与运算结果的最高位相同，如果运算结果的最高位为1，则SF被置1，否则被清0。<strong>二进制表示的最高位</strong></td></tr><tr><td>溢出标志（OF）</td><td>反应<strong>有符号数</strong>加减运算是否引起溢出。如果溢出，OF置1，否则清0 （正数加上正数变成负数，负数加上负数变成正数。正数减去负数变成负数，负数减去正数变成正数）</td></tr><tr><td>奇偶标志（PF）</td><td>反应运算结果<strong>最低字节</strong>中含有“1”的位数是偶数还是奇数。是偶数，PF置1，否则，清0. （可进行奇偶校验）</td></tr><tr><td>辅助进位标志（AF）</td><td>反应算术运算中第3位是否产生进位或借位，或者最低的4位是否有进位或借位。如果产生进位或借位，AF置1，否则清0。</td></tr></tbody></table></div><h4 id="状态标志操作指令"><a href="#状态标志操作指令" class="headerlink" title="状态标志操作指令"></a>状态标志操作指令</h4><div class="table-container"><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>清进位标志指令（CLC）</td><td>使进位标志CF为0</td></tr><tr><td>置进位标志指令（STC）</td><td>使进位标志CF为1</td></tr><tr><td>进位标志取反指令（CMC）</td><td>使进位标志CF取反</td></tr><tr><td>获取状态标志操作（LAHF）</td><td>把标志寄存器的低8位，送到通用寄存器AH中。对标志位自身不产生影响。</td></tr><tr><td>设置状态标志操作指令（SAHF）</td><td>对标志寄存器中低8位状态标志产生影响，使得SF，ZF，AF，PF和CF分别成为来自寄存器AH中对应位的值，但保留位（位1，位3和位5）不受影响</td></tr></tbody></table></div><h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><p><strong>立即寻址</strong><br>操作数是立即数。<br><strong>寄存器寻址</strong><br><strong>直接寻址</strong><br>操作数在存储器中。直接寻址的地址要放在括号中，在源程序中，往往用变量名表示。<br><strong>寄存器间接寻址</strong><br>操作数在存储器中。</p><h4 id="取有效地址指令"><a href="#取有效地址指令" class="headerlink" title="取有效地址指令"></a>取有效地址指令</h4><p><strong>LEA REG，OPRD</strong><br>把操作数OPRD的有效地址传送到操作数REG，原操作数OPRD必须是一个存储器操作数，目的操作数REG必须是一个16位或者32位通用寄存器。<br><strong>不影响各标志。</strong></p><h4 id="条件转移指令"><a href="#条件转移指令" class="headerlink" title="条件转移指令"></a>条件转移指令</h4><div class="table-container"><table><thead><tr><th>指令格式</th><th>转移条件</th><th>转移说明</th><th>其他说明</th></tr></thead><tbody><tr><td>JZ</td><td>ZF=1</td><td>等于0转移（jump if zero</td><td>单个标志</td></tr><tr><td>JE</td><td>ZF = 1</td><td>相等转移（jump if equal）</td><td>单个标志</td></tr><tr><td>JNZ</td><td>ZF=0</td><td>不等于0转移（Jump if not zero）</td><td>单个标志</td></tr><tr><td>JNE</td><td>ZF=0</td><td>不相等转移（Jump if not equal）</td><td>单个标志</td></tr><tr><td>JS</td><td>SF=1</td><td>为负转移（jump if sign）</td><td>单个标志</td></tr><tr><td>JNS</td><td>SF=0</td><td>为正转移（Jump if not sign）</td><td>单个标志</td></tr><tr><td>JO</td><td>OF=1</td><td>溢出转移（Jump if overflow）</td><td>单个标志</td></tr><tr><td>JNO</td><td>OF=0</td><td>不溢出转移（Jump if not overflow）</td><td>单个标志</td></tr><tr><td>JP</td><td>PF=1</td><td>偶转移（Jump if parity）</td><td>单个标志</td></tr><tr><td>JPE</td><td>PF=1</td><td>偶转移（Jump if parity even）</td><td>单个标志</td></tr><tr><td>JNP</td><td>PF=1</td><td>奇转移（Jump if not parity）</td><td>单个标志</td></tr><tr><td>JPO</td><td>PF=1</td><td>奇转移（Jump if parity odd）</td><td>单个标志</td></tr><tr><td>JB</td><td>PF=1</td><td>低于转移（Jump if below）</td><td>单个标志（无符号数）</td></tr><tr><td>JNAE</td><td>PF=1</td><td>不高于等于转移（Jump if not above or equal）</td><td>单个标志（无符号数）</td></tr><tr><td>JC</td><td>PF=1</td><td>进位位被置转移（Jump if carry）</td><td>单个标志（无符号数）</td></tr><tr><td>JNB</td><td>CF=0</td><td>不低于转移（Jump if not below）</td><td>单个标志（无符号数）</td></tr><tr><td>JAE</td><td>CF=0</td><td>高于等于转移（Jump if above or equal）</td><td>单个标志(无符号数）</td></tr><tr><td>JNC</td><td>CF=0</td><td>进位位被清转移（Jump if not carry）</td><td>单个标志（无符号数）</td></tr><tr><td>JBE</td><td>CF=1或者ZF=1</td><td>低于等于转移（Jump if below or equal）</td><td>两个标志（无符号数）</td></tr><tr><td>JNA</td><td>CF=1或者ZF=1</td><td>不高于转移（Jump if not above）</td><td>两个标志（无符号数）</td></tr><tr><td>JNBE</td><td>CF=0并且ZF=0</td><td>不低于等于转移（Jump if not below or equal）</td><td>两个标志（无符号数）</td></tr><tr><td>JA</td><td>CF=0并且ZF=0</td><td>高于转移（Jump if above）</td><td>两个标志（无符号数）</td></tr><tr><td>JL</td><td>SF！=OF</td><td>小于转移（jump if less）</td><td>两个标志（有符号数）</td></tr><tr><td>JNGE</td><td>SF！=OF</td><td>不大于等于转移（Jump if not greater or equal）</td><td>两个标志（有符号数）</td></tr><tr><td>JNL</td><td>SF=OF</td><td>不小于转移（Jump if not less）</td><td>两个标志（有符号数）</td></tr><tr><td>JGE</td><td>SF=OF</td><td>大于等于转移（Jump if greater or equal）</td><td>两个标志（有符号数）</td></tr><tr><td>JLE</td><td>ZF=1或者SF！=OF</td><td>小于等于转移（Jump if not less）</td><td>三个标志（有符号数）</td></tr><tr><td>JNG</td><td>ZF=1或者SF！=OF</td><td>不大于转移（Jump if not greater）</td><td>三个标志（有符号数）</td></tr><tr><td>JNLE</td><td>ZF=0并且SF=OF</td><td>不小于等于转移（Jump if not less or equal）</td><td>三个标志（有符号数）</td></tr><tr><td>JG</td><td>ZF=0并且SF=OF</td><td>大于转移（Jump if greater）</td><td>三个标志（有符号数）</td></tr><tr><td>JCXZ</td><td>CX=0</td><td>计数器CX为0转移</td><td>与标志无关</td></tr><tr><td>JECXZ</td><td>ECX=0</td><td>计数器ECX为0转移</td><td>与标志无关</td></tr><tr><td>JMP OPRD/LABEL</td><td></td><td>无条件跳转指令</td></tr></tbody></table></div><h5 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h5><p><strong>CMP DEST，SRC</strong><br>根据DEST-SRC的差来<strong>影响标志寄存器中的各状态标志</strong>，但不把作为结果的差发送到目的操作数DEST。</p><h5 id="无条件转移指令"><a href="#无条件转移指令" class="headerlink" title="无条件转移指令"></a>无条件转移指令</h5><p><strong>JMP LABEL</strong><br>无条件转移，不影响标志。</p><h5 id="堆栈的主要用途"><a href="#堆栈的主要用途" class="headerlink" title="堆栈的主要用途"></a>堆栈的主要用途</h5><ul><li>保护寄存器内容或者保护现场</li><li>保护返回地址</li><li>传递参数</li><li>安排局部变量或者临时变量</li></ul><p><strong>PUSH SRC</strong><br>将源操作数SRC压入堆栈。<br><strong>POP DEST</strong><br>从栈顶弹出一个双字或者字数据到目的操作数DEST。<br><strong>堆栈指令不影响标志位</strong><br>压入或弹出16位或32位数应加前缀WORD PTR或DWORD PTR.(寄存器除外）</p><h5 id="通用寄存器全进栈指令和全出栈指令"><a href="#通用寄存器全进栈指令和全出栈指令" class="headerlink" title="通用寄存器全进栈指令和全出栈指令"></a>通用寄存器全进栈指令和全出栈指令</h5><p><strong>PUSHA</strong><br><strong>POPA</strong><br>16位通用寄存器指令。压入顺序为AX，CX，DX，BX，SP，BP，SI，DI。<br>出栈顺序相反。<br><strong>PUSHAD</strong><br><strong>POPAD</strong><br>32位通用寄存器指令。压入顺序EAX，ECX，EDX，EBX，ESP，EBP，ESI，EDI。<br>出栈顺序相反。</p><h4 id="乘除运算指令"><a href="#乘除运算指令" class="headerlink" title="乘除运算指令"></a>乘除运算指令</h4><h5 id="无符号数乘法指令"><a href="#无符号数乘法指令" class="headerlink" title="无符号数乘法指令"></a>无符号数乘法指令</h5><p><strong>MUL OPRD</strong><br>OPRD是字节操作数，则把AL中的无符号数与OPRD相乘，16位结果送到AX中；如果OPRD是字操作数，则把AX中的无符号数与OPRD相乘，32位结果送到寄存器对DX：AX中，DX含高16位，AX含低16位。如果OPRD是双字操作数，则把EAX中的无符号数与OPRD相乘，64位结果送到寄存器对EDX：EAX中，EDX含高32位，EAX含低32位。<br><strong>OPRD不能是立即数。</strong></p><h5 id="有符号数乘法指令"><a href="#有符号数乘法指令" class="headerlink" title="有符号数乘法指令"></a>有符号数乘法指令</h5><p><strong>IMUL OPRD</strong><br>隐含操作数 AL，AX和EAX，跟OPRD尺寸有关<br><strong>IMUL DEST，SRC</strong>（DEST &lt;= DEST <em>SRC）<br>SRC可以为立即数。<br><strong>IMUL DEST，SRC1，SRC2</strong>（DEST &lt;= SRC1 </em>SRC2）<br>SRC1不能是立即数，SRC2只能是立即数</p><p>如果乘积的高半部分（字节相乘时为AH）不等于0，则标志CF=1，OF=1；否则CF=0，OF=0.对其他标志为无定义。</p><h5 id="无符号数除法指令"><a href="#无符号数除法指令" class="headerlink" title="无符号数除法指令"></a>无符号数除法指令</h5><p><strong>DIV OPRD</strong><br>如果OPRD是字节操作数，则把AX中的无符号数除以OPRD，所得商送到AL中，余数送到AH中；如果OPRD是子操作数，则把寄存器对DX：AX中的无符号数除以OPRD，所得商送到AX，余数送到DX中。如果OPRD是双字操作数，则把寄存器对EDX：EAX中的无符号数除以OPRD，所得商送到EAX中，余数送到EDX中。<br><strong>OPRD不能是立即数</strong></p><h5 id="有符号数除法指令"><a href="#有符号数除法指令" class="headerlink" title="有符号数除法指令"></a>有符号数除法指令</h5><p><strong>IDIV OPRD</strong></p><p>除法指令对状态标志的影响无定义。</p><h4 id="符号扩展指令"><a href="#符号扩展指令" class="headerlink" title="符号扩展指令"></a>符号扩展指令</h4><div class="table-container"><table><thead><tr><th>指令</th><th>作用</th><th>详情</th></tr></thead><tbody><tr><td>CBW</td><td>字节转换为字指令</td><td>把寄存器AL中的符号扩展到寄存器AH。若AL最高位为0，AH=0，若AL最高位为1，AH=OFFH</td></tr><tr><td>CWD</td><td>字转换为双字指令</td><td>把寄存器AX中的符号扩展到寄存器DX。若AX最高位为0，DX=0，若AX最高位为1，DX=OFFFFH</td></tr><tr><td>CDQ</td><td>双字转换为四字指令</td><td>把寄存器EAX中的符号扩展到寄存器EDX。若EAX最高位为0，EDX=0，若EAX最高位为1，EDX=OFFFFFFFFH</td></tr><tr><td>CWDE</td><td>另一条字转换为双字指令</td><td>把寄存器AX中的符号扩展到寄存器EAX。若AX最高位为0，EAX的高16位都为0，若AX最高位为1，则EAX的高16位都为1.</td></tr></tbody></table></div><p>这四条指令不影响状态标志位。</p><h4 id="扩展传送指令"><a href="#扩展传送指令" class="headerlink" title="扩展传送指令"></a>扩展传送指令</h4><h5 id="符号扩展传送指令"><a href="#符号扩展传送指令" class="headerlink" title="符号扩展传送指令"></a>符号扩展传送指令</h5><p><strong>MOVSX DEST，SRC</strong><br>把源操作数SRC符号扩展后送至目的操作数DEST。<br>不改变源操作数，也不影响标志寄存器中的状态标志。</p><h5 id="零扩展传送指令"><a href="#零扩展传送指令" class="headerlink" title="零扩展传送指令"></a>零扩展传送指令</h5><p><strong>MOVZX DEST，SRC</strong><br>把源操作数SRC扩展后送至目的操作数DEST。<br>不改变源操作数，也不影响标志寄存器中的状态标志。</p><h4 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h4><div class="table-container"><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>NOT OPRD</td><td>操作数按位取反，送回OPRD 对标志没有影响</td></tr><tr><td>AND DEST，SRC</td><td>两个操作数按位与操作，使CF=0，OF=0，其他标志反映运算结果，AF未定义</td></tr><tr><td>OR DEST，SRC</td><td>按位或运算 使CF=0，OF=0，其他标志反应运算结果，AF未定义</td></tr><tr><td>XOR DEST，SRC</td><td>按位异或运算 使CF=0，OF=0，其他标志反应运算结果，AF未定义</td></tr><tr><td>TEST DEST，SRC</td><td>两个操作数按位与，但不送到DEST，CF=0，OF=0，其他标志反应运算结果</td></tr></tbody></table></div><h4 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令"></a>移位指令</h4><div class="table-container"><table><thead><tr><th>指令</th><th>作用</th><th>详情</th></tr></thead><tbody><tr><td>SAL OPRD，count</td><td>算术左移指令</td><td>操作数OPRD左移count位，每向左移动一位，右边用0补足一位，移出的最高位进入标志位CF。状态CF受影响；SF、ZF和PF反映移位后的结果；标志OF受影响较复杂，AF未定义</td></tr><tr><td>SHL OPRD，count</td><td>逻辑左移指令</td><td>操作数OPRD左移count位，每向左移动一位，右边用0补足一位，移出的最高位进入标志位CF。状态CF受影响；SF、ZF和PF反映移位后的结果；标志OF受影响较复杂，AF未定义</td></tr><tr><td>SAR OPRD，count</td><td>算术右移指令</td><td>操作数OPRD右移count位，每向右移动一位，左边符号保持不变，移出的最低位进入标志位CF。状态CF受影响；SF、ZF和PF反映移位后的结果；标志OF受影响较复杂，AF未定义</td></tr><tr><td>SHR OPRD，count</td><td>逻辑右移指令</td><td>操作数OPRD右移count位，每向右移动一位，左边用0补足，移出的最低位进入标志位CF。状态CF受影响；SF、ZF和PF反映移位后的结果；标志OF受影响较复杂，AF未定义</td></tr><tr><td>ROL OPRD，count</td><td>左循环移位指令</td><td>OPRD循环左移count位，每向左移一位，操作数的最高位移入最低位，同时最高位移入进位标志CF。标志CF受影响，标志OF受影响情况较复杂，其他状态标志不受影响。</td></tr><tr><td>ROR OPRD，count</td><td>右循环移位指令</td><td>OPRD循环右移count位，每向右移一位，操作数的最低位移入最高位，同时最低位移入进位标志CF。标志CF受影响，标志OF受影响情况较复杂，其他状态标志不受影响。</td></tr><tr><td>RCL OPRD，count</td><td>带进位左循环移位指令</td><td>把操作数OPRD连同CF循环左移count位，每向左移一位，操作数的最高位移入进位标志CF，CF移入操作数的最低位。标志CF受影响，标志OF受影响情况较复杂，其他状态标志不受影响。</td></tr><tr><td>RCR OPRD，count</td><td>带进位右循环移位指令</td><td>把操作数OPRD连同CF循环右移count位，每向右移一位，操作数的最低位移入进位标志CF，CF移入操作数的最高位。标志CF受影响，标志OF受影响情况较复杂，其他状态标志不受影响。</td></tr><tr><td>SHLD OPRD1，OPRD2，count</td><td>双精度左移指令</td><td>OPRD1左移指定count位，低端端空出的位用操作数OPRD2高端的count位填补，OPRD2内容保持不变。OPRD1中最后移出的位保留在进位标志CF中。</td></tr><tr><td>SHRD OPRD1，OPRD2，count</td><td>双精度右移指令</td><td>OPRD1右移指定count位，高端空出的位用操作数OPRD2低端的count位填补，OPRD2内容保持不变。OPRD1中最后移出的位保留在进位标志CF中</td></tr></tbody></table></div><h4 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h4><p><strong>循环指令不影响各标志</strong></p><div class="table-container"><table><thead><tr><th>指令</th><th>格式</th><th>详情</th></tr></thead><tbody><tr><td>计数循环指令</td><td>LOOP LABEL</td><td>使寄存器ECX值减1，如果结果不等于0，则转移到标号LABEL处，否则顺序执行LOOP后的指令 相当于 DEC ECX， JNZ LABEL 两条指令</td></tr><tr><td>等于/全零循环指令</td><td>LOOPE LABEL/LOOPZ LABEL</td><td>使寄存器ECX值减1，如果结果不等于0，且零标志ZF等于1，转移到标号LABEL处，否则顺序执行。指令本身实施的寄存器ECX减1不影响标志</td></tr><tr><td>不等于/非零循环指令</td><td>LOOPNE LABEL/LOOPNZ LABEL</td><td>使寄存器ECX值减1，如果结果不等于0，且零标志ZF等于0，转移到标号LABEL处，否则顺序执行。指令本身实施的寄存器ECX减1不影响标志</td></tr><tr><td>计数器转移指令</td><td>JECXZ LABEL</td><td>当寄存器ECX值等于0时转移到标号LABEL处，否则顺序执行。</td></tr></tbody></table></div><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><p>字符串操作的方向由标志寄存器中的<strong>方向标志DF</strong>控制<br>当方向标志DF复位（为0）时，操作方向是由低到高，按递增方式调整寄存器ESI或EDI的值；<br>当方向标志DF置位（为1）时，操作方向是由高到低，按递减方式调整寄存器ESI或EDI的值。</p><div class="table-container"><table><thead><tr><th>指令</th><th>格式</th><th>详情</th></tr></thead><tbody><tr><td>字符串装入字节</td><td>LODSB</td><td>把寄存器ESI指向的一个字节数据装入到累加器AL中，根据方向标志DF复位或置为使ESI的值增1或减1</td></tr><tr><td>字符串装入字</td><td>LODSW</td><td>把寄存器ESI指向的一个字数据装入到累加器AX中，根据方向标志DF复位或置为使ESI的值增2或减2</td></tr><tr><td>字符串装入双字</td><td>LODSD</td><td>把寄存器ESI指向的一个双字数据装入到累加器AX中，根据方向标志DF复位或置为使ESI的值增4或减4</td></tr><tr><td>存储字节</td><td>STOSB</td><td>STOSB把累加器AL的内容送到寄存器ED所指向的存储单元中，然后根据方向标志DF复位或置位使EDI的值增1或减1.</td></tr><tr><td>存储字</td><td>STOSW</td><td>STOSW把累加器AX的内容送到寄存器EDI所指向的存储单元中，然后根据方向标志DF使EDI的值增2或减2</td></tr><tr><td>存储双字</td><td>STOSD</td><td>STOSD把累加器EAX的内容送到寄存器EDI所指向的存储单元中，然后根据方向标志DF使ED的值增4或减4。</td></tr><tr><td>字节传送</td><td>MOVSB</td><td>MOVSB把寄存器ESI所指向的一个字节数据传送到由寄存器EDI所指向的存储单元中，然后根据方向标志DF复位或置位使ESI和EDI的值分别增1或减1.不会影响AL。不影响标志</td></tr><tr><td>字传送</td><td>MOVSW</td><td>MOVSW把寄存器ESI所指向的一个字数据传送到由寄存器EDI所指向的存储单元中，然后根据方向标志DF使ESI和EDI的值分别增2或减2。不影响标志</td></tr><tr><td>双字传送</td><td>MOVSD</td><td>MOVSD把寄存器ESI所指向的一个双字数据传送到由寄存器ED所指向的存储单元中，然后根据方向标志DF使ESI和EDI的值分别增4或减4.不影响标志</td></tr><tr><td>串字节扫描</td><td>SCASB</td><td>SCASB把累加器AL的内容与由寄存器EDI所指向一个字节数据采用择减方式比较，相减结果反映到各状态标志（CF、ZF、OF、SF、PF和AF），但不影响两个提作数，然后根据方向标志DF复位或置位使EDI的值增1或减1。</td></tr><tr><td>串字扫描</td><td>SCASW</td><td>SCASW把累加器AX的内容与由寄存器EDI所指向的一个字数据比较结果影响标志，然后EDI的值增2或减2.</td></tr><tr><td>串双字扫描</td><td>SCASD</td><td>SCASD把累加器EAX的内容与由寄存器ED所指向的一个双字数据比较，结果影响标志，然后EDI的值增4或减4。</td></tr><tr><td>串字节比较</td><td>CMPSB</td><td>CMPSB把寄存器ESI所指向的一个字节数据与由寄存器ED所指向的个字节数据采用相减方式出较，相减结果反映到各状态标志（CE、ZF、OF、SF、PF和AF）不影响两个操作数，根据方向标志DF复位或置位是ESI和EDI的值分别增1或减1</td></tr><tr><td>串字比较</td><td>CMPSW</td><td>CMPSW把寄存器ESI所指向的一个字数据与由寄存器EDI所指向的个字数据比较，结果影响标志，然后按调整值2调整ESI和EDI的值</td></tr><tr><td>串双字比较</td><td>CMPSD</td><td>CMPSD把寄存器ESI所指向的一个双字数据与由寄存器EDI所指向的一个双字数据比较，结果影响标志，然后按调整值4调整ESI和EDI的值。</td></tr></tbody></table></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>College Study</category>
      </categories>
      <tags>
        <tag>汇编学习</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵乘法</title>
    <url>/2020/02/02/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="本文为蓝桥杯矩阵乘法的题解。"><a href="#本文为蓝桥杯矩阵乘法的题解。" class="headerlink" title="本文为蓝桥杯矩阵乘法的题解。"></a>本文为蓝桥杯矩阵乘法的题解。</h3><a id="more"></a><p>题目描述<br><img src="/2020/02/02/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/矩阵乘法.png" alt="题目描述"><br>运用到矩阵幂的方法<br></p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">str1 = input()</span><br><span class="line">arr1 = str1.split(<span class="string">' '</span>)</span><br><span class="line">m = int(arr1[<span class="number">0</span>])</span><br><span class="line">n = int(arr1[<span class="number">1</span>])</span><br><span class="line"><span class="symbol">Arr1</span> = [[] for i in range(m)]</span><br><span class="line"><span class="symbol">Arr2</span> = []</span><br><span class="line"><span class="symbol">Arr3</span> = []</span><br><span class="line">for i in range(m):</span><br><span class="line">    <span class="symbol">Arr2</span>.append([])</span><br><span class="line">    <span class="symbol">Arr3</span>.append([])</span><br><span class="line">    for j in range(m):</span><br><span class="line">        <span class="symbol">Arr2</span>[i].append(<span class="number">0</span>)</span><br><span class="line">        <span class="symbol">Arr3</span>[i].append(<span class="number">0</span>)</span><br><span class="line">for i in range(m):</span><br><span class="line">    str2 = input()</span><br><span class="line">    <span class="symbol">Arr1</span>[i] = str2.split(<span class="string">' '</span>)</span><br><span class="line">for i in range(m):</span><br><span class="line">    for j in range(m):</span><br><span class="line">        <span class="symbol">Arr2</span>[i][j] = <span class="symbol">Arr1</span>[i][j]</span><br><span class="line">        if n == <span class="number">0</span>: #当为<span class="number">0</span>次幂时，为单位矩阵</span><br><span class="line">            if i == j:</span><br><span class="line">                <span class="symbol">Arr3</span>[i][j] = <span class="number">1</span></span><br><span class="line">            else:</span><br><span class="line">                <span class="symbol">Arr3</span>[i][j] = <span class="number">0</span></span><br><span class="line">        else:</span><br><span class="line">            <span class="symbol">Arr3</span>[i][j] = <span class="symbol">Arr1</span>[i][j]</span><br><span class="line">for t in range(n<span class="number">-1</span>):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        for j in range(m):</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            for k in range(m):</span><br><span class="line">                tmp += int(<span class="symbol">Arr2</span>[i][k]) * int(<span class="symbol">Arr1</span>[k][j]) #矩阵相乘</span><br><span class="line">            <span class="symbol">Arr3</span>[i][j] = tmp</span><br><span class="line">    for i in range(m):</span><br><span class="line">        for j in range(m):</span><br><span class="line">            <span class="symbol">Arr2</span>[i][j] = <span class="symbol">Arr3</span>[i][j]</span><br><span class="line">for i in range(m):</span><br><span class="line">    for j in range(m):</span><br><span class="line">        print(<span class="symbol">Arr3</span>[i][j],end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>算法训练 s01串</title>
    <url>/2020/02/04/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-s01%E4%B8%B2/</url>
    <content><![CDATA[<!-- build time:Tue Apr 21 2020 19:59:43 GMT+0800 (GMT+08:00) --><h3 id="本文为蓝桥杯s01串的题解。"><a href="#本文为蓝桥杯s01串的题解。" class="headerlink" title="本文为蓝桥杯s01串的题解。"></a>本文为蓝桥杯s01串的题解。</h3><a id="more"></a><p><img src="/2020/02/04/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0-s01%E4%B8%B2/s01串.png" alt="图片"></p><h1 id="直接计算-暴力求解"><a href="#直接计算-暴力求解" class="headerlink" title="直接计算 暴力求解"></a>直接计算 暴力求解</h1><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">str1 = <span class="string">'0'</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">print</span>(str1)</span><br><span class="line">    <span class="keyword">else</span>:     #通过两个字符串，一个作为对照一个进行运算，一轮结束后重新赋值后再运算</span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(n):          </span><br><span class="line">        str2 = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">            <span class="keyword">if</span> str1[i] == <span class="string">'0'</span>:</span><br><span class="line">                str2 += <span class="string">'1'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                str2 += <span class="string">'01'</span></span><br><span class="line">        str1 = str2</span><br><span class="line">    <span class="keyword">print</span>(str1)</span><br></pre></td></tr></table></figure><h1 id="递归运算"><a href="#递归运算" class="headerlink" title="递归运算"></a>递归运算</h1><h2 id="规律："><a href="#规律：" class="headerlink" title="规律："></a>规律：</h2><p>起始 0</p><p>n=1: 1</p><p>n=2: 01</p><p>n=3: 101</p><p>n=4: 01101</p><p>n=5: 10101101</p><p>发现一个串是由前两个串拼接起来<br></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">def ans(n):</span><br><span class="line">    <span class="keyword">if</span> n == 0:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">'0'</span>,<span class="attribute">end</span>=<span class="string">''</span>)</span><br><span class="line">    elif n == 1:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">'1'</span>,<span class="attribute">end</span>=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ans(n-2)</span><br><span class="line">        ans(n-1)</span><br><span class="line">n = eval(input())</span><br><span class="line">ans(n)</span><br></pre></td></tr></table></figure><p></p><h1 id="来个错误的事例"><a href="#来个错误的事例" class="headerlink" title="来个错误的事例"></a>来个错误的事例</h1><p>python字符串一旦创建，里边的元素不可以更改，可以重新赋值，或者变换为列表进行替换<br></p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">str1 = <span class="string">'0'</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str1[<span class="keyword">j</span>] == <span class="string">'0'</span>:</span><br><span class="line">            str1[<span class="keyword">j</span>] = <span class="string">"1"</span> #这里语法错误,元素无法更改</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str1.<span class="keyword">insert</span>(<span class="keyword">j</span>,<span class="string">"0"</span>)</span><br><span class="line">            <span class="keyword">j</span> += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span>(str1)</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
</search>
